search_index = {"http://www.w3.org/WAI/perspectives/":{"title":"Web Accessibility Perspectives Videos: Explore the Impact and Benefits for Everyone","flavors":{}},"http://www.w3.org/WAI/tutorials/":{"title":"\n  Tutorials Overview\n\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{}},"http://www.w3.org/WAI/bcase/":{"title":"Developing a Web Accessibility Business Case for Your Organization: Overview | Web Accessibility Initiative (WAI) | W3C","flavors":{}},"http://www.w3.org/WAI/eval/preliminary.php":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C","flavors":{}},"http://www.w3.org/WAI/eval/preliminary.php#title":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Page title","flavors":{"1,example":["page title"],"0.5,example":["page titles are:","\nshown in the window title bar in some browsers\nshown in browsers' tabs when there are multiple web pages open\nshown in search engine results\nused for browser bookmarks/favorites\nread by screen readers\n","(in the web page markup they are the <title> within the <head>.)","the image below shows the page title \"easy checks - a first review of web accessibility\" in the title bar, and the titles of 4 pages in the tabs. note that in the tabs, only the first part of the page title is shown."," figure: firefox browser with full title in the title bar and partial titles in the tabs.\n","good page titles are particularly important for orientation — to help people know where they are and move between pages open in their browser. the first thing screen readers say when the user goes to a different web page is the page title.","what to do:","\nlook at the page's title (or with a screen reader, listen to it).\nlook at titles of other pages within the website.\n","what to check for:","\ncheck that there is a title that adequately and briefly describes the content of the page.\ncheck that the title is different from other pages on the website, and adequately distinguishes the page from other web pages.\n","tips","\nthere is flexibility on what makes a good page title.\nbest practice is for titles to be \"front-loaded\" with the important and unique identifying information first.\nfor example:\npoor titles:\nwelcome to home page of acme web solutions, inc.\nacme web solutions, inc. | about us\nacme web solutions, inc. | contact us\nacme web solutions, inc. | history\nbetter page titles:\nacme web solutions home page\nabout acme web solutions\ncontact acme web solutions\nhistory of acme web solutions\n","page title checks","to check page title with different browsers","\nif you have a browser that displays the page title in the window title bar by default, use that browser. some versions of firefox, safari, opera, and older versions of ie show the title by default.\nfirefox on windows: if the title bar isn't displayed you might be able to display it by pressing: alt+v, t, m (or right-mouse click in the empty area after the tab and select menu bar).\nif your browser doesn't have a title bar, you can do try one of these:\nwith your mouse, hover over the browser tab to see the full page title, like this:\nfigure: page title in popup, displayed with mouse hover over tab.\ndisplay the add bookmark dialog box, which includes the title. in some windows browsers, press ctrl+d. in some mac browsers, press cmd+d to get the add bookmark dialog box.\n","to check page title with ie wat","\n(some versions of ie have the title bar so you can just look there, you don't need to do the steps below.)\nopen the web page you are checking.\nin the toolbar, select \"structure\", then \"heading structure\". or, with the keyboard: ctrl/cmd+alt+6, then down arrow key to \"heading structure\".\na new page opens.\nthe page title is shown after \"title:\".\n","learn more about page titles","\npage titled - understanding success criterion 2.4.2 for wcag 2.0 (level a)\n"]}},"http://www.w3.org/WAI/eval/preliminary.php#images":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Image text alternatives (\"alt text\")","flavors":{"1,example":["image text alternatives (\"alt text\")"],"0.5,example":["text alternatives (\"alt text\") convey the purpose of an image, including pictures, illustrations, charts, etc. text alternatives are used by people who do not see the image. (for example, people who are blind and use screen readers can hear the alt text read out; and people who have turned off images to speed download or save bandwidth can see the alt text.)","the text should be functional and provide an equivalent user experience, not necessarily describe the image. (for example, appropriate text alternative for a search button would be \"search\", not \"magnifying glass\".)","you don't usually see the alt text on a web page, it is in the web page markup (like this:\n<img src999=\"pointer_to_image.png\" alt=\"here's where the alternative text goes\">).\nevery image should include alt in the markup.","\nif an image conveys information useful for interacting with or understanding the web page content, then it needs alternative text.\nif an image is just decorative and people don't need to know about the image, then it should have null alt (alt=\"\").\n","automated tests can tell you if alt is missing. to determine if the alternative text is appropriate, you need to see the image and judge it in context.","what to check for:","\nevery image has alt with appropriate alternative text.\n","tips","appropriate alternative text is not an exact science. some people prefer most images to have more detailed description; and others prefer much less description.","appropriate alt text:","\nthe text needs to convey the same meaning as the image. that is, if someone cannot see the image, they get the important information from the image in the alternative text.\nalternative text depends on context. for example, for an image of a dog on a kennel club website, the alt text might include the breed of the dog; however, the same image on a dog park website may be there just to make the page more attractive, and the image might not need any alt text (and should have null alt). one way to help think about appropriate alt text is: if you were helping someone read and interact with the web page and they cannot see it, what would you say about the image?\nimages that are functional — for example, images that initiate actions (like submit buttons) and linked images (like in navigation) — need alt text that is the functional equivalent.\nif there is text in the image — for example, in a logo — that text needs to be included in the alt text.\nif the image has complex information — such as charts or graphs — the image should have a short alt text to identify the image, and then the detailed description of the information should be provided elsewhere (for example, in a data table).\n","what is not needed in the alt text:","\nif the image is not important for understanding the content — for example, it is just decoration or \"eye candy\" — it should have null alt (alt=\"\"). one way to help determine if an image should have null alt is to ask yourself: if the image was removed, would the user still get all the information from the page?\nthe alternative text does not need to include the words \"button\", \"link\", or \"image of\". (screen readers automatically provide that information.)\nif the image is sufficiently described in the text — for example, a simple diagram illustrating what's written in the web page text — it can have brief alt text such as \"diagram of work flow as describe above.\"\n","alt attribute in html (not \"alt tag\")","\nin html (which is web page code, called markup), alt is an attribute of the image element, and other elements. (so \"alt tag\" is technically incorrect; the correct terminology is \"alt attribute\", or you can say \"alt text\".) it looks like this in markup: <img alt=\"wai logo\" src999=\"/wai/logo.png\">\n","alt text checks","there are three options to check alt text listed below. the first one is the easiest, if you have the ie wat toolbar. if you don't have any toolbars, there is a check at the end for any browser.","to check alt text with ie wat","\nopen the web page you are checking.\nin the toolbar, select \"images\", then \"show images\". or, with the keyboard: ctrl/cmd+alt+4, then arrow down to \"show images\"\nfigure: ie wat toolbar with 'images' drop down and 'show images' highlighted.\nif there are any images missing alt, a dialog box appears with the number of images without alt attributes.\nthe alt text will be displayed before the images in quotes on a light background.\nto check for missing alt: look for the text \"noalt!\" (visually, or with find-in-page). if you find it, that means the following image is missing alt.\nto check if alt text is appropriate:\nfor each image, see if the alt text adequately conveys the information in the image it is next to, per the tips above. ","to check alt text with webdev toolbar","\nopen the web page you are checking.\nin the toolbar, select \"images\", then \"outline images\", then \"outline images without alt attributes\". or, with the keyboard: alt+t, w (to web developer extension), i, o, a\nred boxes appear around any images missing alt.\nfigure: webdev toolbar menu, and red boxes around images.\nnote images without any alt text.\nin the toolbar, select \"images\", then \"display alt attributes\". or, with the keyboard: alt+t, w (to web developer extension), i, a\nthe alt text will be displayed before the images as white letters on a red background.\nfigure: webdev toolbar menu, and alt text displayed.\nfor each image, see if the alt text adequately conveys the information in the image it is next to, per the tips above.\n","to check alt text with any browser","\nopen wave web accessibility evaluation tool web page.\ntype the website address in the box after \"enter the url of the web site you want to evaluate:\"\nclick the \"wave this page!\" button.\nyour web page will show up in the browser with lots of little icons on it.\nto check for missing alt: look for the red alt icon (), or search for the alt text \"error: missing alt text\". if you find it, that means the following image is missing alt.\nto check if alt text is appropriate: look for the green alt icon (). next to it is text on a light blue background; the alt text is in between the asterisks (*). see if that text adequately conveys the information in the image it is next to, per the tips above.\nfigure: wave showing alt text.\n","to practice checking alt text in bad","\nwith one of the checks above, use the inaccessible home page www.w3.org/wai/demos/bad/before/home notice: missing alt:\nthere are lots of images without alt text. (many of these are just decorative and should have null alt text, per the tips above.)\nthe weather image of the cloud and sun is missing alt.\ninappropriate alt text:\nnear the top, left, see the long alt text starting with \"red dot with...\". that description is way too detailed and includes unimportant information. the appropriate alt text in the accessible page is: \"citylights: your access to the city.\"\nnear the bottom in the middle, see the image of text: \"(1)269c-h-o-k-e\". the alt is 123456789, which is not equivalent.\nappropriate alt text:\nnear the top, see the w3c image; the alt text is: \"w3c logo\".\n","learn more about alt text","\ntext alternatives for non-text content is an easy introduction with links to more details\nnon-text content - understanding success criterion 1.1.1 for wcag 2.0 (level a)\nan alt text decision tree\n"]}},"http://www.w3.org/WAI/eval/preliminary.php#headings":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Headings","flavors":{"1,example":["headings"],"0.5,example":["web pages often have sections of information separated by visual headings, for example, heading text is bigger and bold (like \"headings\" right above this sentence :-). to make these work for everyone, the headings need to be marked up. that way people can navigate to the headings — including people who cannot use a mouse and use only the keyboard, and people who use a screen reader.","heading levels should have a meaningful hierarchy, e.g.: ","\nheading level 1 <h1>\nheading level 2 <h2>\nheading level 3 <h3>\nheading level 3 <h3>\nheading level 2 <h2>\nheading level 3 <h3>\nheading level 4 <h4>\nheading level 4 <h4>\nheading level 2 <h2> ","what to check for:","\nthe page has a heading. in almost all pages there should be at least one heading.\nall text that looks like a heading is marked up as a heading.\nall text that is marked up as a heading is really a conceptual section heading.\nthe heading hierarchy is meaningful. ideally the page starts with an \"h1\" — which is usually similar to the page title — and does not skip levels; however, these are not absolute requirements.\n","headings checks","the checks below provide instructions with different browsers for how to get an outline from headings or headings markup in a page.","headings outline: an outline of the headings that are marked up on page, for example:","\nfigure: outline of headings.\n","headings markup in page: a view of the page with the heading markup shown, for example:","\nfigure: heading markup in page.\n","to check headings with webdev toolbar","\nheadings outline:\nopen the web page you are checking.\nin the toolbar, select \"information\", then \"view document outline\".or, with the keyboard: alt+t, w (to web developer extension), i, m\na new page opens with the outline. non-visual checks:\nare headings listed. if there are no headings marked up, it will say \"0 headings\".\ndoes the outline start with [h1] and follow a meaningful hierarchy? (that's not required, but strongly suggested.)\nvisual checks: compare the document outline to the visual rendering of the page.\nare the things that look like headings on the page listed in the document outline?\nare there things in the document outline that aren't really headings? heading markup in the page: open the web page you are checking.\nin the toolbar, select \"outline\", then \"show element tags names when outlining\". or, with the keyboard: alt+t, w (to web developer extension), o, s\nin the toolbar, select \"outline\", then \"outline headings\". or, with the keyboard: alt+t, w (to web developer extension), o, h\nthe headings will be outlined and <h1>, <h2>, etc. icons will be before the headings. anything that is a functional heading should have a heading icon before it.\nanything that is a not functional heading should not have a heading icon before it.\n","to check headings with ie wat","\nheadings outline:\nopen the web page you are checking.\nin the toolbar, select \"structure\", then \"heading structure\". or, with the keyboard: ctrl/cmd+alt+6, then down arrow to \"heading structure\".\na new page opens with the outline. non-visual checks:\nare headings listed? if there are no headings marked up, it will say \"0 headings\".\ndoes the outline start with [h1] and follow a meaningful hierarchy? (that's not required, but strongly suggested.)\nvisual checks: compare the document outline to the visual rendering of the page.\nare the things that look like headings on the page listed in the document outline?\nare there things in the document outline that aren't really headings? heading markup in the page:\nopen the web page you are checking.\nin the toolbar, select \"structure\", then \"headings\". or, with the keyboard: ctrl/cmd+alt+6, then down arrow to \"headings\".\nheadings will be surrounded with <h1>, <h2>, etc. icons in purple text on a light background.\nanything that is a functional heading should have a heading icon before it.\nanything that is a not functional heading should not have a heading icon before it.\n","to check headings in any browser","\nheadings outline:\nin any browser, open the w3c html validator (the w3c markup validation service).\nin the address field, type the uri (e.g., www.w3.org).\nclick the more options link.\nselect the outline checkbox.\nclick the check button.\nthe results page appears (with title starting either [valid] or [invalid]). in the results page, near the top, at the end of the \"jump to:\" line, click the outline text link.\nnon-visual checks:\nis there anything there? if there is no text between \"below is an outline for this document, automatically generated from the heading tags (<h1> through <h6>.)\" and \"if this does not look like a real outline...\" it means there are no headings marked up on the page.\ndoes the outline start with [h1] and follow a meaningful hierarchy? (that's not required, but strongly suggested.)\nvisual checks: compare the document outline to the visual rendering of the page.\nare the things that look like headings on the page listed in the document outline?\nare there things in the document outline that aren't really headings? heading markup in the page:\nopen wave web accessibility evaluation tool.\ntype the website address in the box after \"enter the url of the web site you want to evaluate:\"\nclick the \"wave this page!\" button.\nyour web page will show up in the browser with lots of little icons on it. anything that is a functional heading should have a heading icon (, , , etc.) before it.\nanything that is a not functional heading should not have a heading icon before it.\n","to practice checking headings in bad:","\nheadings outline:\nfollow one of the instructions under \"headings outline\" above and use the accessible news page: www.w3.org/wai/demos/bad/after/news. notice there is a nice hierarchical outline.\nnext, use the inaccessible news page: www.w3.org/wai/demos/bad/before/news. (in html validator, the \"check\" button might now say \"revalidate\".) notice there is just one heading.\nheading markup in the page:\nstart by visually looking at the inaccessible bad news page: www.w3.org/wai/demos/bad/before/news. what looks like headings? (citylights news, heat wave linked to temperatures, man gets nine months in violin case, ...)\nnext, see how it should look. follow one of the instructions for \"heading markup in the page\" above on the accessible news page: www.w3.org/wai/demos/bad/after/home. notice the headings have icons next to them.\nnext, see what it looks like when headings are not marked up. use the inaccessible news page: www.w3.org/wai/demos/bad/before/home. notice there is text that visually looks like headings, but does not have headings icons next to it. (with wave, there are yellow icons with \"h?\" because it thinks these might be headings.)\n","learn more about headings","\ninfo and relationships - understanding success criterion 1.3.1 for wcag 2.0 (level a)\nheadings and labels - understanding success criterion 2.4.6 for wcag 2.0 (level aa)\nsection headings - understanding success criterion 2.4.10 for wcag 2.0 (level aaa)\n"]}},"http://www.w3.org/WAI/eval/preliminary.php#contrast":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒  Contrast ratio (\"color contrast\")","flavors":{"1,example":[" contrast ratio (\"color contrast\")"],"0.5,example":["some people cannot read text if there is not sufficient contrast between the text and background, for example, light gray text on a light background."," figure: gray text on light background. ","high contrast (for example, dark text on light background or bright text on dark background) is required by some people with visual impairments, including many older people who lose contrast sensitivity from ageing.","\nfigure: dark text on light background, and yellow text on black background.\n","while some people need high contrast, for others — including some people with reading disabilities such as dyslexia — bright colors (high luminance) are not readable. they need low luminance."," figure: brown text on dark background, and dark text on medium brown background.\n","web browsers should allow people to change the color of text and background, and web pages need to work when people change colors.","(this accessibility requirement is sometimes called sufficient \"color contrast\"; however, that is incorrect — technically it's \"luminance contrast\". on this page we use \"contrast ratio\" as short for \"luminance contrast ratio\" because it's less jargony.) there is much more to know about contrast; we've just introduced the basics here.","what to check for:","web pages should also have a minimum contrast by default: a contrast ratio of at least 4.5:1 for normal-size text.","there are basically three ways to check contrast, each with strengths and weaknesses. ","\ntable with contrast ratio - the tool displays a table with all the possible contrast ratios in the web page. with some tools, you can click in the table and it will show where that color combination is in the web page.\npro: comprehensive.\ncon: can be inaccurate, specifically, it can show some color combinations that are not really in the displayed page.\neye-dropper to select colors - the tool lets you select a text color and a background color, then it shows you the contrast ratio.\npro: accurate.\ncon: can only test one item at a time. need to be able to see and use a mouse.\nturn off color. the tool shows the page in grayscale.\npro: gives you direct experience.\ncon: imprecise, does not provide contrast ratio value.\n","contrast checks","below are instructions for checking contrast with ie wat; a list of other contrast analyzer tools is in the related resources section of understanding success criterion 1.4.3.","to check contrast with ie wat","\nhere's how to do the three checks for sufficient contrast described above.\ntable with contrast ratio:\nin the toolbar, select color > juicy studio luminosity analyser.\nor, with the\nkeyboard: ctrl/cmd+alt+5, then down arrow to \"juicy studio luminosity analyser\".\na new window opens titled colour contrast analyser with the table of results. the last column is luminosity contrast ratio.\neye-dropper to select colors:\nin the toolbar, select: color > contrast analyser [application]. or, with the\nkeyboard: ctrl+alt+5, then down arrow to \"contrast analyser [application]\".\nthe color contrast analyser application window opens.\nusing the first eye-dropper icon from the foreground color section, pick the foreground color (usually the text) you want to analyze.\nusing the second eye-dropper icon from the background color section, pick the corresponding background color.\nin the bottom of the color contrast analyser window, the resulting luminosity contrast ratio will show (for example: 7.5:1), along with \"pass\" or \"fail\" and a visual example of the colors.\nturn off color:\nin the toolbar, select color > grey scale. or, with the\nkeyboard: ctrl+alt+5, then down arrow to \"gray scale\".\ncheck if any information is lost or hard to see when all colors are converted to grayscale.\n","checking contrast with other browsers","\nthere is not an easy way to check contrast with the webdev toolbar. there is a juicy studio accessibility toolbar add-on that provides the same information as ie wat above and works with firefox.\n","to practice checking contrast with bad","\nopen the inaccessible tickets page: www.w3.org/wai/demos/bad/before/tickets\nuse one of the checks above. notice:\nthe text in some rows is dark gray on light gray with a contrast ratio of 3.76:1.\n","learn more about contrast ratio","\ncontrast (minimum) - understanding success criterion 1.4.3 for wcag 2.0 (level aa)\ncontrast (enhanced) - understanding success criterion 1.4.6 for wcag 2.0 (level aaa)\n"]}},"http://www.w3.org/WAI/eval/preliminary.php#resize":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Resize text","flavors":{"1,example":["resize text"],"0.5,example":["some people need to enlarge web content in order to read it. some need to change other aspects of text display: font, space between lines, and more.","most browsers allow users to change text size through:","\ntext size settings (usually through options or preferences)\ntext-only zoom\npage zoom (which also zooms images, buttons, etc.)\n","when pages are not designed properly, they can be unusable when the text size is changed, especially when it is changed through text-only zoom or text settings. sometimes columns and sections overlap, the space between lines disappears, lines of text become too long, or text disappears.","\nfigure: two screen captures show that when text size is increased, the heading overlaps the main text, the main text overlaps the sidebar text; and the sidebar text is cut off at the bottom.\n","when text size is increased, sometimes part of the sentences are not visible and users have to scroll horizontally to read a sentence, as shown in the third example below. most people cannot effectively read text that requires horizontal scrolling, and some disabilities make this impossible."," figure: the first image shows normal-size text. in the second image, the larger text \"wraps\" to fit the width. in the third image, some of the larger text is not visible without scrolling horizontally.\n","what to do:","\nincrease the text size.\n","what to check for:","\nall text gets larger. (a common problem is that text is not provided as actual text format but instead the text is in an image. text in images does not get larger when users increase text size.)\ntext doesn't disappear or get cut off.\ntext, images, and other content do not overlap.\nall buttons, form fields, and other controls are visible and usable.\nhorizontal scrolling is not required to read sentences or \"blocks of text\". it is best practice that when text size is increased, all the text in a sentence is visible. it is acceptable to have to scroll horizontally to get to different sections of a page. (for top-to-bottom languages, change \"horizontal scrolling\" to \"vertical scrolling\".)\n","resize text checks","the instructions below are for text-only zoom. you can also change the text size settings, for example, through tools > options or preferences. to keep this simple, we don't include instructions for changing those settings. we also don't include instructions for page zoom because it does not usually reveal the accessibility barriers described above.","to check text-only zoom in firefox, safari, and some other browsers","\nfrom the menubar,\ndo one of the following (depending on your browser) select view > zoom > zoom text only. or, with the keyboard in firefox: alt+v, z, t\nselect view > zoom text only. or, with the keyboard in safari: control+f2, v, return, zz\nincrementally increase text-only zoom:\nin windows, press ctrl+[+] (the control key and the + key at the same time) 4 times\non mac, press command+[+] (the command key and the + key at the same time) 4 times\n(to confirm that you have text-only zoom set per step 1, make sure that only the text is getting larger, not the images.) ","to check text resize in ie","\nfrom the menubar, select view > text size > largest. or, with the keyboard: alt+v, x, g.\nif you don't have a menubar, one of these may work to display it, depending on your version:\nin the search box, type internet explorer, then in the list of results, click internet explorer.\nto display the menus temporarily: press the alt key.\nto display the menus permanently: click the tools button, point to toolbars, and then click menu bar.\nin the blank space at the top of the browser where menu bars usually are, right-click with the mouse.\na pop-up menu appears.\nselect menu bar.\n","learn more about resize text","\nresize text - understanding success criterion 1.4.4 for wcag 2.0 (level aa)\nimages of text - understanding success criterion 1.4.5 for wcag 2.0 (level aa)\n"]}},"http://www.w3.org/WAI/eval/preliminary.php#interaction":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Keyboard access and visual focus","flavors":{"1,example":["keyboard access and visual focus"],"0.5,example":["many people cannot use a mouse and rely on the keyboard to interact with the web. people who are blind and some sighted people with mobility impairments rely on the keyboard or on assistive technologies and strategies that rely on keyboard commands, such as voice input. accessible websites enable people to access all content and functionality — links, forms, media controls, etc. — through a keyboard.","keyboard focus should be visible and should follow a logical order through the page elements. visible keyboard focus could be a border or highlight, as shown below, that moves as you tab through the web page.","\nfigure: dotted border on middle link.\nfigure: name field is highlighted red.\n","what to do:","in a browser that supports keyboard navigation with the tab key (for example, firefox, ie, chrome, and safari; not opera): ","\nin mac browsers, enable keyboard navigation to all controls.\nin newer browsers: select system preferences > keyboard > shortcuts. select the \"all controls\" option button.\nin older browsers: select system preferences > keyboard > keyboard shortcuts. in the \"full keyboard access\" section, check \"all controls\".\nclick in the address bar, then put your mouse aside and do not use it.\npress the 'tab' key to move through the elements on the page. you can press 'shift-tab' to go backwards.\nto move within elements such as drop-down lists and menu bars, press the arrow keys.\nto select a specific item within a drop-down list:\ntab to the list box,\nuse the arrow keys to move the focus to items,\nwhen an item has focus, press the enter key or space bar to select that item.\n","what to check for:","\ntab to all: check that you can tab to all the elements, including links, form fields, buttons, and media player controls. (a common problem is that you cannot tab to media player controls.)\ntab away: check that you can tab away from all elements that you can tab into. (a common problem is the keyboard focus gets caught in media controls and you cannot get out; it's called the \"keyboard trap\".)\ntab order: check that the tab order follows the logical reading order (e.g., for left-to-right languages: top to bottom, left to right) in sequence.\nvisual focus: check that the focus is clearly visible as you tab through the elements, that is, you can tell which element has focus, e.g., links have a gray outline around them or are highlighted.\nall functionality by keyboard: check that you can do everything with the keyboard; that is, you don't need the mouse to activate actions, options, visible changes, and other functionality. (a common problem is that some functionality is available only with mouse hover, and is not available with keyboard focus.)\ndrop-down lists: check that after you tab into a drop-down list, you can use the arrow keys to move through all the options without triggering an action. (a common problem for drop-downs used for navigation is that as soon as you arrow down, it automatically selects the first item in the list and goes to a new page — you cannot get to other items in the list.)\nimage links: check that when images are links, they have clear visual focus and can be activated using the keyboard (usually by pressing the enter key).\n","to see visual focus with bad","\nopen the accessible survey page: www.w3.org/wai/demos/bad/after/survey\ntab through the page. notice:\nmost things get a red background when they get focus.\nthe other survey pages get a dotted border and arrows.\nthe radio buttons get a dotted border.\n","learn more about keyboard access","\nfunctionality is available from a keyboard section in accessibility principles\nbrowsing the web by keyboard section in better web browsing: tips for customizing your computer\nguideline 2.1: make all functionality available from a keyboard.\nkeyboard - understanding success criterion 2.1.1 for wcag 2.0 (level a)\nno keyboard trap - understanding success criterion 2.1.2 for wcag 2.0 (level a)\nfocus order - understanding success criterion 2.4.3 for wcag 2.0 (level a) focus visible - understanding success criterion 2.4.7 for wcag 2.0 (level aa)\n"]}},"http://www.w3.org/WAI/eval/preliminary.php#forms":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Forms, labels, and errors","flavors":{"1,example":["forms, labels, and errors"],"0.5,example":["note: this section is more complex than the others. if it's too complicated, consider skipping it for now and proceeding through the remaining checks.","labels, keyboard access, clear instructions, and effective error handling are important for forms accessibility.","form fields and other form controls usually have visible labels, such as \"e-mail address:\" as the label for a text field.\nwhen these labels are marked up correctly, people can interact with them using only the keyboard, using voice input, and using screen readers. also, the label itself becomes clickable, increasing the target area and making it easier to select small radio buttons or checkboxes.","what to do:","find any forms on the page. a form could be a single text box, such as search, or could be a complex form with text fields, radio buttons, checkboxes, drop-down lists, and buttons.","what to check for:","keyboard access","\ncheck that all form controls are keyboard accessible by following the keyboard access checks above, including checking that you can get to all items in any drop-down lists.\n","labels","\ncheck that every form control has a label associated with it using 'label', 'for', and 'id', as shown in the labels checks below. (this is best practice in most cases, though not a requirement because a form control label can be associated in other ways.)\ncheck that the labels are positioned correctly. for left-to-right languages, labels should usually be:\nleft of text boxes and drop-down lists.\nright of radio buttons and checkboxes. ","required fields and other instructions","\ncheck that any fields that are required/mandatory are clearly indicated.\ncheck that the indicator does not rely on color alone, for example, if required fields were only indicated by red colored labels, they would not be accessible to people who do not see the different colors.\ncheck that the indicator (such as asterisks (*)) is included in the marked up field label for text boxes and drop-down lists, or legend for radio buttons and checkboxes, as shown in the labels checks below.\ncheck that any instructions for completing the form are before they are needed, for example,\ngeneral instructions should usually be at the top of the form or the section they relate to.\ncheck that required formats, such as dates (year-month-date in the format 0000-00-00), are included in the marked up label, using the labels checks below.\n","error handling","some simple forms, such as a single search field, might not have any errors. if you think the form(s) on the page you are checking might have error messages, try leaving required fields blank or entering incorrectly-formatted information (such as telephone number or e-mail address), then submitting the form. if you get errors:","\ncheck that clear and specific guidance is provided to help people understand and fix the error. if the error concerns a format such as date, time, or address, check that the correct format is clearly explained.\ncheck that the errors are easily findable. generally it is best if the error messages are before the form, rather than after the form.\ncheck that the fields without errors are still populated with the data you entered. (this is best practice, though not a requirement.) people should not have to re-enter all the information in the form, except for some sensitive data such as credit card numbers.\n","labels checks","note: these instructions help you check if labels are marked up with 'label', 'for', and 'id'; they do not check if form controls are identified in other ways. therefore, even if a form does not pass these checks, it might still meet wcag 2.0.","to check labels with ie wat","\nopen the web page you are checking.\nin the toolbar, select \"structure\", then \"fieldset / labels\".\nor, with the keyboard: ctrl+alt+6, then down arrow key to \"fieldset / labels\", and select.\na dialog box appears with the number of errors and controls. figure: ie wat dialog box.\nthe dialog box tells you the number of identified errors, the total number of form controls, and the number of controls that you need to check manually. for the rest of the steps you need to look at the text around the labels. if this is difficult, you could skip the next steps.\nthe form elements (labels and controls) are outlined in a red box, the markup is shown, and potential errors are indicated.\nexample with no errors:\nfigure: form markup shown. date label includes format.\nexample with potential errors:\nfigure: form markup shown. date label does not include format. fieldset missing legend.\ncheck that every field label has label for=\"x\" before it and id=\"x\" in the box with it, and that the text in quotes matches. (\"x\" can be anything; for example, for=\"park\", id=\"park\")\nif the label is missing, it will indicate \"label no for\".\nif the for and id do not match, it will indicate \"input no match id=\"x\" error\".\ncheck that the required field indicator is in the field label, or for radio button and check boxes, it is in the \"legend\". for example:\ncorrect: the asterisk (*) is included in the box around the label.\nincorrect: the asterisk (*) is outside of the box around the label.\ncorrect: \"(required)\" is in the legend.\nincorrect: \"(required)\" is not in the legend.\n","checking labels with other browsers\n","\nthere is not an easy way to check form control labels with the webdev toolbar. there is a form labels favelet that provides the same information as ie wat above and works with firefox. it requires installation.\n","to check labels if you're comfortable looking at the html markup","\nopen the source html and find the form markup.\ncheck that:\neach form control has a label element with a for attribute that matches the value of the id attribute in the related control. for example:\n<label for=\"firstname\">first name: </label>\n<input type=\"text\" name=\"firstname\" id=\"firstname\" />\neach id is unique within the web page.\n","to practice checking form labels and errors with bad","\nlabels:\nopen the accessible survey page: www.w3.org/wai/demos/bad/after/survey that has several forms. do the label checks above.\nnotice the 'label's, 'for's, and 'id's.\nopen the inaccessible survey page: www.w3.org/wai/demos/bad/before/survey and do the label checks above.\nin ie wat, you get the dialog box saying there are errors and the errors are marked in the page with \"<input error>\".\nerrors:\nopen the accessible survey page: www.w3.org/wai/demos/bad/after/survey. leave the fields blank and submit the form.\nnotice the error messages at the top and the asterisks to indicate required fields. also, the page title includes \"submission failed\".\nopen the inaccessible survey page: www.w3.org/wai/demos/bad/before/survey. leave the fields blank and submit the form.\nnotice errors are only indicated by the label being red, and there is no explanation of the errors.\n","learn more about forms","\nlabels or instructions - understanding success criterion 3.3.2 for wcag 2.0 (level a)\ninfo and relationships - understanding success criterion 1.3.1 for wcag 2.0 (level a)\nerror identification - understanding success criterion 3.3.1 for wcag 2.0 (level a)\nerror suggestion - understanding success criterion 3.3.3 for wcag 2.0 (level aa)\nerror prevention (legal, financial, data) - understanding success criterion 3.3.4 for wcag 2.0 (level aa) "]}},"http://www.w3.org/WAI/eval/preliminary.php#moving":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Moving, Flashing, or Blinking Content","flavors":{"1,example":["moving, flashing, or blinking content"],"0.5,example":["moving, flashing, or blinking content includes carousels (example carousel), ads, videos, auto-updating stock tickers, scrolling news feeds, and more. users need to be able to control moving content, especially some people with attention deficit disorder or visual processing disorders.","potential accessibility problems with moving, flashing, or blinking content include:","\nunderstanding moving information — some people read and process information slowly. the content may disappear before people have time to read it. some people have difficulty tracking moving objects.\ndistraction from moving content — moving content can make focusing and reading elsewhere difficult; that is, people cannot focus on some content because the movement in another area of the web page grabs their attention.\n","additionally, flashing or blinking content can cause seizures in people with photosensitive epilepsy, particularly if it:","\nflashes more than three times in one second,\ncovers a large enough area of the screen, and\nis bright enough.\n","what to check for:","\ncheck if there is any moving, blinking, or scrolling information that starts automatically and lasts more than five seconds. if there is, check that there is a way for the user to pause, stop, or hide the movement.\ncheck if there is any auto-updated information (such as stock price). if there is, check that there is a way for the user to pause, stop, or hide the updated information, or for the user to control the frequency of the update.\ncheck that no content flashes or blinks more than three times in one second. if it does, further evaluation is needed as explained in three flashes or below threshold.\n","to learn more about moving, flashing, or blinking content","\npause, stop, hide – understanding success criterion 2.2.2 for wcag 2.0 (level a)\ncarousel animations – wai web accessibility tutorial\nthree flashes or below threshold understanding success criterion 2.3.1 for wcag 2.0 (level a)\n"]}},"http://www.w3.org/WAI/eval/preliminary.php#media":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Multimedia (video, audio) alternatives","flavors":{"1,example":["multimedia (video, audio) alternatives"],"0.5,example":["information in podcasts or other audio is not available to people who are deaf or some people who are hard of hearing, unless it is provided in an alternative format such as captions and text transcripts. visual information in videos is not available to people who are blind or some people what have low vision, unless it is provided in an alternative format such as audio or text. (text can be read by a screen reader or braille display, or enlarged and reformatted for people with low vision.)"," (remember these easy checks are not comprehensive or definitive.)","what to check for:","keyboard access","follow the steps above for keyboard access to ensure that the media player controls are labeled and keyboard accessible.","auto-start control","it is best if audio (including background noise and video with sound) does not start automatically when a web page opens. if it does start automatically, it should either:","\nstop after 3 seconds.\ninclude controls to pause or stop the audio.\ninclude controls to turn down the volume.\n","captions","(captions are known as \"subtitles\" in some areas.)","most video on the web that provides captions has \"closed captions\" that can be turned on and off. (\"open captions\" are always shown.) for example, in youtube, you turn on captions with the cc button (no known keyboard access). if there is not a cc button, there are no captions available for that video.","automatic captions are not sufficient for accessibility because they are not accurate enough. for example, in youtube, if only \"automatic captions\" are listed, there are no sufficient captions and the video is not accessible. captions in the specific language need to be listed.","\nfigure: captions listed: french (automatic captions), norwegian.\n","if there are captions, you can check that:","\nthe captions seem in sync with the spoken content.\nthe people who are speaking are identified when they speak.\nimportant sound other than dialogue — e.g., footsteps approaching, doors closing, glass breaking — is included.\n","transcript","it is best practice to provide both captions and transcripts, although not always required; providing transcripts has many benefits — both to people with disabilities and to website owners.","transcripts should be easy to find near the audio/video itself and any links to the audio/video.","check that transcripts include all audio information, including dialogue with the speakers identified, and all important sound — e.g., footsteps approaching, doors closing, glass breaking.","a transcript for a video could provide all the audio and all the visual information, so that a person can get all the content of the video by reading the text.","audio description","audio description (sometimes known as described video, video description, or visual interpretation) is description of important visual information in a video, in order to make it accessible to people who cannot see. for example, some videos start out with a title in text, have speaker names in text, and have illustrations. that visual information needs to be provided to people who cannot see the video. it can be provided through:","\naudio description - where the audio track includes someone describing the important visuals. audio description can be included in the main video, or it can be provided in a separate video.\ntext transcript - that includes description of meaningful visual information (so it's kind of like a screenplay).\n","learn more about multimedia alternatives","\nw3c multimedia accessibility faq\ncaptions - understanding success criterion 1.2.2 for wcag 2.0 (level a)\naudio description or media alternative - understanding success criterion 1.2.3 for wcag 2.0 (level a)\naudio control - understanding success criterion 1.4.2 for wcag 2.0 (level a)\nmedia alternative - understanding success criterion 1.2.8 for wcag 2.0 (level aaa)\n"]}},"http://www.w3.org/WAI/eval/preliminary.php#structure":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Basic structure check","flavors":{"1,example":["basic structure check"],"0.5,example":["while the other checks on this page focus on specific success criteria in wcag 2.0, this check is more broad. it helps you understand how some people \"see\" the web page differently. for this basic structure check, you look at the web page without images, styles, and layout.","web pages are often designed with multiple columns, sections, colors, and other visual aspects that help organize information for people who see the page in its default display. however, some people do not see the page this way. people who are blind listen to the page with a screen reader or read it from a braille display. some people with low vision and others change the way the page is displayed so they can read it; for example, change from multiple columns to one column, change the text size, and more.","an important issue is how the web page works when it is \"linearized\" into one column and the presentation is changed, as shown in the images below.","images showing linearized and changed display (click to show images)","\nthe images below illustrate how a web page is displayed in 3 columns by default and how it can be changed.\nfigure a shows the default display of three columns, with the navigation at the left.\nfigure a.\nfigure b shows the page linearized into one column, with the navigation at the top. figure c shows the page linearized, with the navigation at the bottom. the order of the sections (e.g., navigation at top or bottom or elsewhere) depends on how the web page is developed — the user usually cannot control the order.\nfigure b.\nfigure c.\nfigure d shows the page linearized and with styles turned off. when you follow the basic structure checks steps below, your page will look like something like this:\nfigure d.\nfigure e shows the page changed by a person with low vision to make it more readable, for example, the main text is big, the footer text is very small, and the headings are a different color.\nfigure e.\n","while it is useful to have an experienced screen reader user check web pages, anyone can get an initial idea of potential accessibility barriers for screen reader users and others who change the way the page is presented. the steps below show you how to disable images, disable styles for how the page is usually displayed, and linearize the page to check the page structure.","notes:","\ndata tables will not make sense when linearized — that's ok because screen readers have functionality to make data tables usable (when they are marked up correctly).\nbad provides a clear example of how the basic structure check reveals accessibility barriers. (it's also a bit funny, and we suggest you check it out, by following the bad instructions below.)\n","what to do:","get a basic structure view of the page by following the instructions under basic structure checks below to: ","\nturn off images and show the text alternatives.\nturn off style sheets (css), which specifies how the page is displayed with layout, colors, etc.\nlinearize the page or the tables (depending on the toolbar).\n","what to check for:","\ncheck that the information makes sense when read in the order it is shown; for example, headings are right above the information they apply to.\n(data tables do not need to make sense linearized, per the note above.)\ncheck that the alternative text provides adequate information for the missing images (per the image text alternatives section above).\ncheck that blocks of information have clear headings (see also the headings section above). when navigation, main content, and other sections have good headings, it's easier for people to find their way around the information.\n","basic structure checks","to check basic structure with ie wat","\nopen the web page you are checking.\nin the toolbar, select \"images\", then \"remove images\".\nor, with the keyboard: ctrl+alt+4, then arrow down to \"remove images\".\nin the toolbar, select \"css\", then \"disable css\".\nor, with the keyboard: ctrl+alt+3, then arrow down to \"disable css\".\nin the toolbar, select \"tables\", then \"linearize\".\nor, with the keyboard: ctrl+alt+7, then arrow down to \"linearize\".\n","to check basic structure with webdev toolbar","\nopen the web page you are checking.\nin the toolbar, select \"images\", then \"disable images\", then \"disable all images\".\nor, with the keyboard: alt+t, w (to web developer extension), i, d, d.\nin the toolbar, select \"css\", then \"disable styles\", then \"disable all styles\".\nor, with the keyboard: alt+t, w (to web developer extension), s, d, d.\nin the toolbar, select \"miscellaneous\", then \"linearize page\".\nor, with the keyboard: alt+t, w (to web developer extension), m, i.\n","to check basic structure with any browser","\nmost browsers provide the option to turn off images and disable css from the menus. for example:\nin opera:\nview > images > show images\nor, alt+v, i, s\nview > style > user mode\nor, alt+v, s, u\nin safari:\nif the develop menu is not shown in the menu bar, turn it on:\nin safari preferences, click advanced.\nselect the \"show develop menu in menu bar\" checkbox.\ndevelop > disable images\nor, ctrl+f2, d, down arrow to disable images\ndevelop > disable styles\nor, ctrl+f2, d, down arrow to disable styles\n","to practice checking basic structure with bad","\nfirst use the accessible home page www.w3.org/wai/demos/bad/after/home with one of the checks above to turn off images, disable css, and linearize.\nskim down and notice that under \"welcome to citylights\" there are 3 article headlines with summary text under each headline.\nnext use the inaccessible home page www.w3.org/wai/demos/bad/before/home with one of the checks above to turn off images, disable css, and linearize.\nskim down to find \"welcome to citylights\". notice that it's much harder to find. that's because it's not marked up as a heading, per above.\nnotice that the 3 article headings are together and the article text is together. (for fun, read the article text together.)\nto check a form, use the inaccessible survey page www.w3.org/wai/demos/bad/before/survey (this example is easier to see with ie wat.) look at how the radio buttons are laid out. then linearize.\nnotice that that radio button labels are not with the buttons. (this is because the page uses layout tables incorrectly.)\n"]}},"http://www.w3.org/WAI/eval/preliminary.php#next":{"title":"Easy Checks - A First Review of Web Accessibility | Web Accessibility Initiative (WAI) | W3C ⇒ Next steps","flavors":{"1,example":["next steps"],"0.5,example":["now that you have an idea of the accessibility issues on a web page, two things you can do:","\nshare your findings with someone who can fix accessibility barriers.\nencourage thorough accessibility evaluation.\n","share your findings","contacting organizations about inaccessible websites has guidance on reporting accessibility problems. it is focused for people who do not work for the organization that owns the website, yet also has some useful information if you do work for the organization — particularly the introduction, consider your approach, and sources for more information sections.","encourage thorough accessibility evaluation","the checks on this page are not definitive; a web page could seem to pass these checks, yet still have significant accessibility barriers.","this page covers just a few accessibility issues. there are other accessibility issues not covered in these easy checks, for example: links, data table markup, reliance on color, and much more.","more robust assessment is needed to evaluate accessibility comprehensively. guidance is available from:","\nevaluation methodology and report generator —\nwcag-em overview: website accessibility conformance evaluation methodology wcag-em report tool: website accessibility evaluation report generator selecting web accessibility evaluation tools\ninvolving users in evaluating web accessibility\n","back to page contents"]}},"http://www.w3.org/WAI/perspectives/keyboard.html":{"title":"Keyboard Compatibility - Web Accessibility Perspectives Videos","flavors":{"1,video":[" keyboard compatibility"],"0.9,video":["introduction","video on keyboard compatibility","what is \"keyboard compatibility\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: none | overview | next: colors with good contrast ]\nall functionality must be usable with the keyboard. that is, users can access and move between links, buttons, forms, and other controls using the tab key and other keystrokes. websites should not require a mouse; for example, pop-up calendars should also let users type in a date.\npeople with physical disabilities who cannot use the mouse.\npeople who are blind, and cannot see the mouse pointer on the screen.\npeople with chronic conditions, such as repetitive stress injuries (rsi), who should limit or avoid use of a mouse.\ncontent works for people with temporary limitations, such as a broken arm or broken mouse.\nnative html controls, like links, buttons, and form elements, work with the keyboard by default and should be used where possible. custom-made controls, css styles, and scripts that control interaction may need additional coding for keyboard compatibility. ensure that the tab order is logical, to allow keyboard navigation around the content and controls. provide a way for users to jump between blocks of content and controls. keyboard issues occur particularly in forms, menus, and applications with many controls.\naccessibility principle:\nfunctionality is available from a keyboard\ngetting started:\nensure that all interactive elements are keyboard accessible\neasy check:\nkeyboard access and visual focus\nuser story:\nmr. jones, reporter with repetitive stress injury\nms. laitinen, accountant with blindness\nms. kaseem, teenager with deaf-blindness\nweb content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"keyboard\"\nmobile applicability:\nmouse required for interaction and navigation\ntutorial:\nweb accessibility tutorials (several related topics)\nkeyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/perspectives/contrast.html":{"title":"Colors with Good Contrast - Web Accessibility Perspectives Videos","flavors":{"1,video":[" colors with good contrast"],"0.9,video":["introduction","video on colors with good contrast","what is \"colors with good contrast\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: keyboard compatibility | overview | next: clear layout and design ]\ncolors must have sufficient contrast between text color and its background (technically called luminosity contrast ratio). this includes text on images, icons, and buttons. also colors used to convey information on diagrams, maps, and other types of images must be distinguishable.\npeople with low contrast sensitivity, which is common in older people.\npeople with color blindness who cannot distinguish between certain colors.\ncontent works in different lighting conditions, such as sunlight and glare.\ncontent is easier to read by everyone, including those who do not have specific visual conditions.\nselect text and background colors that provide sufficient contrast. there are tools to help check and select appropriate color combinations. this is ideally done during the early design stage and the selection of color palettes. while some people need high contrast, some people are sensitive to brightness and need to change the colors.\naccessibility principle:\ncontent is easier to see and hear\ngetting started:\nprovide sufficient contrast between foreground and background\neasy check:\ncontrast ratio (\"color contrast\")\nuser story:\nmr. lee, online shopper with color blindness\nmr. yunus, retiree with low vision, hand tremor, and mild short-term memory loss\nuser needs:\naccessibility requirements for people with low vision web content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"contrast\"\nmobile applicability:\ninformation conveyed solely with color\nkeyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/perspectives/layout.html":{"title":"Clear Layout and Design - Web Accessibility Perspectives Videos","flavors":{"1,video":[" clear layout and design"],"0.9,video":["introduction","video on clear layout and design","what is \"clear layout and design\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: colors with good contrast | overview | next: text to speech ]\nthe different parts of a web page must be easy to locate and identify. this includes navigation menus, links, and text sections. these should be at predictable locations and consistently identified. also form labels and instructions have to be clearly associated with their controls.\npeople with low vision who are using screen magnification and only see a portion of the screen at a time.\npeople with cognitive and learning disabilities who need clarity and consistency to orient themselves on a website.\ncontent is more usable for people who are new to the particular website or application.\ncontent is more usable for people who are not confident using computers and the web.\ncontent is more usable for mobile device users who are seeing it on smaller screens, especially if they are in a hurry or distracted.\ncontent and functionality is easier to locate and identify by most users.\ndesign clear structure, both visually and through the markup. for example, make it easy to distinguish sections such as navigation, group related controls in a form, and provide headers to identify groups of information. provide consistent presentation and behavior of web pages across a website.\naccessibility principle:\nusers can easily navigate, find content, and determine where they are\ncontent appears and operates in predictable ways\ngetting started:\nprovide clear and consistent navigation options\nensure that interactive elements are easy to identify\nensure that form elements include clearly associated labels\neasy check:\nforms, labels, and errors\nuser story:\nms. olsen, classroom student with attention deficit hyperactivity disorder (adhd) and dyslexia\nmr. yunus, retiree with low vision, hand tremor, and mild short-term memory loss\nmr. sands, supermarket assistant with down syndrome\nweb content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"layout\"\ntutorial:\npage structure - web accessibility tutorials (draft)\nkeyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/perspectives/speech.html":{"title":"Text to Speech - Web Accessibility Perspectives Videos","flavors":{"1,video":[" text to speech"],"0.9,video":["introduction","video on text to speech","what is \"text to speech\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: clear layout and design | overview | next: large links, buttons, and controls ]\nmany computers and mobile devices today have built in text-to-speech software. some people with disabilities, including people who are blind, use specialized software called screen readers. screen readers provide important functionality such as navigating through headings, speaking image alternatives, and identifying internal and external links. they can also highlight the text as it is being read aloud for people to see and hear the content at the same time. content must be coded properly so that all of the functionality of the text-to-speech software works with the content.\npeople who are blind and cannot see what is on the screen.\npeople who have partial sight (often legally blind) and cannot see certain types of content.\npeople with dyslexia and other cognitive and learning disabilities who need to hear and see the text to better understand it.\ncontent can be read aloud for people who cannot read the written language.\ncontent can be read aloud for people who prefer to listen, for example, while multi-tasking.\nuse semantic html markup for structures such as headings, paragraphs, lists, forms, and tables. provide text alternatives for images, icons, and other non-text content. ensure keyboard compatibility, and ensure that text information is understandable without the visual context.\naccessibility principle:\ntext alternatives for non-text content\ncontent can be presented in different ways\ngetting started:\nwrite meaningful text alternatives for images\nuse headings to convey meaning and structure\nidentify page language and language changes\neasy check:\nimage text alternatives (\"alt text\")\nbasic structure check\nuser story:\nms. laitinen, accountant with blindness\nms. kaseem, teenager with deaf-blindness\nms. olsen, classroom student with attention deficit hyperactivity disorder (adhd) and dyslexia\nweb content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"images\" and \"structure\"\nmobile applicability:\nnon-text objects (images, sound, video) with no text alternative\ninformation conveyed only using css (visual formatting)\nnon-descriptive link label\ntutorial:\nweb accessibility tutorials (several related topics)\nkeyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/perspectives/captions.html":{"title":"Video Captions - Web Accessibility Perspectives Videos","flavors":{"1,video":[" video captions"],"0.9,video":["introduction","video on video captions","what is \"video captions\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: large links, buttons, and controls | overview | next: customizable text ]\ncaptions are a text form of audio information in video and animations. this includes the words that are spoken, who is speaking when it is not evident, and important sounds like music, laughter, and noises. captions must be synchronized with the visual content to contextualize them.\npeople who are deaf and cannot hear the audio.\npeople who are hard of hearing and cannot hear some of the content.\npeople with cognitive and learning disabilities who need to see and hear the content to better understand it.\ncontent can be used in loud environments where you cannot hear the audio.\ncontent can be used in silent environments where you cannot turn on sound.\ncontent can be better understood by people hearing and seeing the information, for example people who are less fluent in the language spoken.\ncontent can be read rather than watched, which is easier and quick for some people for some types of videos.\ncontent in text form, such as caption files and transcripts, can be better indexed by search engines.\ncontent can be used without needing to download video files, for example to save data on mobile.\ncaptions must be made available with pre-recorded and live video content. voice recognition software can help create captions for some type of videos. sometimes such voice recognition software is built into the computer or social media platform. automatically-generated captions often need editing. for many languages there are captioning services, often also remote services.\naccessibility principle:\ncaptions and other alternatives for multimedia\ngetting started:\ncreate transcripts and captions for multimedia\neasy check:\nmultimedia (video, audio) alternatives\nuser story:\nms. martinez, online student who is hard of hearing\nweb content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"captions\"\nmobile applicability:\nmultimedia with no captions\nkeyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/perspectives/controls.html":{"title":"Large Links, Buttons, and Controls - Web Accessibility Perspectives Videos","flavors":{"1,video":[" large links, buttons, and controls"],"0.9,video":["introduction","video on large links, buttons, and controls","what is \"large links, buttons, and controls\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: text to speech | overview | next: video captions ]\nthe area for clicking and tapping controls must be large enough for people to activate them. this includes links, buttons, checkboxes, and other controls. small controls, and controls that are placed too close to each other, are difficult for many people to use. this is particularly relevant on mobile devices with small screens.\npeople with physical disabilities who have reduced dexterity.\ncontent is more usable on touch screens, especially on smaller mobile devices.\ncontent is more usable for people who are not experienced with the mouse or touch-pad on the computer they are using.\ncontent is more usable in situations where the device cannot be held steady.\ndesign large controls or activation areas around the controls. (increasing the font size of the control sometimes isn't enough.) provide adequate separation between selectable controls. provide labels for controls, which enlarges the activation area in many browsers because the label for checkboxes and option buttons is also clickable.\naccessibility principle:\nusers can easily navigate, find content, and determine where they are\ngetting started:\ncreate designs for different viewport sizes\nensure that form elements include clearly associated labels\neasy check:\nforms, labels, and errors\nuser story:\nmr. yunus, retiree with low vision, hand tremor, and mild short-term memory loss\nweb content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"labels\"\nkeyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/perspectives/customizable.html":{"title":"Customizable Text - Web Accessibility Perspectives Videos","flavors":{"1,video":[" customizable text"],"0.9,video":["introduction","video on customizable text","what is \"customizable text\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: video captions | overview | next: voice recognition ]\nsome users need to be able to change the way text is displayed so that they can read the text. this includes changing the size, spacing, font, color, and other text properties. when users change these properties, no information or functionality should be lost, and the text should re-flow so users don't have to scroll horizontally to read sentences. text customization is more than the zoom functionality, which only changes the text size.\npeople with low vision who are not using screen magnification software.\npeople with some forms of dyslexia and other cognitive and learning disabilities who need a particular presentation of text to read it.\ncontent is more adaptable to smaller and larger screen sizes.\ncontent is more adaptable to personal preferences and comfort.\ncontent is more adaptable when translated, since words and sentences are different lengths in different languages.\ncontent must be properly designed and coded so that it can adapt to different customization settings. this includes using relative rather than absolute units for the size of fonts, controls, and other objects. applications should use the operating system and web browser text settings. websites and applications could also provide information to help users change their settings. web browsers and other web tools need to provide users with text customization functionality.\naccessibility principle:\ncontent can be presented in different ways\ngetting started:\nwrite code that adapts to the user's technology\neasy check:\nresize text\nuser story:\nmr. yunus, retiree with low vision, hand tremor, and mild short-term memory loss\nms. olsen, classroom student with attention deficit hyperactivity disorder (adhd) and dyslexia\nweb content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"text\"\nuser agent accessibility guidelines (uaag overview):\nprovide text configuration multi-column text reflow\nlinearize content\nuser needs:\naccessibility requirements for people with low vision keyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/perspectives/voice.html":{"title":"Voice Recognition - Web Accessibility Perspectives Videos","flavors":{"1,video":[" voice recognition"],"0.9,video":["introduction","video on voice recognition","what is \"voice recognition\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: customizable text | overview | next: understandable content ]\nvoice recognition can be used for dictating text in a form field, as well as navigating to and activating links, buttons, and other controls. most computers and mobile devices today have built-in voice recognition functionality. some voice recognition tools allow complete control over computer interaction, allowing users to scroll the screen, copy and paste text, activate menus, and perform other functions.\npeople with physical disabilities who cannot use the keyboard or mouse.\npeople with chronic conditions, such as repetitive stress injuries (rsi), who need to limit or avoid using the keyboard or mouse.\npeople with cogntive and learning disabilities who need to use voice rather than to type.\ncontent works for people with temporary limitations, such as a broken arm.\ncontent is more usable for people who prefer to speak rather than type, for example, while multi-tasking.\ncontent must be properly designed and coded so that it can be controlled by voice. keyboard compatibility is the basis for such coding. in addition, labels and identifiers for controls in the source code need to match their visual presentation, so that it is clear which voice command will activate a control.\naccessibility principle:\nfunctionality is available from a keyboard\ncontent appears and operates in predictable ways\ngetting started:\nensure that all interactive elements are keyboard accessible\nprovide meaning for non-standard interactive elements\nprovide alternative text for images\neasy check:\nkeyboard access and visual focus\nforms, labels, and errors\nuser story:\nmr. jones, reporter with repetitive stress injury\nweb content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"keyboard\" and \"controls\"\nmobile applicability:\nmouse required for interaction and navigation\nnon descriptive link label\ntutorial:\nweb accessibility tutorials (several related topics)\nkeyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/tutorials/page-structure/":{"title":"\n  Page Structure Concepts\n\n\n       • Page Structure\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{}},"http://www.w3.org/WAI/perspectives/understandable.html":{"title":"Understandable Content - Web Accessibility Perspectives Videos","flavors":{"1,video":[" understandable content"],"0.9,video":["introduction","video on understandable content","what is \"understandable content\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: voice recognition | overview | next: notifications and feedback ]\ncontent must be easy to follow and understand for many users. for most content, this means simply avoiding overly complex sentences and jargon, and providing clear layout and design. for some complex content such as medical information, separate, easy-to-read information may be necessary.\npeople with learning disabilities who cannot understand complex sentence structures and vocabulary.\npeople with cognitive disabilities who have difficulty focusing on long passages of dense text.\ncontent is more usable for people with lower language skills, such as people who are not fluent in the language of the website and people with low literacy.\ncontent is easier to understand by users who are not familiar with the topic.\ncontent is easier to skim, and get an overview of the information.\navoid overly complex words, jargon, and acronyms, or provide explanations when they need to be used. provide structure using headings, lists, and spacing. provide illustrations that clarify the content, when helpful. provide clear layout and design with consistent orientation and navigation cues.\naccessibility principle:\nunderstandable information and user interface\ngetting started:\nkeep content clear and concise\nprovide clear instructions\nuse headings to convey meaning and structure\neasy check:\nheadings\nuser story:\nms. olsen, classroom student with attention deficit hyperactivity disorder (adhd) and dyslexia\nmr. yunus, retiree with low vision, hand tremor, and mild short-term memory loss\nmr. sands, supermarket assistant with down syndrome\nweb content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"text\"\nmobile applicability:\nlong words, long and complex sentences, jargon\ncontent spawning new windows without warning user\nblinking, moving, scrolling or auto-updating content\nkeyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/perspectives/notifications.html":{"title":"Notifications and Feedback - Web Accessibility Perspectives Videos","flavors":{"1,video":[" notifications and feedback"],"0.9,video":["introduction","video on notifications and feedback","what is \"notifications and feedback\"?","who depends on this feature?","what are the additional benefits?","what needs to happen for this to work?","learn more","perspectives videos","help improve this page"],"0.1,video":["\n-\nweb accessibility is essential for people with disabilities and useful for all. learn about the impact of accessibility and the benefits for everyone in a variety of situations.\nenable audio description\n[ previous: understandable content | overview | next: none ]\nusers need to know what is going on, and get appropriate feedback during interaction. for example, users need confirmation messages when actions are completed, such as when forms are submitted. also, error messages must provide clear directions rather than confuse users.\npeople with some cognitive and learning disabilities, who may be easily confused by unexpected behavior and unclear error messages.\npeople with partial sight and blindness, who rely on notifications, instructions, and errors messages to understand the context and interactions.\ncontent is more usable for people who are new to the particular website or application.\ncontent is more usable for people who are not confident using computers and the web.\ncontent is less confusing and daunting to everyone, regardless of skills.\nuse clear and simple language to make error messages more understandable. for example, describe how to fix an error. when forms are submitted, provide a confirmation message. when a change is made on the screen, such as new content added, alert users to the change.\naccessibility principle:\ncontent appears and operates in predictable ways\nusers are helped to avoid and correct mistakes\ngetting started:\nprovide clear instructions\nhelp users avoid and correct mistakes\neasy check:\nforms, labels, and errors (including search fields)\nuser story:\nms. olsen, classroom student with attention deficit hyperactivity disorder (adhd) and dyslexia\nmr. yunus, retiree with low vision, hand tremor, and mild short-term memory loss\nmr. sands, supermarket assistant with down syndrome\nweb content accessibility guidelines (wcag overview):\nsuccess criteria relating to \"errors\"\ntutorial:\nforms - web accessibility tutorials\nkeyboard compatibility\ncolors with good contrast\nclear layout and design\ntext to speech\nlarge links, buttons, and controls\nvideo captions\ncustomizable text\nvoice recognition\nunderstandable content\nnotifications and feedback\nplease share your ideas, suggestions, or comments via email to the publicly-archived list wai-eo-editors@w3.org or via github.\ne-mail\nfork & edit on github\nnew github issue\n"]}},"http://www.w3.org/WAI/tutorials/menus/":{"title":"\n  Menu Concepts\n\n\n       • Menus\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{}},"http://www.w3.org/WAI/tutorials/images/":{"title":"\n  Images Concepts\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{}},"http://www.w3.org/WAI/tutorials/carousels/":{"title":"\n  Carousel Concepts\n\n\n       • Carousels\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{}},"http://www.w3.org/WAI/tutorials/forms/":{"title":"\n  Forms Concepts\n\n\n       • Forms\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{}},"http://www.w3.org/WAI/bcase/pol.html":{"title":"Legal and Policy Factors in Developing a Web Accessibility Business Case for Your Organization | Web Accessibility Initiative (WAI) | W3C","flavors":{"1,benefit":["introduction","identifying legal and policy factors for a\nspecific organization","determining applicable policies","addressing multiple standards","understanding risks for non-compliance"],"0.2,benefit":["-","in-suite navigation","\noverview\nsocial factors\ntechnical factors\nfinancial factors\nlegal & policy factors\nresources\n","legal and policy factors in developing a web accessibility business case for your organization","\npage contents\nintroduction\nidentifying legal and policy factors for a specific\norganization\ndetermining applicable policies\naddressing multiple standards\nunderstanding risks for non-compliance\n","this page is part of a resource suite that describes the social, technical, financial, and legal and policy factors relevant to developing a customized business case for web\naccessibility for a specific organization.","note that the term \"policy\" is used broadly in this document to refer to\nrequirements from governments and other organizations in the form of laws,\npolicies, regulations, standards, guidelines, directives, communications,\norders, or other types of documents, which have different degrees of\nauthority in different systems.","legal and policy factors apply differently to specific organizations and\nsituations. for example, one organization might be required by explicit\ngovernment regulations to make its websites accessible, while another\norganization follows the web accessibility policies recommended by its trade\nassociation and required by a partner company.","many countries are ratifying the un convention on the rights of persons with disabilities which specifically includes accessibility of the internet and other information and communications technology (ict). thus, countries that have ratified the convention might be introducing new \"policies, laws and administrative measures\" related to web accessibility.","this page provides guidance on addressing legal and policy factors in a\nbusiness case for web accessibility.","the following questions help identify how the legal and policy aspects\nof web accessibility apply to the organization:","\nis the organization required by law or other\nlegal mandate to make its website accessible?\nif so, the business case can list those laws or mandates that\nthe organization is required to meet. see determining\napplicable policies.\nare there other web accessibility policies\nthe organization should comply with? if so, the business case can list those policies that the organization\nshould comply with. see determining applicable\npolicies.\nare the requirements adequate to meet the\nneeds of people with disabilities and older users?\nif the required guidelines might not adequately meet the needs\nof the website's users with some disabilities, the organization can\ninclude in its business case additional guidelines it chooses to meet.\nsee considerations beyond requirements.\nare there specified guidelines, conformance\nlevels, and dates for compliance?\nfor example, does the policy state that a certain level of\ncompliance is required by one date, and a higher level of compliance is\nrequired by a later date? see considerations for the\nfuture.\nmight the org be subject to policies in the future?\nfor example, requirements might be in development now that will be enforced in the future; or, an organization might expand into countries or other markets\nwhere web accessibility policies already apply. see considerations for the future.\ndoes the organization understand the risks\nof failing to provide accessible websites?\nin some cases it is useful to include in a business case the\nnegative impact on reputation and potential legal costs associated with\ndefending against legal action for not complying with web accessibility\nrequirements. see understanding risks for\nnon-compliance.\n","web accessibility requirements can be in the form of policies, laws,\nregulations, standards, guidelines, directives, communications, orders, or\nother types of documents. policies\nrelating to web accessibility lists governmental legislation and related\ninformation for many countries and regions.","some governments have laws that specifically require that\ncertain types of websites are accessible. for example, some organizations that receive government funding are required to comply with government policies on accessibility. other governments might not directly specify\nweb accessibility, yet the web is indirectly covered under\nbroader anti-discrimination legislation, information and communications\ntechnology (ict) policy, or other laws or policies. in some countries, organizations' intranets and internal applications are covered by laws requiring accessibility accommodation in the workplace for people with disabilities or by age discrimination legislation with respect to older employees.","an organization might be required by non-governmental\npolicies to make its website accessible, such as a university web\naccessibility policy that requires department websites be accessible.\nsometimes organizations are compelled to meet other\npolicies, such as policies from trade or industry associations, professional\nassociations, or standards organizations.","considerations for\ndifferent types of organizations","\ngovernment - some governmental web\naccessibility requirements apply only to national government ministries'\nor agencies' websites; some also apply to provincial, state, or local governments. some lower levels of government establish requirements independent of national requirements.\neducation\n- many educational institutions and organizations are covered by\ngovernmental requirements for accessibility of web-based educational\nresources and online learning environments. in some countries or regions,\neducational institutions are covered in broad policies along with other\ntypes of organizations; and in others there are policies specifically\naddressing educational institutions. in addition to governmental\nrequirements, some educational institutions and organizations have\nestablished separate or more extensive requirements for accessibility. in\nsome cases there is a specific policy on web accessibility; in other\ncases web accessibility is covered under broader accessibility\npolicies.\nindustry and non-governmental (non-profit) organizations (ngo) - some\ngovernment policies require industry and ngo websites to be accessible.\nthese types of organizations might also choose to follow other web\naccessibility policies, such as recommendations from trade, industry, or professional associations. many corporations and ngos\nestablish their own policies for web accessibility, which are often more\nextensive than those required by government policies. in some cases,\npolicies established by corporations or ngos might also apply to\nsubsidiaries, vendors, and others who do business with the\norganization.\n","considerations beyond requirements","sometimes the required standards or minimum conformance level might not\nadequately meet the needs of the website's users with disabilities.\nif the needs of people with some disabilities are left out of the required accessibility standards, an organization might choose to meet additional\nguidelines in order to provide sufficient\naccessibility.","considerations for the future","it is almost always significantly easier, more\neffective, and less expensive to incorporate accessibility early in website development or\nredesign, rather than retrofit existing sites later. therefore, many\norganizations that might be subject to web accessibility requirements in the\nfuture choose to incorporate web accessibility as soon as feasible.","an organization might be subject to additional web accessibility requirements\nin the future because:","\nthere are policies in development that will apply to the\norganization\nthe organization expands into countries or other markets where web\naccessibility policies apply\n","some policies reference specific guidelines or standards for web\naccessibility and include dates for compliance. for example, a policy might\nstate that websites meet web content accessibility guidelines (wcag) wcag 2.0 level a success criteria by a certain date and level aa success criteria by a later date. however, an organization\nmight determine that it is most efficient to address all the requirements at\nthe same time.","as described above, an organization could be subject to multiple web\naccessibility policies; for example, standards from governments in different\ncounties where they operate, from a trade association, and from a partner\norganization. addressing different standards is more complex than addressing\na single standard; however, because there is almost always significant\noverlap between standards, the work to meet two different standards is not\ntwice the work to address one standard. in most cases an organization meeting\nthe more comprehensive standard can easily ensure that other standards are\nalso met.","for organizations that are concerned about meeting multiple standards, it\ncan be effective to include in the business case detail on the overlap\nbetween standards. for example, include an appendix\nthat shows the similarities between the different\nstandards that shows where it is not much more effort to meet multiple standards.","some organizations have faced legal action for not making their websites or intranets and web-based applications accessible. not complying with accessibility requirements can result in\nsignificant legal costs and have negative impact on the organization's reputation.","sometimes the legal requirements for an organization might not be clear. some organizations determine that it is in their best interest\n(financially and otherwise) to make their sites accessible, rather than risk\nlegal action.","[ previous page - financial factors | top of page ]"]}},"http://www.w3.org/WAI/bcase/tech.html":{"title":"Technical Factors in Developing a Web Accessibility Business Case  for Your Organization | Web Accessibility Initiative (WAI) | W3C","flavors":{"1,benefit":["introduction","identifying technical factors\nfor a specific organization","reduce site development and\nmaintenance time","reduce bandwidth use and server load","enable content on\ndifferent configurations","be prepared for\nadvanced web technologies","have high quality websites"],"0.2,benefit":["-","in-suite navigation","\noverview\nsocial factors\ntechnical factors\nfinancial factors\nlegal & policy factors\nresources\n","technical factors in developing a web accessibility business case for\nyour organization","\npage contents\nintroduction\nidentifying technical factors for a\nspecific organization\nreduce site development and maintenance\ntime\nreduce bandwidth use and server load enable content on different\nconfigurations\nbe prepared for advanced web\ntechnologies\nhave high quality websites\n","this page is part of a resource suite that describes the social, technical, financial,\nand legal and policy factors relevant to developing a customized business case for web\naccessibility for a specific organization.","implementing web accessibility solutions often results in improved\ntechnical performance. the relative importance of various technical benefits of web\naccessibility is different for specific organizations and situations. for\nexample, reducing server load might be most important to an organization with\na large, mission-critical, high-traffic site; whereas another organization\nthat focuses on cutting-edge technology might be more interested in\ninteroperability and being prepared for advanced web technologies. however, these\nsame technical benefits might not be very important for organizations with\nsmall, simple sites; they might be more interested in simplifying site maintenance.","this page provides guidance on addressing technical factors in a business\ncase for web accessibility.","the following questionshelp identify how the technical aspects of web\naccessibility apply to the organization:","\nis the organization starting a new web\ndevelopment or redesign effort?\nif so, the business case can emphasize the technical benefits of\nincorporating accessibility early in the project. see reduce site development and maintenance time.\ndoes the organization change site content\nor design frequently?\nif so, the business case can emphasize that web accessibility can reduce\nmaintenance time. see reduce site\ndevelopment and maintenance time.\nhow important is it to the organization to\nreduce bandwidth use or server load?\nfor example, if it is important for the organization to reduce the need\nfor additional servers or increase the download speed, the business case\ncan emphasize these factors. see reduce\nbandwidth use and server load.\ndoes the organization want its website to\nwork in different configurations?\nfor example, if the organization wants its website to work on multiple\noperating systems, web browsers, and devices, the business case can show\nhow web accessibility contributes to interoperability and\ndevice-independence. see enable content\non different configurations.\nhow important is it to the organization to be prepared for\nadvanced web technologies?\nfor example, if the organization is interested in taking\nadvantage of advanced web technologies, this factor can be included in\nthe business case. see be prepared for\nadvanced web technologies.\ndoes the organization want to have\nhigh-quality websites that meet standards?\nif so, the business case can point out the overlap between web\naccessibility standards and other standards. see have high quality websites.\n","see web content accessibility\nguidelines (wcag) overview for more information about the wcag references below.","incorporating accessibility usually increases site development time\ninitially, as discussed in financial factors.\nhowever, in the long term web accessibility can reduce the time an\norganization spends on site development and maintenance, as follows:","\nreduce time and effort needed to change\npresentation across a site by defining presentation through a\nstyle sheet and using proper markup (for example, in xhtml) for\nstructure. presentation includes design and style such as font size, font face, and\nbackground color. if the presentation is defined in an external style\nsheet, it can be changed throughout the site by making the change to that\none style sheet. however, if the presentation was improperly defined\nthroughout the html, the presentation markup would have to be changed in\nevery instance on every web page.\n(wcag 2.0 success criteria 1.3.1, 1.4.5, 1.4.9, 2.4.10; wcag 1.0 checkpoints 3.1, 3.3, 3.5, 3.6, 3.7, 5.4)\nfacilitate efficient debugging with\nautomated validation tools by conforming to standards and identifying a\ndoctype. facilitate efficient human debugging by simplifying markup and\nusing style sheets to define presentation. (wcag 2.0 success criteria 1.3.1, 4.1.1, 4.1.2; wcag 1.0 checkpoints 3.2, 3.3,\n11.1, 11.2)\nreduce redesign and translation time and\nskills needed by using standard markup and style sheets to style\nand format text, instead of using bitmap images of text or math. site designers often use bitmap images for stylized text. in such cases,\nto change or translate text content or style, each image has to be\nmanipulated. if instead the text was not in an image and the style was\nprovided in a style sheet, then the text can be easily changed or translated. to change the design is a simple style sheet change instead of restyling images of text.\n(wcag 2.0 success criteria 1.4.5, 1.4.9; wcag\n1.0 checkpoint 3.1)\nreduce development and maintenance by having one accessible version of a site, rather than multiple\nversions, as described in \"enable\ncontent on different configurations\" section below.\n","web accessibility techniques can reduce the server load, which increases the download speed and can reduce the need for additional bandwidth or servers, as follows:","\nreduce the size of each page served by defining presentation in style sheets (which are only requested once\nper session) rather than the markup of each page, and by using text\nrather than bitmap images of text. (wcag 2.0 success criteria 1.3.1, 1.4.5, 1.4.9; wcag 1.0 checkpoints 3.3, 3.1)\nreduce downloading of large image and\nmultimedia files by including alternative text for images and\ntranscripts for multimedia files. for example, this lets users with low\nbandwidth connections browse with images off, and lets users preview the information and decide whether or not to download it.\n(wcag 2.0 success criteria 1.1.1, 1.2.8; wcag 1.0 checkpoint\n1.1)\nreduce unwanted page downloading, and thus\nserver requests, by providing clear and consistent design,\nnavigation, and links. (wcag 2.0 success criteria 2.4.4, 2.4.9, 2.4.5, 3.2.3, 3.2.4, 2.4.1, 2.4.6, 3.2.3, 3.2.4; wcag 1.0 checkpoints 13.1, 13.3, 13.4, 13.5, 13.6,\n13.7, 13.8, 14.3)\n","many organizations are increasingly interested in web interoperability and device-independence, such as making their websites work well on mobile devices. web accessibility can enable web\ncontent to be rendered and interacted with on different configurations, including different devices, operating systems, and web\nbrowsers, as follows:","\nallow users and user agents to access\ncontent for different configurations, and servers to provide content for\ndifferent configurations by using current versions of technologies with built-in accessibility support such as xhtml, xml, rdf, smil, css, xsl, xslt,\nand png. (wcag 2.0 success criteria 4.1.1, 4.1.2 and conformance requirements 1, 4; wcag 1.0 checkpoints 11.1,\n3.2)\nrender styled text across a wide\nrange of configurations by providing information as text and\nusing style sheets to define presentation, rather than using bitmap\nimages of text. (wcag 2.0 success criteria 1.3.1, 1.4.1, 1.4.3, 1.4.4, 1.4.5, 1.4.6; wcag 1.0 checkpoints 3.1, 3.3)\nfacilitate interaction with different input\ndevices by designing for device independence.\n(wcag 2.0 success criteria 2.1.1, 2.1.2, 2.1.3, 2.4.3, 2.4.7; wcag 1.0\ncheckpoints 6.4, 9.1, 9.2, 9.3, 9.4, 9.5)\nallow users and user agents to request\ncontent in a way that suits their capabilities by using markup\nfor structure and style sheets for presentation. (wcag 2.0 success criteria 1.3.1, 2.4.10; wcag 1.0 checkpoint\n3.3)\n","for a detailed list of how accessibility overlaps mobile design/development, along with links to wcag success criteria, see shared web experiences.","web accessibility can help organizations take advantage of advanced web\ntechnologies and be prepared for future web technologies, for example:","\nallow content re-use by enabling tools to extract and present information to users in different modalities.\n(wcag 2.0 success criteria 1.3.1, 1.4.3, 1.4.4, 1.4.6, 4.1.2)\nsimplify forward migration and\nbackwards-compatibility by defining presentation in a style\nsheet, using proper markup structure, and using the latest standards. (wcag 2.0 success criteria 4.1.1, 1.3.1, 1.4.8, 1.4.4, 1.3.1, 2.4.10; wcag 1.0 checkpoints 11.1, 3.2, 3.3, 3.5, 3.6, 3.7, 5.4)\n","some developers and organizations pride themselves on producing high\nquality websites that meet technical standards.web content accessibility guidelines (wcag) and other accessibility specifications from the world wide web consortium (w3c) web\naccessibility initiative (wai) are widely-recognized international standards. additional resources addressing the business case for web standards in general\nare available on the web.","[ previous page - social factors | top of page | next page - financial factors ]"]}},"http://www.w3.org/WAI/bcase/fin.html":{"title":"Financial Factors in Developing a Web Accessibility Business Case for Your Organization | Web Accessibility Initiative (WAI) | W3C","flavors":{"1,benefit":["introduction","identifying financial factors for a specific\norganization"," increases website use","direct cost savings","cost considerations","decreasing costs"],"0.2,benefit":["-","in-suite navigation","\noverview\nsocial factors\ntechnical factors\nfinancial factors\nlegal & policy factors\nresources\n","financial factors in developing a web accessibility business case for your organization","\npage contents\nintroduction\nidentifying financial factors for a specific\norganization\nincreases website use\ndirect cost savings\ncost considerations\ndecreasing costs\n","this page is part of a resource suite that describes the social, technical, financial, and legal and policy factors relevant to developing a customized business case for web\naccessibility for a specific organization.","an organization's efforts to make its website accessible often have a\nfinancial impact, and can result in positive return on investment and cost\nefficiencies. financial costs and benefits in developing accessible websites\napply differently to specific organizations and situations. for example,\ncosts related to web accessibility are often lower when building a new site\nthan when fixing an existing site, and sometimes complex sites are less\ncostly to fix than simple sites because they use templates and content\nmanagement systems (cms).","this page provides guidance on addressing financial factors in a\nbusiness case for web accessibility.","the following questions help identify how the financial aspects of web\naccessibility apply to the organization:","\nwhat is the main goal for the organization's website?\nfor example, if the main goal is increasing online sales, the business\ncase can emphasize increasing potential market share, findability, and\nusability. see increased website use.\nare there other efforts in the organization\nthat overlap with the financial factors of web accessibility?\nfor example, if the organization is focusing on improving its search engine\nrankings, increasing market share, or improving usability for all users,\nthe business case can show how web accessibility helps those efforts. see increased website use.\nhow concerned is the organization with\ncutting web-related costs?\nfor example, an organization with high maintenance and upgrading costs\ncan emphasize cost savings from technical improvements. see direct cost savings.\nis the organization legally obligated to\nmake its website accessible, or might it be in the\nfuture?\nsee decreases potential for high legal\nexpenses.\nis the organization obligated to provide\nalternative formats of printed material, or might it be in\nthe future?\nsee decreases cost of alternative format\nmaterials.\ndoes the organization provide web pages\nin different languages, or might it in the future?\nsee decreases cost of translating.\nwhat type of web content does the\norganization have?\nfor example, an organization with little multimedia content will have\nfewer on-going costs. see on-going costs.\nhow does the organization update its website?\nfor example, an organization with simple content updates that do not\nrequire rigorous testing will have few on-going testing costs. see on-going costs.\nis the organization starting a new web\ndevelopment or redesign effort?\nif so, the business case can emphasize the cost savings of incorporating\naccessibility early in the project. see decreasing\ncosts.\ndoes the organization have several web projects?\nif so, the business case can clarify that initial costs can be shared\namong different projects. see decreasing\ncosts.\nis it a priority in the organization to retain the knowledge and experience of its older employees?\nif so, the business case can emphasize the benefits of an accessible intranet and internal web applications for older users. see direct cost savings.\n","see web\ncontent accessibility guidelines (wcag) overview for more information about the wcag references below.","a major benefit of web accessibility is the potential for direct and\nindirect financial gains from increased website use. web accessibility can\nmake it easier for people to find a website, access it, and use it\nsuccessfully, thus resulting in increased audience (more users) and increased\neffectiveness (more use).","many organizations benefit financially when more people\nsuccessfully use their website; for example, commercial companies\ncan get more sales, educational institutions can get more students, and\nnon-profit organizations can get more funding by demonstrating\nsuccessful outreach and dissemination. increasingly, websites are\nused to cut costs by decreasing customer support services and\nletting customers complete transactions online rather than requiring\npersonnel and paper interactions. the many examples of cost savings from\nonline transactions include citizens renewing licenses; filing tax returns and making payments online; investors\ntrading stock and monitoring their pension funds online; and students registering for classes and completing course work online. thus,\nincreased site use can result in financial gains and cost savings.","increase in audience (website users) can result from the following\nbenefits of web accessibility:","\nincreases potential use by more people, expands potential market\nshare\naccessible sites can be used by more people - including people with\ndisabilities, people using mobile devices, older people, people with low literacy, people who are not fluent in the language of the site, people with low\nbandwidth connections to the internet, people with older technologies,\nand new and infrequent web users, as discussed in social factors - thus\nincreasing the market segments and number of people who can\nsuccessfully use the site.\nan important potential market for many\norganizations is older people. people are generally living longer and older people are an increasingly large percentage of web users.\naccessible websites are more usable to people who have temporary or permanent impairments due to accident, illness, or ageing.\nwhen web use is a significant part of a job, intranets and web applications that are accessible can help with employee recruiting and retention.\npeople with disabilities and older people are particularly likely to be loyal customers of websites that work well for them. furthermore, word-of-mouth or \"viral marketing\" can be significant among these groups.\nincreases findability with search engine optimization (seo)\naccessibility techniques increase the findability of web pages by\nexposing content to search engines, both internally (within a website)\nand externally (across the world wide web). for example:\nalternative text for images and multimedia is available to search\nengines (wcag 2.0 success criteria 1.1.1, 1.2.1, 1.2.8; wcag 1.0 checkpoint 1.1)\nmost search engines access text and not images (wcag 2.0 success criteria 1.4.5, 1.4.9; wcag 1.0\ncheckpoint 3.1)\nsome search engines give higher weight to text that is marked up\nas headings (wcag 2.0 success criteria 1.3.1, 2.4.10; wcag 1.0 checkpoint 3.5)\nsome search engines are unable to access some script-generated content such as mouse-overs\n(wcag 2.0 success criteria 2.1.1)\nadditional perspectives on the benefits of accessibility for seo are available on the web.\n","increase in effectiveness (website use) can result from the following\nbenefits of web accessibility:","\nincreases potential use in more situations\naccessible sites can be used in more situations. websites that can\nbe used by people with disabilities can also be used more easily by people without disabilities who are limited by their situation, such as:\nin a noisy environment (wcag 2.0 success criteria 1.2.1, 1.2.2, 1.2.4, 1.2.9; wcag 1.0 checkpoints 1.1, 1.4)\nusing a small black-and-white display or a mobile device outdoors\n(wcag 2.0 success criteria 1.4.1, 1.4.3, 1.4.4, 1.4.6; wcag 1.0 checkpoints 2.1,\n2.2)\nlow bandwidth\n(wcag 2.0 success criteria 1.1.1, 1.2.8, 1.4.5, 1.4.9; wcag 1.0 checkpoints\n1.1, 3.1)\nthe enable content on different\nconfigurations section of technical factors\ndescribes how accessibility techniques help web pages work with\ndifferent configurations, including on mobile devices. situational limitations such as low bandwidth\nand older technology are discussed in social factors.\nincreases usability\naccessible sites are generally more usable to everyone, including\npeople with disabilities and people without disabilities. increased\nusability means website users achieve their goals effectively,\nefficiently, and satisfactorily. when users have a positive experience\nwith a website, they are more likely to use the site more thoroughly,\nreturn to the site more often, and to tell others about the site\n(\"viral marketing\"). some accessibility guidelines directly increase\nusability to all users, such as:\nclear and consistent design, navigation, and links (wcag 2.0 success criteria 2.4.2, 2.4.4, 2.4.5, 2.4.6, 2.4.9, 3.2.3, 3.2.4, guideline 3.3; wcag 1.0\ncheckpoints 13.1, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 14.3)\nblocks of information divided into groups (wcag 2.0 success criteria 1.3.1, 2.4.10; wcag 1.0 checkpoint\n12.3)\nclear and simple language as appropriate (wcag 2.0 success criteria 3.1.5, 3.1.3; wcag 1.0 checkpoint\n14.1)\nsupplemental illustrations (wcag 2.0 guideline 3.1; wcag 1.0 checkpoint 14.2)\ngood color contrast\n(wcag 2.0 success criteria 1.4.3, 1.4.6; wcag 1.0 checkpoint 2.2)\nother accessibility guidelines can indirectly increase usability, for\nexample, by making web pages load faster, as discussed in the access for people with low bandwidth\nconnections to the internet and older technologies section of\nsocial factors.\nincreases positive image\nan organization's efforts in web accessibility are a public relations\nopportunity to increase its positive image, which can increase website\nuse. the social factors page discusses web\naccessibility as a social issue and an aspect of corporate social\nresponsibility (csr). csr has been shown to improve financial\nperformance, enhance brand image and reputation, increase sales and\ncustomer loyalty, increase ability to attract and retain employees, and\nprovide access to capital and funding. additional perspectives on csr, such as statistics that show how csr impacts customers, are available on the web.\n","in addition to the benefits from increased website use discussed above,\nmany organizations realize direct cost savings from improving web\naccessibility.","many of the aspects of web accessibility that are discussed in technical factors can provide direct cost savings:","\ndecreases personnel costs for maintaining\nthe site when accessibility reduces site maintenance\ndecreases the amount of server capacity\nneeded and saves on additional server costs when accessibility\nreduces server load\ndecreases the need for creating multiple\nversions of a site for different devices when accessibility\nenables content to work on different devices\ndecreases the cost of upgrading for new\ntechnologies when accessibility helps take advantage of advanced\nweb technologies and be prepared for future web technologies\n","\ndecreases potential for high legal\nexpenses\nensuring that websites are accessible reduces the risk of high legal\ncosts associated with defending against legal action for not complying\nwith web accessibility requirements. legal and policy factors discusses policy considerations for different organizations.\ndecreases cost of alternative\nformat materials\nfor organizations that provided printed materials in alternate\nformats (large print, embossed braille, computer disk), an accessible\nwebsite can reduce the demand for alternate formats when people chose\nto use the web, thus saving some production and distribution costs.\ndecreases cost of\ntranslating\nthe cost of translating a website to other languages can be\ndecreased by following accessibility guidelines for:\nclear and simple language as appropriate (wcag 2.0 success criteria 3.1.5, 3.1.3; wcag 1.0 checkpoint\n14.1)\nstyled text instead of bitmap images of text to convey\ninformation (wcag 2.0 success criteria 1.4.5, 1.4.9; wcag 1.0 checkpoint 3.1)\nseparating content from presentation (wcag 2.0 success criteria 1.3.1, 2.4.10; wcag 1.0 checkpoint\n3.3)\nclear and consistent design, navigation, and links (wcag 2.0 success criteria 2.4.2, 2.4.4, 2.4.5, 2.4.6, 2.4.9, 2.4.10, 3.1.5, 3.2.3, 3.2.4; wcag 1.0\ncheckpoints 13.1, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 14.3)\ndecreases personnel costs\nan accessible intranet and web applications can help an organization:\ndecrease training, support, and accommodation costs\nhelp retain the valued expertise and experience of older employees as they develop age-related impairments\ndecrease the costs of recruiting and training new employees\n","when accessibility is incorporated from the beginning of website\ndevelopment it is often a small percentage of the overall website cost.","initial costs","when an organization starts incorporating accessibility, there are initial\ninvestments in acquiring knowledge, establishing processes, and increased\ndevelopment and testing time.","personnel-related costs associated with an\ninitial investment in accessibility can include:","\nproviding training and skills development\nproviding training and skills development includes the cost of\ntraining and time away from other work. during skills development there\nis initially an increase in development and testing time because using\nnew skills is often slower. in addition to training on direct\naccessibility issues, organizations that move to different technologies\nin an effort to improve accessibility might incur training costs on the\nnew technologies.\nhiring expertise\nmany organizations starting web accessibility efforts hire consultants or employees with accessibility expertise, such as people with\ndisabilities to help with testing.\nincorporating accessibility into procedures\nincorporating accessibility into protocols and procedures, such as\nquality assurance (qa) testing and usability evaluation, takes personnel\ntime.\nassessing existing website accessibility\nwhen fixing an existing site, assessing (auditing or evaluating)\nexisting website accessibility is a common initial cost. the\nassessment cost is either a direct expense if using a service outside\nthe organization, or a personnel cost if using internal resources.\nmaking accessibility improvements in existing websites is almost\nalways more costly in personnel time than incorporating accessibility during initial development or redesign.\n","potential initial capital expenditures related to web accessibility\ninclude:","\npurchasing accessibility evaluation tools\nweb accessibility evaluation\ntools are software or online services that help identify accessibility problems.\nwhile these are not a required expense, many organizations find that\nusing accessibility evaluation tools saves time and money.\npurchasing assistive technologies\nsome people with disabilities use assistive\ntechnologies to access the web. developers,\ndesigners, and evaluators sometimes use assistive technologies\nthroughout the development process to understand how people interact\nwith web pages and to test web pages. in many cases it is effective to use free assistive technologies for initial testing and to use people with disabilities for more thorough testing.\nupgrading technologies and tools\nsometimes organizations determine that it will be more efficient to implement accessibility with different technologies. for example, some organizations upgrade or change to\na content management system (cms) or other authoring tool that better supports production of accessible\nwebsites. (selecting and using\nauthoring tools for web accessibility includes guidance on\nevaluating and selecting authoring tools.)\n","on-going costs","while most of the costs of web accessibility are associated with\ninitial accessibility efforts, there are some on-going costs to making websites accessible, including:","\nadditional development\nonce an organization is experienced in accessibility, incorporating\naccessibility in a web project often adds negligible extra cost.\nhowever, for some types of accessible content additional development\ncost or time is required, for example providing transcripts for podcasts and captions for multimedia.\nadditional testing\norganizations committed to providing usable, accessible sites will\nlikely increase testing time. accessibility testing activities include:\ntesting design ideas and early prototypes with users with disabilities and older users, and with assistive\ntechnologies\nreviewing early prototypes and final web pages for conformance to\naccessibility standards and guidelines\nquality assurance testing of specific accessibility issues, such\nas checking for missing alternative text for images\nthe information in the wai resource evaluating web\nsites for accessibility can help in determining the potential costs of additional testing. ","there are several things organizations can do to decrease the cost of\nimplementing accessibility, including the following:","\nincorporating accessibility from the beginning\nincorporating accessibility from the beginning of a website\ndevelopment or redesign process is almost always significantly easier,\nless expensive, and more effective than making accessibility\nimprovements to an existing site later as a separate project.\nsharing accessibility resources\nmost costs associated with web accessibility are investments at an\norganization level, rather than costs required for each\nweb development project. in many organizations the initial costs can be\nshared among multiple projects, rather repeated for each project.\nusing authoring tools that support accessibility\nusing authoring tools, such content management systems (cms), that support accessibility and meet authoring tool accessibility guidelines (atag) can help decrease the time and effort needed to make websites accessible.\naddressing accessibility and mobile together\ndesigners and developers can more efficiently develop websites (including applications) that work well by people using mobile devices and by people with disabilities, when they understand the significant overlap between the two and design for both together. the overlap between the barriers and solutions is introduced in web content accessibility and mobile web.\n","[ previous page - technical factors | top of page | next page - legal and policy factors ]"]}},"http://www.w3.org/WAI/tutorials/tables/":{"title":"\n  Tables Concepts\n\n\n       • Tables\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{}},"http://www.w3.org/WAI/bcase/soc.html":{"title":"Social Factors in Developing a Web Accessibility Business Case for Your Organization | Web Accessibility Initiative (WAI) | W3C","flavors":{"1,benefit":["introduction","identifying social factors for a specific\norganization","web accessibility is a social issue","web accessibility benefits people with and without disabilities","web accessibility is an aspect of\ncorporate social responsibility (csr)","role of organizations' websites"],"0.2,benefit":["-","in-suite navigation","\noverview\nsocial factors\ntechnical factors\nfinancial factors\nlegal & policy factors\nresources\n","social factors in developing a web accessibility business case for your organization","\npage contents\nintroduction\nidentifying social factors for a specific\norganization\nweb accessibility is a social issue\nweb accessibility benefits people with and without disabilities\naccessibility is an aspect of\ncorporate social responsibility (csr)\nrole of organizations' websites\n","this page is part of a resource suite that describes the social, technical, financial, and legal and policy factors relevant to developing a customized business case for web\naccessibility for a specific organization.","the importance of various social aspects of web accessibility is\ndifferent for specific organizations and situations. for example, one\norganization's goal might be to become a leader in corporate social\nresponsibility, a different organization might be particularly interested in\nattracting capital from socially responsible investing sources, and another\norganization might be interested in demonstrating its focus on a specific\nsocial group, such as older people.","this page provides guidance on addressing social factors in a business case for web accessibility.","the following questions can help identify how the social aspects of web\naccessibility apply to the organization:","\ndoes the organization have a corporate\nsocial responsibility (csr) statement or program?\nan organization's commitment to social responsibility could be\ncalled something other than\n\"corporate social responsibility\". see web\naccessibility is an aspect of corporate social responsibility (csr).\ndo people within the organization understand how web\naccessibility fits into social responsibility?\nif not, the business case can explain that web\naccessibility is a social issue affecting equal opportunity.\nare there other programs or initiatives\nwithin the organization that overlap with the social factors of web\naccessibility? for example, if the organization has a strong emphasis on recruiting, the\nbusiness case can include the benefits of attracting potential employees\nwho want to work for an organization that is active in social\nresponsibility.\ndoes the organization focus on other groups\nthat benefit from web accessibility?\nfor example, if the organization focuses on older people, the\nbusiness case can include details on how web accessibility benefits older\npeople. see overlap with older users' needs.\n","web accessibility focuses on people with all types of disabilities - visual, auditory, physical, speech, cognitive, and neurological disabilities - including older people with age-related impairments.","web accessibility is essential for equal opportunity","use of the web is spreading rapidly into most areas of society and daily life. in many\ncountries the web is increasingly used for government information and\nservices, education and training, commerce, news, workplace interaction,\ncivic participation, health care, recreation, entertainment, and more. in some cases, the web is replacing traditional\nresources and service delivery.","the web is an important medium for\nreceiving information as well as for providing information and interacting with\nsociety. therefore, it is essential that the web is accessible in order to provide equal access and equal opportunity to people with disabilities. this basic human right is recognized in the un convention on the rights of persons with disabilities, which specifically mentions the internet and other accessible information and communications technologies (ict). an accessible web can also help people with disabilities and older people more actively participate in society.","the web is an opportunity for unprecedented access to information\nfor people with disabilities. that is, the accessibility barriers to print, audio, and visual media can be much more easily overcome through web technologies. for example, when the primary way to\nget certain information was go to a library and read it on paper, there were significant barriers for many people with disabilities, including getting to\nthe library, physically getting the resource, and reading the resource.","when\nthat same information is also available on the web in an accessible format, it is\nsignificantly easier for many people to access the information. therefore, people with disabilities can have more effective and efficient\naccess to information through accessible websites — in some cases, where\nthere was essentially no access to it before.","the web is an opportunity for unprecedented interaction for people\nwith disabilities. for example, some disabilities limit the type of\nwork a person can do and an accessible web can increase their employment options. an accessible web also expands opportunities for\ncommunication, social interaction, and community participation for people with disabilities and older people with age-related impairments.","barriers to web use ","currently there are significant barriers on the web for many people with disabilities. because most web developers do not make their web pages and web tools accessible, many people with accessibility needs have unnecessary difficulties using the web, and in some cases, cannot effectively use the web at all. for example, when developers require mouse interaction to use a website, people who cannot use a mouse can have great difficulty; and when developers do not include alternative text for important images, people who are blind cannot get the information from images. many of these barriers also impact older users with accessibility needs due to ageing.","however, when websites are accessible, they enable people with disabilities to use the web effectively. the document how people with disabilities use the web includes scenarios that describe people with different disabilities successfully using the web. ","number of people affected (statistics)","estimating how many people are affected by web accessibility is\ndifficult for several reasons. countries define disability differently and use different methods to determine the number of people with disabilities. some common conditions that do affect people's use of the web (such as color blindness) may not be considered disabilities in many countries. not all disabilities affect access to the web (for example, difficulty walking does not affect access to the web, though difficulty moving one's hands does). additionally, some people do not want to disclose their disability, and some older people do not consider their impairments a disability.","the united nations human functioning and disability page includes links to data for different countries. market research such as the market for accessible technology - the wide range of abilities and its impact on computer use and accessible technology in computing - examining awareness, use, and future potential illustrates a different approach to estimating the percentage of computer users who might benefit from web accessibility. the statistics on people with disabilities and web use section of the resources page links to additional statistics, including on ageing demographics and age-related impairments.","overlap with digital divide issues","the term \"digital divide\" is often used to refer to economic and social barriers to computer use for people without disabilities. many people with disabilities are affected by the same economic and social factors, including very low rates of employment and consequently low income. together with barriers in the physical environment and in computer technologies, these factors can result in:","\nlack of accessible mainstream web technologies (such as browsers and authoring tools)\nlack of effective, up-to-date assistive technologies\nlack of opportunities for training to become proficient with web technologies\nlimited access to a social environment that encourages web use limited access to high-bandwidth connections, or even to regular web access\n","an organization that is committed to reducing the digital divide can include in its business case a description of how web accessibility can reduce the impact of economic and social barriers\nto web use for people with disabilities.","overlap with mobile access","in some parts of the world, most people use the web only through a mobile phone, because they do not have access to a desktop or laptop. the overlap between mobile design/development and accessbilty is introduced in web content accessibility and mobile web.","overlap with older users' needs","as more people live longer and older people use the web more, making the web work well for older users is becoming an increasingly important social factor. many older people have age-related impairments that can affect how they use the web, including declining:","\nvision - including reduced contrast sensitivity, color perception, and near-focus, making it difficult to read web pages\nphysical ability - including reduced dexterity and fine motor control, making it difficult to use a mouse and click small targets\nhearing - including difficulty hearing higher-pitched sounds and separating sounds, making it difficult to hear podcasts and other audio, especially when there is background music\ncognitive ability - including reduced short-term memory, difficulty concentrating, and being easily distracted, making it difficult to follow navigation and complete online tasks\n"," these issues overlap with the accessibility needs of people with disabilities. thus, websites and tools that are accessible to people with disabilities are more accessible to older users as well. specific examples are listed in the access for older people section below.","for detailed research on ageing age-related impairments and web accessibility, see web accessibility for older users: a literature review.","while the main focus of web accessibility is people with disabilities,\naccessibility also benefits people without disabilities, including: ","\nolder people\npeople with low literacy or not fluent in the language\npeople with low bandwidth connections or using older technologies\nnew and infrequent users\nmobile phone users\n","the increased website use section of financial factors lists aspects of\nweb accessibility that increase usability, thus also benefiting people\nwithout disabilities. people with temporary disabilities, for example from\nan accident or illness, also benefit from web accessibility.","below are examples of how web accessibility benefits\nothers. the web\ncontent accessibility guidelines (wcag) overview has information about the wcag references.","access for older people","the accessibility provisions that make the web accessible provide many benefits for people with age-related impairments, even though they may not be regarded as having a disability. for example:","older people with deteriorating vision benefit from:","\nsufficient contrast between foreground and background colors (wcag 2.0 success criteria 1.4.3, 1.4.6; wcag 1.0\ncheckpoint 2.2)\ntext that can be increased in size so that it can be read directly by people with mild visual impairment without requiring assistive technology such as a screen magnifier; along with easy to read fonts and increased line spacing\n(wcag 2.0 success criteria 1.4.4, 1.4.8; wcag 1.0 checkpoint 3.4)\nstyled text instead of bitmap images of text to convey information enables\nbetter browser-based enlargement\n(wcag 2.0 success criteria 1.4.5, 1.4.9; wcag 1.0 checkpoint 3.1)\ntext and other elements that do not blink, flash or move in a way that distract users or cause seizures (wcag 2.0 success criteria 2.2.2, 2.3.1, 2.3.2; wcag 1.0 checkpoints 7.2, 7.3)\n","older people with reduced dexterity or fine motor control benefit from:","\nan ability to increase the clickable area of targets\n(wcag 2.0 success criteria 1.4.4, 1.4.5, 1.4.8; wcag 1.0 checkpoint 3.4)\nbeing able to use the keyboard, rather than having\nto use the mouse, for all website interaction (device independence)\n(wcag 2.0 success criteria 2.1.1, 2.1.2, 2.1.3, 2.4.7; wcag 1.0 checkpoints 6.4,\n9.1, 9.2, 9.3, 9.4, 9.5)\n","older people with hearing loss benefit from:","\ntranscripts and captions for audio content (wcag 2.0 success criteria 1.1.1, 1.2.2, 1.2.4, 1.2.8; wcag 1.0 checkpoints 1.1, 1.4)\ncontrast between the audio foreground \"information\" and background \"noise\"\n(wcag 2.0 success criteria 1.4.7)\n","older people with cognitive decline benefit from many of the accessibility aspects list in the next section, access for people with low literacy and people not fluent in the language.","additional aspects of web accessibility that benefit older users are included in the analysis in the web accessibility for older users: a literature review.","access for people with low literacy and\npeople not fluent in the language","accessible websites benefit people with low literacy and\npeople who are not fluent in the language of the website. specifically, many\nof the aspects of web accessibility for people with cognitive disabilities\nhelp people who do not know the language well, including:","\nclear and simple language\n(wcag 2.0 success criteria 3.1.5; wcag 1.0 checkpoint 14.1)\nsupplemental illustrations (wcag 2.0 guideline 3.1; wcag 1.0 checkpoint 14.2)\nclear and consistent design, navigation, and links (wcag 2.0 success criteria 1.3.1, 2.4.1, 2.4.2, 2.4.4, 2.4.5, 2.4.6, 2.4.9, 2.4.10, 3.2.3, 3.2.4, 3.3.2; wcag 1.0 checkpoints\n13.1, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 14.3)\nblocks of information divided into groups (wcag 2.0 success criteria 1.3.1, 2.4.1, 2.4.10; wcag 1.0 checkpoint\n12.3)\ntext that does not blink, flash or move too much\n(wcag 2.0 success criteria 2.2.2; wcag 1.0 checkpoints 7.2, 7.3)\nprovide users enough time to read and use content\n(wcag 2.0 success criteria 2.2.1, 2.2.2, 2.2.3; wcag 1.0 checkpoints 7.4, 7.5)\n","in addition, accessible sites can be read by screen readers so people who have difficulty reading can benefit from listening to sites."," access for people with low bandwidth connections to the internet or using older technologies ","some aspects of web accessibility benefit people with low bandwidth\nconnections. low bandwidth can be due to:","\nlocation- for example, rural areas where high speed connections are not available or mobile phone reception is limited\nbandwidth congestion\nconnection technology- for example, mobile phone or personal data\nassistant (pda)\nfinancial situation- that is, cannot afford high-speed connection\n","some older technologies load pages very slowly and do not support features\nused on newer sites.","people with low bandwidth connections to the internet and people with older technologies benefit\nfrom:","\ntext alternatives for images, multimedia and other non-text objects - for people whose older\ntechnology or mobile technology cannot access multimedia formats, people whose\nconnections are too slow to download multimedia files, or people who turn off images and multimedia to limit connection charges\n(wcag 2.0 success criteria 1.1.1, 1.2.8; wcag 1.0 checkpoint\n1.1)\nredundant coding for information conveyed with color and sufficient\ncontrast between foreground and background colors - for people who have older monitors or are viewing information outdoors where the sunlight makes it difficult to see the screen\n(wcag 2.0 success criteria 1.4.1, 1.4.3, 1.4.6; wcag 1.0 checkpoints 2.1, 2.2)\ntext size defined as relative units - for older browsers that do not\noverride absolute text sizes (wcag 2.0 success criteria 1.4.4, 1.4.8; wcag 1.0 checkpoint 3.4)\nstyled text instead of bitmap images of text to convey\ninformation, which can increase download speed (wcag 2.0 success criteria 1.4.5, 1.4.9; wcag 1.0 checkpoint\n3.1)\nstyle sheets used effectively to separate content from presentation,\nwhich can decrease file size and file download requirements thus\nincreasing download speed (wcag 2.0 success criteria 1.3.1; wcag 1.0 checkpoint 3.3)\nsites that are organized so they can be read and understood without style sheets,\nbecause some older technologies cannot handle style sheets (accessible\npages can use style sheets and still be usable when style sheets are not\nsupported)\n(wcag 2.0 success criteria 1.3.1, 1.3.2; wcag 1.0 checkpoint 6.1)\nsites that use valid w3c technologies and are more likely to work\non older technologies (wcag 2.0 success criteria 4.1.1; wcag 1.0 checkpoints 11.1, 3.2)\nclear and consistent design, navigation, and links, which helps users\nopen the pages they want and helps save wasted page loading time from\nusers going down the wrong path (wcag 2.0 success criteria 2.4.1, 2.4.4, 2.4.5, 2.4.6, 2.4.9, 3.2.3, 3.2.4; wcag 1.0 checkpoints 13.1, 13.3, 13.4,\n13.5, 13.6, 13.7, 13.8, 14.3)\n","access for new and infrequent web users","some people have little opportunity to use the web because of the\nsocioeconomic issues mentioned previously. many older people are new users because the web didn't exist when they were younger. new and infrequent web users\nbenefit from aspects of accessibility such as:","\nclear and consistent design, navigation, and links (wcag 2.0 success criteria 2.4.1, 2.4.4, 2.4.5, 2.4.6, 2.4.9, 3.2.3, 3.2.4; wcag 1.0 checkpoints\n13.1, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 14.3)\nproviding redundant text links for image maps (wcag 2.0 success criteria 2.4.4; wcag 1.0 checkpoint\n1.2)\ninforming users before new browser windows are opened\n(wcag 2.0 success criteria 3.2.1, 3.2.2, 3.2.5; wcag 1.0 checkpoint\n10.1)\n","access for mobile device users","for examples of how accessibility benefits people using mobile devices, along with links to wcag success criteria, see shared web experiences.","web accessibility provides improved access, interaction, and social inclusion for the people described above, which is a primary aspect of corporate social responsibility (csr).","corporate social responsibility, also called corporate citizenship, corporate responsibility, or responsible business,\ngenerally means conducting business ethically and operating an organization in\nsuch a way that treats internal and external stakeholders ethically,\nincreases human development, and is good for society and the\nenvironment. web accessibility can impact an organization's employees,\nstockholders and board members, suppliers and vendors, partners and\ncollaborators, customers, and others. thus web accessibility is\nan integral part of csr in demonstrating an organization's commitment to\nproviding equal opportunities.","just as an accessible website can demonstrate csr, an inaccessible website can undermine an organization's other csr efforts.","the financial benefits of csr are addressed in the increases positive image section of the financial\nfactors page.","when an organization's website is not accessible, it\nfurther excludes people with disabilities from society. when an\norganization's website is accessible, it empowers people with disabilities to participate in society. providing an accessible website is\none way an organization can demonstrate that it strives to meet the access\nneeds of a diverse society.","[ previous page - overview | top of page | next page - technical factors ]"]}},"http://www.w3.org/WAI/tutorials/page-structure/sections/":{"title":"\n  Page Sections\n\n\n       • Page Structure\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["common page sections","main page header","navigation","main content","page footer","complementary content","search section","generic sections","a note on the application role","labeling sections","using aria-labelledby","using aria-label","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\npage sections\n• page structure\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\npage sections\nstatus: this is an in-progress, unapproved draft.\nto help people navigate around the page, they need to be able to identify distinctive page sections such as navigation, main content, headers, and footers. more important parts of a page should be marked up on every website, for example navigation.\nboth, html5 and wai-aria, provide mechanisms to mark up such sections in a meaningful way: html5 defines distinctive elements for certain types of page sections, for example, <header> and <nav>. wai-aria utilizes the role attribute to add such information. it is mainly used by assistive technologies. sometimes the wai-aria landmark roles map directly to html5 elements, but this is not always the case.\nsome html elements are should also carry implicit landmark roles by default, but this is not broadly supported at the time of writing, so the role should be stated explicitly. if html4 is used, <div> elements with aria landmark roles and/or headings are commonly used to identify page sections.\nmost websites have a logo and other information at the top of the page. sometimes a search or navigation can be included. this main page header should be identified by an html5 <header> element and an explicit banner role. the banner role is not implicit for <header> elements as they can be used in other situations. usually there will only be one banner role per page.\ncode snippet: <header role=\"banner\">\n<img src999=\"/images/logo.png\" alt=\"spacebear inc.\">\n</header>\nsections of the page that provide navigation should be marked up using the html5 <nav> element which is supposed to carry an implicit role of navigation. it can contain the main navigation menu or other collections of links whose purpose is to navigate inside the page or the website as a whole. see the navigation menu tutorial for more information on menus. it can be used multiple times on a page.\ncode snippet: <nav role=\"navigation\">\n…\n</nav>\nmain content of a document should be wrapped in a <main> element that implicitly carries a main role. in almost all cases a page will have only one instance of this section.\ncode snippet: <main role=\"main\">\n<h1>stellar launch weekend for the spacebear 7!</h1>\n…\n</main>\nthe term “page footer” refers to a section on the page that contains auxiliary information such as links to copyright or privacy statements. in html5 it is usually marked up as a <footer> element. it does not carry an implicit role but it makes sense to add contentinfo to distinguish the page <footer> element from other uses of <footer> in the page, for example as the footer of an article.\ncode snippet: <footer role=\"contentinfo\">\n<p>&copy; 2014 spacebears inc.</p>\n</footer>\nany section of the document that supports the main content, yet is separate and meaningful on its own, should be marked up using an <aside> element, which does not carry an implicit role as it can be used in other circumstances as well. a role of complementary can be added to sidebars or links to related content to make the purpose of the section more explicit.\ncode snippet: <aside role=\"complementary\">\n<h3>related articles</h3>\n…\n</aside>\nthe search role marks the “search tool” of the website. this should include not only the actual input field, but also the search button and options. the form below contains a <div> element with a search role. there is no html5 equivalent for this role.\nexample: search\ncode snippet: <form action=\"…\">\n<div role=\"search\">\n<input type=\"search\" aria-label=\"search\"> <button type=\"submit\">search</button>\n</div>\n</form>\nother sections of the page can be marked up as <section> elements which carry an implicit role of region which is a generic landmark. be careful not to overuse it, as it adds a lot of additional “noise” when encountered using a screen reader. use it to group items together. it should also always be labeled.\nthe role application declares a section as a web application, as opposed to a web document. the role of application should be used with caution, as it gives a signal to screen reading software to turn off normal web navigation controls. simple widgets should generally not be given the application role, nor should an entire web page be given the application role, unless it is not to be used at all like a web page, and not without much user testing with assistive technology.\nlabeling sections provides additional information for assistive technology and helps clarify areas of the page. this is especially important if there are multiple sections with the same role.\nif a heading or some other text is present that describes the content of a section then add an id attribute in the heading and use this as a value for the aria-labelledby in the landmark section.\ncode snippet: <nav role=\"navigation\" aria-labelledby=\"navheading\">\n<h3 id=\"navheading\">main menu</h3>\n…\n</nav>\nif there is no descriptive text then the aria-label attribute should be used to label the individual landmarks.\ncode snippet: html4\n<nav role=\"navigation\" aria-label=\"main menu\">\n…\n</nav>\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\naria11: using aria landmarks to identify regions of a page\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\n[draft] updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/page-structure/headings/":{"title":"\n  Headings\n\n\n       • Page Structure\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["heading levels","organize main page content","organize page sections","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nheadings\n• page structure\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nheadings\nstatus: this is an in-progress, unapproved draft.\nheadings add structure and meaning to pages by labeling each content part and indicating the relative importance of those parts.\nassistive technologies and some browsers provide mechanisms to present a list of headings to the user that allows users to jump to individual headings. headings also provide visual clues that help to skim the page or find a specific section, this is especially useful for people that are easily distracted.\nit is good practice to nest headings properly. when stepping down through headings, skipping levels should be avoided. that means that an <h1> is followed by an <h1> or <h2>, an <h2> is followed by a <h2> or <h3> etc. when stepping up through headings it is perfectly legitimate to skip any number of levels.\nnote: html5 has introduced an outline algorithm that assigns heading levels based on how deep sectioning elements are nested inside each other, regardless of the actual heading level. at the time of writing, this is not supported by any browser or assistive technology and should not be used.\nwhen looking at the content, the highest available heading level should be used to mark up the heading of the main content, as this makes it easy to discover. ideally use an <h1> or <h2>.\ncode snippet: showing only headings\n<h1>an inside look at the new spacebear 8™</h1>\n<h2>cotton fur</h2>\n<h2>sapphire eyes</h2>\n<h2>synthetic felt paws</h2>\nsimilar to landmarks, headings can be used to give users a way of navigating through web pages. to do this, each section of the page (for example navigation) has its own heading, describing what can be found in the section. often the heading levels are similar to this example:\ncode snippet: showing only headings\n<h1>spaceteddy inc.</h1>\n<h2>navigation</h2>\n<h2>sidebar</h2>\n<h3>more news</h3>\n<h3>what our clients say</h3>\n<h3>ratings</h3>\n<h2>an inside look at the new spacebear 8™</h2>\n<h3>cotton fur</h3>\n<h3>saphire eyes</h3>\n<h3>syntetic felt paws</h3>\n<h2>footer</h2>\n<h3>about the company</h3>\n<h3>our retail stores</h3>\nthe first heading in such cases is usually the page name. in this case, the heading of the actual content is hard to find between headings that describe the page structure. if possible use labeled landmarks to mark up the page structure as the provide more meaning to assistive technologies.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n1.3.1 info and relationships: information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (level a)\n2.4.1 bypass blocks: a mechanism is available to bypass blocks of content that are repeated on multiple web pages. (level a)\n2.4.6 headings and labels: headings and labels describe topic or purpose. (level aa)\n2.4.10 section headings: section headings are used to organize the content. (level aaa)\ntechniques:\naria12: using role=heading to identify headings\ng130: providing descriptive headings\ng141: organizing a page using headings\nh42: using h1-h6 to identify headings\nh69: providing heading elements at the beginning of each section of content\nh80: identifying the purpose of a link using link text combined with the preceding heading element\npdf9: providing headings by marking content with heading tags in pdf documents\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\n[draft] updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/page-structure/content/":{"title":"\n  Content Structure\n\n\n       • Page Structure\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["paragraphs","lists","unordered list","ordered list","nested lists","definition lists","quotes","blockquote","inline quote","figures","images and illustrations","tables","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ncontent structure\n• page structure\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ncontent structure\nstatus: this is an in-progress, unapproved draft.\nbesides headings, there are a lot of ways to structure content using semantic html elements. this helps to keep the website extensible, the content reusable and also conveys more meaning to assistive technologies.\nthe most simple form of text structuring is to write texts in paragraphs, adding rhythm and lightness to the page. the paragraph element (<p>) should be used, as its consistent styling improves readability of the text. the styling of paragraphs is often altered by user stylesheets to adapt for the user’s needs.\nhtml provides elements to mark up ordered and unordered lists. use ordered lists if the content has instructions or information that is performed or used in sequence, for example how to prepare a meal. they are enumerated automatically by the browser. in an unordered list the order does not matter, for example on an ingredients list, the purchase order of ingredients is not relevant. every list item in unordered lists is marked with a bullet. both types of lists provide orientation for the user.\nlist items can contain all kinds of different html elements, including paragraphs, headings, and form elements.\nthe unordered list consists of one <ul> element and multiple list item (<li>) elements:\nexample: corn\ntomatoes\nbeans\nonions\ngarlic\n…\ncode snippet: <ul>\n<li>corn</li>\n<li>tomatoes</li>\n<li>beans</li>\n<li>onions</li>\n<li>garlic</li>\n…\n</ul>\nthe unordered list consists of one <ol> element and multiple list item (<li>) elements:\nexample: cook beans for 45 minutes.\ncut vegetables in small cubes.\nsauté onions and garlic.\ndeglaze using the tomatoes.\nadd corn and beans.\n…\ncode snippet: <ol>\n<li>cook beans for 45 minutes.</li>\n<li>cut vegetables in small cubes.</li>\n<li>sauté onions and garlic.</li>\n<li>deglaze using the tomatoes.</li>\n<li>add corn and beans.</li>\n…\n</ol>\nevery list can be nested into another list. in this example, the order of preparation is not important, but it should be done before using them. the information is still easy to digest, assistive technology can easily inform users about the number of steps.\nexample: prepare ingredients\ncook beans for 45 minutes.\ncut vegetables in small cubes.\nsauté onions and garlic.\ndeglaze using the tomatoes.\nadd corn and beans.\n…\ncode snippet: <ol>\n<li>\nprepare ingredients\n<ul>\n<li>cook beans for 45 minutes.</li>\n<li>cut vegetables in small cubes.</li>\n</ul>\n</li>\n<li>sauté onions and garlic.</li>\n<li>deglaze using the tomatoes.</li>\n<li>add corn and beans.</li>\n…\n</ol>\nto provide definitions for one word, definition lists (<dl>) can be used. they are different to (un)ordered lists as they don’t use <li> elements to mark up list items but <dt> (definition term) and <dd> (definition description) elements. each term is put into one <dt> element, its definition goes in the <dd> element directly following it.\ndefinition lists are typically used in a glossary and are easiest to use when the definitions are put in alphabetical order.\nexample: knot\na knot is a unit of speed equaling 1\nnautical mile per hour (1.15 miles per hour or 1.852\nkilometers per hour).\nport\nport is the nautical term (used on\nboats and ships) that refers to the left side\nof a ship, as perceived by a person facing towards\nthe bow (the front of the vessel).\nstarboard\nstarboard is the nautical term (used\non boats and ships) that refers to the right\nside of a vessel, as perceived by a person\nfacing towards the bow (the front of the vessel).\ncode snippet: <dl>\n<dt>knot</dt>\n<dd>\n<p>a <em>knot</em> is a unit of speed equaling 1 nautical mile per hour (1.15 miles per hour or 1.852 kilometers per hour).</p>\n</dd>\n<dt>port</dt>\n<dd>\n<p><em>port</em> is the nautical term (used on boats and ships) that refers to the left side of a ship, as perceived by a person facing towards the bow (the front of the vessel).</p>\n</dd>\n<dt>starboard</dt>\n<dd>\n<p><em>starboard</em> is the nautical term (used on boats and ships) that refers to the right side of a vessel, as perceived by a person facing towards the bow (the front of the vessel).</p>\n</dd>\n</dl>\nidentifying a quotation as such helps clarify that the content is attributed to another author. quotes can be marked up as inline or as blocks of text.\nfor larger quotes, the <blockquote> element should be used. it can contain paragraphs, headings, and other text structure elements. the <cite> element can be used to refer to the source of the quote.\nexample: the following is an excerpt from the the story of my life by helen keller\neven in the days before my teacher came, i used to feel along the square stiff boxwood hedges, and, guided by the sense of smell, would find the first violets and lilies. there, too, after a fit of temper, i went to find comfort and to hide my hot face in the cool leaves and grass.\ncode snippet: <p>the following is an excerpt from the <cite>the story of my life</cite> by helen keller</p>\n<blockquote>\n<p>even in the days before my teacher came, i used to feel along the square stiff boxwood hedges, and, guided by the sense of smell, would find the first violets and lilies. there, too, after a fit of temper, i went to find comfort and to hide my hot face in the cool leaves and grass.</p>\n</blockquote>\nfor shorter inline quotes, the <q> element should be used.\nexample: helen keller said, self-pity is our worst enemy and if we yield to it, we can never do anything good in the world.\ncode snippet: <p>helen keller said, <q>self-pity is our worst enemy and if we yield to it, we can never do anything good in the world.</q></p>\nnote: in older browsers adding quotes automatically wasn’t well supported. if such a browser is to be supported, consider adding quotes to the text manually and removing generated quotes in modern browsers:\ncode snippet: q:before { content: \"\"; }\nq:after { content: \"\"; }\nfigures are an addition to html5 that allows captions to be associated with lists, images, tables, and other content. for example an annual report could reference to a table, which contains the sales volumes of a product. it allows users to dive deeper in the data or to skip it. the related content is wrapped in a <figure> element, a <figcaption> element is added that has the description of the content.\nat the time of writing, wai-aria attributes role=\"group\" and aria-labelledby are used to provide the information to assistive technologies in a consistent way.\ncode snippet: <p>the sales volume of our spacebear product was steadily the first three quarters but had a huge success in quarter four with the introduction of superbear in time for the holiday season. see table t3 for details.</p>\n<figure role=\"group\" aria-labelledby=\"fig-t3-capt\">\n<figcaption id=\"fig-t3-capt\">t3: spacebear sales volume</figcaption>\n<table>\n…\n</table>\n</figure>\nusing images and illustrations in the text can help guiding users, especially in long texts. they can also help to clarify the text for people with reading disabilities. if images or illustrations are used, proper alternative texts need to be added. see the images tutorial for more information on images.\nfor structured data, data tables provide a useful way to display the data in a way that can be accessed by everyone, including people with disabilities. to apply meaning to the data contained in the table, they need to be marked up properly. see the tables tutorial for more information on tables.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\ng62: providing a glossary\nh40: using definition lists\nh48: using ol, ul and dl for lists or groups of links\nh49: using semantic markup to mark emphasized or special text\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\n[draft] updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/page-structure/styling/":{"title":"\n  Styling\n\n\n       • Page Structure\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["visual clarity","font size","text alignment","line length","highlight section","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nstyling\n• page structure\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nstyling\nstatus: this is an in-progress, unapproved draft.\nweb pages with many components can distract from the main content or purpose of the page, which is especially useful for users that can’t concentrate very well. the main content’s headline should have a distinct visual style that invites the reader to look at the main content first.\nall headings should be styled differently to the body text. separating key sections of the page using background colors or borders can also help users to separate main from auxiliary content.\nthe user needs to be able to resize the text to 200% of its size anywhere on the page, without the text being cut off or overlapping other text. the font size should be defined in relative units, such as percentages, em or rem. it is not possible to zoom text set in pixels independently from the rest of the page in some browsers. while the other units calculate the font size from the parent element, rem calculates the font size from the root element. consider the following two declarations:\ncode snippet: em unit\n(the px values assume that the root font-size is 16px.)\n.content {\nfont-size: 1.25em; /* 16px × 1.25 = 20px */\n}\n.content h1 {\nfont-size: 1.25em; /* 16px × 1.25 × 1.25 = 25px */\n}\nthe container with the class content has a font size that is 1.25 times the font size of its parent element (which we assume is the body). the <h1> heading in the content area is 1.25 times than the font size in its parent container (.content). to achieve the same result using the rem units, the following code is used.\ncode snippet: rem unit\n(the px values assume that the root font-size is 16px.)\n.content {\nfont-size: 1.25rem; /* 16px × 1.25 = 20px */\n}\n.content h1 {\nfont-size: 1.5625rem; /* 16px × 1.5625 = 25px */\n}\nwhile the resulting number for the font-size property is more complicated, only one step of calculation needs to be performed which makes setting font-sizes more predictable for developers.\nmain body text should be aligned to one side of the page, usually left in left-to-right languages. this makes the text easy to discover for people using text resizing or zoom. if the text doesn’t start at the same point on the left side, it is also hard to read for users that are not proficient reading text in this language or have a learning disability.\ncentered or justified longer pieces of text can be hard to read as well. justified text adds space in between words that can cause rivers of white space through lines making reading difficult for some users with dyslexia. if hyphenation is supported this can reduce this effect but hyphenated words can be a barrier for many readers.\na line of text shouldn’t be longer than 80 characters. this helps users with certain reading or visual disabilities that have trouble keeping their place when reading long lines of text. if the width of the text container is resized, it should be allowed to scale in a way so 80 characters or less are shown. an easy way to do this is using max-width: 70em in css. another way to ensure good line-length is to use a fluid layout or apply responsive web design techniques that allow the user to resize the window to find a comfortable line length.\nthe html5 <mark> element can be used to highlight sections of text. by default the text is just highlighted by color. it is not supported by assistive technology at the time of writing. it can, however, be used to mark auxiliary information, like a section that is currently read by a page reading plugin. also search terms can be highlighted in a list of articles to allow better visual orientation.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n1.4.4 resize text: except for captions and images of text, text can be resized without assistive technology up to 200 percent without loss of content or functionality. (level aa)\ntechniques:\nc12: using percent for font sizes\nc13: using named font sizes\nc14: using em units for font sizes\nc20: using relative measurements to set column widths so that lines can average 80 characters or less when the browser is resized\nc28: specifying the size of text containers using em units\ng179: ensuring that there is no loss of content or functionality when the text resizes and text containers do not change their width\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\n[draft] updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/page-structure/in-page-navigation/":{"title":"\n  In-page Navigation\n\n\n       • Page Structure\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["anchors","skip links","table of contents","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nin-page navigation\n• page structure\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nin-page navigation\nstatus: this is an in-progress, unapproved draft.\nnavigation inside individual pages can help users to orient themselves on the page. such in-page navigation can also provide users with useful links to sections in the page that are hard to discover. a page with in-page links to content also make it easier to refer to that specific content when shared.\neverything with an id attribute can be used as an anchor that can be linked to. if the main content is using <div id=\"content\">, attaching #content to the url will scroll the main content into view and focus on it. this can be helpful to people who bookmark commonly used pages to jump directly to the section of the page of interest. for example, creating a bookmark to the first news item on a news listing page.\nif possible, make those anchors visible by adding permalinks to the page. in this tutorial, you can find permalinks in every heading. they are shown visually by the pilcrow symbol (¶) and with a title attribute that says “permalink”.\nskip links are historically needed to jump to different sections on the page. they were used before landmarks were implemented in browsers and assistive technologies and can still be useful in some situations.\nthese tutorials for example have a visually hidden link to the navigation that allows the user to jump directly to the navigation, which comes after the main content of the page. this skip link is hidden by default but made visible as soon as it is focused to not confuse visual keyboard users.\ncode snippet: <a href=\"#navigation\" class=\"visuallyhidden focusable\">jump to navigation</a>\nif the viewport is so small that only one column fits on the screen (for example on mobiles or when zoom is enabled), the link stays visible to allow users to jump to the navigation menu on the bottom of the page.\na table of contents can be a useful way to skim the page by providing an outline for the user. usually it should be contained in a navigation landmark, so it can be easily discovered. the “on this page” box on every tutorial page is an example for such a table of contents. the anchors on every heading are used to allow users to skip to those headings in the text.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n2.4.1 bypass blocks: a mechanism is available to bypass blocks of content that are repeated on multiple web pages. (level a)\ntechniques:\ng1: adding a link at the top of each page that goes directly to the main content area\ng64: providing a table of contents\ng124: adding links at the top of the page to each area of the content\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\n[draft] updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/menus/structure/":{"title":"\n  Menu Structure\n\n\n       • Menus\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["list of links","unordered list","ordered list","identifying the menu","labeling navigations","using a (hidden) heading","using aria-label","using a heading and aria-labelledby","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nmenu structure\n• menus\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nmenu structure\nsemantic markup of menus makes them more easily adaptable to different situations such as display on small screens, zoomed in, or for assistive technologies by conveying the menu structure to users.\nif a navigation consists of more than a few links, using a list of links is the most effective way to convey the menu structure to users. for example, lists help assistive technologies to announce how many items are in the menu and also provide possibilities to adapt to user needs.\nfor websites where the order in which the user reads the pages doesn’t matter, an unordered list (<ul>) should be used. in the following example, the user is not required to read the home page before advancing to the shop or get information about the products to make sense of the website as a whole. most navigational and application menus are unordered.\ncode snippet: html\n<ul>\n<li><a href=\"…\">home</a></li>\n<li><a href=\"…\">shop</a></li>\n<li><a href=\"…\">spacebears</a></li>\n<li><a href=\"…\">marscars</a></li>\n<li><a href=\"…\">contact</a></li>\n…\n</ul>\nin some instances, pages need to be read in a certain order, for example if the menu provides access to chapters in prose or steps to take while constructing something. in the example below, following the order is important to properly build the space ship.\ncode snippet: html\n<ol>\n<li><a href=\"…\">unpacking the space craft</a></li>\n<li><a href=\"…\">check contents of package</a></li>\n<li><a href=\"…\">build chassis</a></li>\n<li><a href=\"…\">build engine</a></li>\n<li><a href=\"…\">mount engine to chassis</a></li>\n…\n</ol>\nto identify the menu, there are additional special elements and attributes in html and wai-aria that, for example, enable users of assistive technology to jump directly to the menu. to enable this functionality, a wai-aria landmark role of navigation should be added to the element wrapping the navigation links.\ncode snippet: html\n<div role=\"navigation\">…</div>\nif html5 is used, the <nav> element is supposed to apply the landmark role implicitly. as some browser don’t do this at the time of writing, and to improve the experience for users with older browsers, the navigation role should be added as well.\ncode snippet: html\n<nav role=\"navigation\">…</nav>\nnote: role and other aria attributes won’t validate in html4. if valid html4 needs to be provided, the aria attributes can be added to the html dynamically using javascript. if that is also no possibility, provide a heading to enable users to find the menu easily.\nto make it easier to find menus, they should be labeled according to their individual function. this helps to distinguish between multiple navigational menus on a page. such labels can be invisible to users that experience the website visually. such labels can also be used by assistive technology to enable jumping directly to navigation landmarks or headings.\nusers that use headings to find relevant sections on web pages, for example screen reader users, can discover the menu easily if a heading is provided.\ncode snippet: html\n<nav role=\"navigation\">\n<h2 class=\"visuallyhidden\">main menu</h2>\n</nav>\nnote that the heading can not be hidden using display: none; or visually: hidden; as both also hide content from screen readers. use absolute positioning and a negative margin to hide the text from screen or use this code snippet which does the same:\ncode snippet: css\n.visuallyhidden {\nborder: 0;\nclip: rect(0 0 0 0);\nheight: 1px;\nmargin: -1px;\noverflow: hidden;\npadding: 0;\nposition: absolute;\nwidth: 1px;\n}\nthe aria-label provides a description of the section to users that use landmarks to navigate the page. this approach makes it possible to use headings only in the main content of the page. the label of the menu is announced when entering the menu as well as when navigating to it.\ncode snippet: html\n<nav role=\"navigation\" aria-label=\"main menu\">\n</nav>\nto cover both use cases (navigating by headers and navigating by landmarks), the aria-labelledby attribute can be used to reference the heading inside the menu.\ncode snippet: html\n<nav role=\"navigation\" aria-labelledby=\"mainmenulabel\">\n<h2 id=\"mainmenulabel\">main menu</h2>\n</nav>\nnote: some browsers and assistive technologies might announce the name of the menu two times, when the user enters the menu.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n4.1.2 name, role, value: for all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (level a)\ntechniques:\naria6: using aria-label to provide labels for objects\naria11: using aria landmarks to identify regions of a page\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\ndraft, approved by eowg, updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/menus/flyout/":{"title":"\n  Fly-out Menus\n\n\n       • Menus\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["enhancing the menu using javascript","improve mouse support","improve keyboard support","improve screen reader support using wai-aria","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nfly-out menus\n• menus\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nfly-out menus\nif the user should be able to access pages deep in the website’s structure, fly-out menus are frequently used to archive the desired effect. such fly-out menus are often called dropdown menus.\nas interactive components, fly-out menus need to be developed with accessibility in mind to make sure that they are operable using the keyboard as well. hiding menu items not displayed from keyboards and assistive technologies makes sure that the menu can be easily navigated. for people with reduced dexterity it is also important that submenus don’t snap back immediately when the mouse leaves the clickable area.\nusually the first-level menu items are links to individual pages whether they have a submenu or not. the submenu should then be duplicated as a secondary navigation on the linked web page to make sure that those pages are quickly reachable from there. submenus are individual lists (<ul> or <ol>), nested in the parent’s list item (<li>).\nitems containing a submenu should be marked in a way that is obvious. in the following example, the spacebears menu item has a submenu:\nexample: .show-overflow {\noverflow: visible !important;\n}\n.show-overflow .box-content {\noverflow: visible !important;\n}\n#flyoutnav {\ndisplay:table;\nwidth:100%;\n}\n#flyoutnav > ul {\nmargin: 0;\npadding: 0;\ndisplay: table-row;\nbackground-color: #036;\ncolor: #fff;\n}\n#flyoutnav > ul > li {\ndisplay:table-cell;\nwidth: 20%;\ntext-align: center;\nposition:relative;\n}\n#flyoutnav a,\n#flyoutnav .current {\ndisplay: block;\npadding: .25em;\nborder-bottom: .25em solid #e8e8e8;\n}\n#flyoutnav a {\ncolor: #fff;\ntext-decoration: none;\n}\n#flyoutnav a:hover,\n#flyoutnav a:focus {\nbackground-color: #fff;\ncolor: #036;\nborder-color: #036;\ntext-decoration: underline;\n}\n#flyoutnav .current {\nbackground-color: #bbb;\ncolor: #000;\nborder-color: #444;\n}\n#flyoutnav > ul > li > ul {\ndisplay: none;\nposition:absolute;\nleft:0;\nright:0;\ntop:100%;\npadding:0;\nmargin:0;\nbackground-color: #036;\n}\n#flyoutnav > ul > li:hover > ul {\ndisplay:block;\n}\n#flyoutnav > ul > li > ul a{\nborder-bottom-width: 1px;\n}\n.has-submenu > a:after {\nmargin-left: 5px;\nline-height: 14px;\ncontent: url(../../img/ex-dropdown-inactive-63feea50.png);\n}\n.has-submenu:hover > a:hover:after,\n.has-submenu > a:focus:after {\ncontent: url(../../img/ex-dropdown-active-364145a2.png);\n}\ncode snippet: html\n<nav role=\"navigation\" aria-label=\"main navigation\">\n<ul>\n<li><a href=\"…\">home</a></li>\n<li><a href=\"…\">shop</a></li>\n<li class=\"has-submenu\">\n<a href=\"…\">spacebears</a>\n<ul>\n<li><a href=\"…\">spacebear 6</a></li>\n<li><a href=\"…\">spacebear 6 plus</a></li>\n</ul>\n</li>\n<li><a href=\"…\">marscars</a></li>\n<li><a href=\"…\">contact</a></li>\n</ul>\n</nav>\nfor mouse users, hiding the submenu until the mouse hovers over the first-level menu item is quite easy, but has the disadvantage that the menu immediately closes once the mouse leaves the list item (and the containing submenu).\ncode snippet: css\nnav > ul li ul {\ndisplay: none;\n}\nnav > ul li:hover ul {\ndisplay: block;\n}\nby using javascript, it is possible to react to keyboard usage and abrupt mouse movements. as soon as the mouse leaves the menu a timer is started which closes the menu after one second. if the mouse re-enters the submenu again, the timer is canceled.\nexample: .show-overflow {\noverflow: visible !important;\n}\n.show-overflow .box-content {\noverflow: visible !important;\n}\n#flyoutnavmousefixed {\ndisplay:table;\nwidth:100%;\n}\n#flyoutnavmousefixed > ul {\nmargin: 0;\npadding: 0;\ndisplay: table-row;\nbackground-color: #036;\ncolor: #fff;\n}\n#flyoutnavmousefixed > ul > li {\ndisplay:table-cell;\nwidth: 20%;\ntext-align: center;\nposition:relative;\n}\n#flyoutnavmousefixed a,\n#flyoutnavmousefixed .current {\ndisplay: block;\npadding: .25em;\nborder-color: #e8e8e8;\n}\n#flyoutnavmousefixed a {\ncolor: #fff;\ntext-decoration: none;\n}\n#flyoutnavmousefixed a:hover,\n#flyoutnavmousefixed a:focus {\nbackground-color: #fff;\ncolor: #036;\nborder: 1px solid #036;\ntext-decoration: underline;\n}\n#flyoutnavmousefixed .current {\nbackground-color: #bbb;\ncolor: #000;\nborder-color: #444;\n}\n#flyoutnavmousefixed > ul > li > ul {\ndisplay: none;\nposition:absolute;\nleft:0;\nright:0;\ntop:100%;\npadding:0;\nmargin:0;\nbackground-color: #036;\n}\n#flyoutnavmousefixed > ul > li.open > ul {\ndisplay:block;\n}\n#flyoutnavmousefixed > ul > li > ul a{\nborder-bottom-width: 1px;\n}\nvar menuitems1 = document.queryselectorall('#flyoutnavmousefixed li.has-submenu');\nvar timer1;\narray.prototype.foreach.call(menuitems1, function(el, i){\nel.addeventlistener(\"mouseover\", function(event){\nthis.classname = \"has-submenu open\";\ncleartimeout(timer1);\n});\nel.addeventlistener(\"mouseout\", function(event){\ntimer1 = settimeout(function(event){\ndocument.queryselector(\"#flyoutnavmousefixed .has-submenu.open\").classname = \"has-submenu\";\n}, 1000);\n});\n});\ncode snippet: javascript\narray.prototype.foreach.call(menuitems, function(el, i){\nel.addeventlistener(\"mouseover\", function(event){\nthis.classname = \"has-submenu open\";\ncleartimeout(timer);\n});\nel.addeventlistener(\"mouseout\", function(event){\ntimer = settimeout(function(event){\ndocument.queryselector(\".has-submenu.open\").classname = \"has-submenu\";\n}, 1000);\n});\n});\nto improve keyboard support, the decision has to be made if the top-level menu item should serve as a toggle for the menu for all users or be a link itself. don’t open the submenu as soon as the focus enters the top-level menu item, as that would mean a keyboard user needs to step through all the submenu links to get to the next top-level item.\ntoggle submenu using the top-level menu item\nthe activation of the top-level menu item won’t link to the page in its href attribute but instead show the sub menu. a script stops the browser from following the link to the page. if the focus leaves the submenu (for example by using the tab key on the last submenu item), the submenu needs to close.\nexample: .show-overflow {\noverflow: visible !important;\n}\n.show-overflow .box-content {\noverflow: visible !important;\n}\n#flyoutnavkbfixed {\ndisplay:table;\nwidth:100%;\n}\n#flyoutnavkbfixed > ul {\nmargin: 0;\npadding: 0;\ndisplay: table-row;\nbackground-color: #036;\ncolor: #fff;\n}\n#flyoutnavkbfixed > ul > li {\ndisplay:table-cell;\nwidth: 20%;\ntext-align: center;\nposition:relative;\n}\n#flyoutnavkbfixed a,\n#flyoutnavkbfixed .current {\ndisplay: block;\npadding: .25em;\nborder-color: #e8e8e8;\n}\n#flyoutnavkbfixed a {\ncolor: #fff;\ntext-decoration: none;\n}\n#flyoutnavkbfixed a:hover,\n#flyoutnavkbfixed a:focus {\nbackground-color: #fff;\ncolor: #036;\nborder: 1px solid #036;\ntext-decoration: underline;\n}\n#flyoutnavkbfixed .current {\nbackground-color: #bbb;\ncolor: #000;\nborder-color: #444;\n}\n#flyoutnavkbfixed > ul > li > ul {\ndisplay: none;\nposition:absolute;\nleft:0;\nright:0;\ntop:100%;\npadding:0;\nmargin:0;\nbackground-color: #036;\n}\n#flyoutnavkbfixed > ul > li.open > ul {\ndisplay:block;\n}\n#flyoutnavkbfixed > ul > li > ul a{\nborder-bottom-width: 1px;\n}\n/* focusin/out event polyfill (firefox) */\n!function(){\nvar w = window,\nd = w.document;\nif( w.onfocusin === undefined ){\nd.addeventlistener('focus' ,addpolyfill ,true);\nd.addeventlistener('blur' ,addpolyfill ,true);\nd.addeventlistener('focusin' ,removepolyfill ,true);\nd.addeventlistener('focusout' ,removepolyfill ,true);\n}\nfunction addpolyfill(e){\nvar type = e.type === 'focus' ? 'focusin' : 'focusout';\nvar event = new customevent(type, { bubbles:true, cancelable:false });\nevent.c1generated = true;\ne.target.dispatchevent( event );\n}\nfunction removepolyfill(e){\nif(!e.c1generated){ // focus after focusin, so chrome will the first time trigger tow times focusin\nd.removeeventlistener('focus' ,addpolyfill ,true);\nd.removeeventlistener('blur' ,addpolyfill ,true);\nd.removeeventlistener('focusin' ,removepolyfill ,true);\nd.removeeventlistener('focusout' ,removepolyfill ,true);\n}\nsettimeout(function(){\nd.removeeventlistener('focusin' ,removepolyfill ,true);\nd.removeeventlistener('focusout' ,removepolyfill ,true);\n});\n}\n}();\nfunction hasclass(el, classname) {\nif (el.classlist) {\nreturn el.classlist.contains(classname);\n} else {\nreturn new regexp('(^| )' + classname + '( |$)', 'gi').test(el.classname);\n}\n}\nvar menuitems1 = document.queryselectorall('#flyoutnavkbfixed li.has-submenu');\nvar timer1, timer2;\narray.prototype.foreach.call(menuitems1, function(el, i){\nel.addeventlistener(\"mouseover\", function(event){\nthis.classname = \"has-submenu open\";\ncleartimeout(timer1);\n});\nel.addeventlistener(\"mouseout\", function(event){\ntimer1 = settimeout(function(event){\ndocument.queryselector(\"#flyoutnavkbfixed .has-submenu.open\").classname = \"has-submenu\";\n}, 1000);\n});\nel.queryselector('a').addeventlistener(\"click\", function(event){\nif (this.parentnode.classname == \"has-submenu\") {\nthis.parentnode.classname = \"has-submenu open\";\n} else {\nthis.parentnode.classname = \"has-submenu\";\n}\nevent.preventdefault();\n});\nvar links = el.queryselectorall('a');\narray.prototype.foreach.call(links, function(el, i){\nel.addeventlistener(\"focus\", function() {\nif (timer2) {\ncleartimeout(timer2);\ntimer2 = null;\n}\n});\nel.addeventlistener(\"blur\", function(event) {\ntimer2 = settimeout(function () {\nvar opennav = document.queryselector(\"#flyoutnavkbfixed .has-submenu.open\")\nif (opennav) {\nopennav.classname = \"has-submenu\";\n}\n}, 10);\n});\n});\n});\nthe following code iterates through all menu items and adds click event to the first (top-level) link in each menu item. the click event fires regardless of input method as soon as the link gets activated. if the submenu is closed when the link is activated, the script opens the submenu, and vice versa.\ncode snippet: javascript\narray.prototype.foreach.call(menuitems, function(el, i){\nel.queryselector('a').addeventlistener(\"click\", function(event){\nif (this.parentnode.classname == \"has-submenu\") {\nthis.parentnode.classname = \"has-submenu open\";\n} else {\nthis.parentnode.classname = \"has-submenu\";\n}\nevent.preventdefault();\nreturn false;\n});\n});\ntoggle submenu using a special “show submenu” button\nif the top-level menu item should stay a link to a page, adding a separate button that toggles the submenu is the most reliable way to address the issue.\nexample: .show-overflow {\noverflow: visible !important;\n}\n.show-overflow .box-content {\noverflow: visible !important;\n}\n#flyoutnavkbbtn {\ndisplay:table;\nwidth:100%;\n}\n#flyoutnavkbbtn > ul {\nmargin: 0;\npadding: 0;\ndisplay: table-row;\nbackground-color: #036;\ncolor: #fff;\n}\n#flyoutnavkbbtn > ul > li {\ndisplay:table-cell;\nwidth: 20%;\ntext-align: center;\nposition:relative;\n}\n#flyoutnavkbbtn a,\n#flyoutnavkbbtn .current {\ndisplay: block;\npadding: .25em;\nborder-color: #e8e8e8;\n}\n#flyoutnavkbbtn a {\ncolor: #fff;\ntext-decoration: none;\n}\n#flyoutnavkbbtn a:hover,\n#flyoutnavkbbtn a:focus {\nbackground-color: #fff;\ncolor: #036;\nborder: 1px solid #036;\ntext-decoration: underline;\n}\n#flyoutnavkbbtn .current {\nbackground-color: #bbb;\ncolor: #000;\nborder-color: #444;\n}\n#flyoutnavkbbtn > ul > li > ul {\ndisplay: none;\nposition:absolute;\nleft:0;\nright:0;\ntop:100%;\npadding:0;\nmargin:0;\nbackground-color: #036;\n}\n#flyoutnavkbbtn > ul > li.open > ul {\ndisplay:block;\n}\n#flyoutnavkbbtn > ul > li > ul a{\nborder-bottom-width: 1px;\n}\n#flyoutnavkbbtn .has-submenu > a:after {\nmargin-left: 5px;\nline-height: 14px;\ncontent: '';\n}\n#flyoutnavkbbtn .has-submenu:hover > a:hover:after,\n#flyoutnavkbbtn .has-submenu > a:focus:after {\ncontent: '';\n}\n#flyoutnavkbbtn .has-submenu button {\nbackground-color: transparent;\nborder: none;\npadding:0;\nline-height: 1;\npadding: 3px;\n}\n#flyoutnavkbbtn .has-submenu button > span {\ndisplay:inline-block;\nwidth: .8em;\nheight: .8em;\nbackground: url(../../img/ex-dropdown-inactive-63feea50.png) center no-repeat;\n}\n#flyoutnavkbbtn .has-submenu button:hover > span,\n#flyoutnavkbbtn .has-submenu button:focus > span {\nbackground: url(../../img/ex-dropdown-active-364145a2.png) #fff;\n}\n#flyoutnavkbbtn .has-submenu:hover button,\n#flyoutnavkbbtn .has-submenu a:focus button {\nbackground-color: #036;\n}\n#flyoutnavkbbtn .has-submenu button:focus {\nbackground: #fff;\n}\n/* focusin/out event polyfill (firefox) */\n!function(){\nvar w = window,\nd = w.document;\nif( w.onfocusin === undefined ){\nd.addeventlistener('focus' ,addpolyfill ,true);\nd.addeventlistener('blur' ,addpolyfill ,true);\nd.addeventlistener('focusin' ,removepolyfill ,true);\nd.addeventlistener('focusout' ,removepolyfill ,true);\n}\nfunction addpolyfill(e){\nvar type = e.type === 'focus' ? 'focusin' : 'focusout';\nvar event = new customevent(type, { bubbles:true, cancelable:false });\nevent.c1generated = true;\ne.target.dispatchevent( event );\n}\nfunction removepolyfill(e){\nif(!e.c1generated){ // focus after focusin, so chrome will the first time trigger tow times focusin\nd.removeeventlistener('focus' ,addpolyfill ,true);\nd.removeeventlistener('blur' ,addpolyfill ,true);\nd.removeeventlistener('focusin' ,removepolyfill ,true);\nd.removeeventlistener('focusout' ,removepolyfill ,true);\n}\nsettimeout(function(){\nd.removeeventlistener('focusin' ,removepolyfill ,true);\nd.removeeventlistener('focusout' ,removepolyfill ,true);\n});\n}\n}();\nfunction hasclass(el, classname) {\nif (el.classlist) {\nreturn el.classlist.contains(classname);\n} else {\nreturn new regexp('(^| )' + classname + '( |$)', 'gi').test(el.classname);\n}\n}\nvar menuitems1 = document.queryselectorall('#flyoutnavkbbtn li.has-submenu');\nvar timer1, timer2;\nvar parsehtml = function(str) {\nvar tmp = document.implementation.createhtmldocument();\ntmp.body.innerhtml = str;\nreturn tmp.body.children;\n};\narray.prototype.foreach.call(menuitems1, function(el, i){\nvar btn = '<button><span><span class=\"visuallyhidden\">show submenu</span></span></button>';\nvar activatinga = el.queryselector('a')\nactivatinga.innerhtml = activatinga.innerhtml + ' ' + btn;\nel.addeventlistener(\"mouseover\", function(event){\nthis.classname = \"has-submenu open\";\ncleartimeout(timer1);\n});\nel.addeventlistener(\"mouseout\", function(event){\ntimer1 = settimeout(function(event){\ndocument.queryselector(\"#flyoutnavkbbtn .has-submenu.open\").classname = \"has-submenu\";\n}, 1000);\n});\nel.queryselector('a button').addeventlistener(\"click\", function(event){\nif (this.parentnode.parentnode.classname == \"has-submenu\") {\nthis.parentnode.parentnode.classname = \"has-submenu open\";\n} else {\nthis.parentnode.parentnode.classname = \"has-submenu\";\n}\nevent.preventdefault();\n});\nvar links = el.queryselectorall('a');\narray.prototype.foreach.call(links, function(el, i){\nel.addeventlistener(\"focus\", function() {\nif (timer2) {\ncleartimeout(timer2);\ntimer2 = null;\n}\n});\nel.addeventlistener(\"blur\", function(event) {\ntimer2 = settimeout(function () {\nvar opennav = document.queryselector(\"#flyoutnavkbbtn .has-submenu.open\")\nif (opennav) {\nopennav.classname = \"has-submenu\";\n}\n}, 10);\n});\n});\n});\nin the following code, a button is attached to every menu item link with a submenu. the click event listener is applied to this button and toggles the menu. the invisible button text is changed from show to hide submenu according to the state of the submenu.\ncode snippet: javascript\narray.prototype.foreach.call(menuitems, function(el, i){\nvar btn = '<button><span><span class=\"visuallyhidden\">show submenu</span></span></button>';\nvar toplevellink = el.queryselector('a');\ntoplevellink.innerhtml = toplevellink.innerhtml + ' ' + btn;\nel.queryselector('a button').addeventlistener(\"click\", function(event){\nif (this.parentnode.parentnode.classname == \"has-submenu\") {\nthis.parentnode.parentnode.classname = \"has-submenu open\";\nthis.queryselector('.visuallyhidden').innertext = 'hide submenu';\n} else {\nthis.parentnode.parentnode.classname = \"has-submenu\";\nthis.queryselector('.visuallyhidden').innertext = 'show submenu';\n}\nevent.preventdefault();\n});\n});\ncurrently, screen reader users are unable to tell if an item has a submenu or not and if it is opened. wai-aria helps to convey this information by adding the following two attributes to the menu’s html:\naria-haspopup=\"true\" is used so screen readers are able to announce that the link has a submenu.\naria-expanded is initially set to false but changed to true when the submenu opens which forces screen readers to announce that this menu item is now expanded.\nexample: .show-overflow {\noverflow: visible !important;\n}\n.show-overflow .box-content {\noverflow: visible !important;\n}\n#flyoutaria {\ndisplay:table;\nwidth:100%;\n}\n#flyoutaria > ul {\nmargin: 0;\npadding: 0;\ndisplay: table-row;\nbackground-color: #036;\ncolor: #fff;\n}\n#flyoutaria > ul > li {\ndisplay:table-cell;\nwidth: 20%;\ntext-align: center;\nposition:relative;\n}\n#flyoutaria a,\n#flyoutaria .current {\ndisplay: block;\npadding: .25em;\nborder-color: #e8e8e8;\n}\n#flyoutaria a {\ncolor: #fff;\ntext-decoration: none;\n}\n#flyoutaria a:hover,\n#flyoutaria a:focus {\nbackground-color: #fff;\ncolor: #036;\nborder: 1px solid #036;\ntext-decoration: underline;\n}\n#flyoutaria .current {\nbackground-color: #bbb;\ncolor: #000;\nborder-color: #444;\n}\n#flyoutaria > ul > li > ul {\ndisplay: none;\nposition:absolute;\nleft:0;\nright:0;\ntop:100%;\npadding:0;\nmargin:0;\nbackground-color: #036;\n}\n#flyoutaria > ul > li.open > ul {\ndisplay:block;\n}\n#flyoutaria > ul > li > ul a{\nborder-bottom-width: 1px;\n}\n/* focusin/out event polyfill (firefox) */\n!function(){\nvar w = window,\nd = w.document;\nif( w.onfocusin === undefined ){\nd.addeventlistener('focus' ,addpolyfill ,true);\nd.addeventlistener('blur' ,addpolyfill ,true);\nd.addeventlistener('focusin' ,removepolyfill ,true);\nd.addeventlistener('focusout' ,removepolyfill ,true);\n}\nfunction addpolyfill(e){\nvar type = e.type === 'focus' ? 'focusin' : 'focusout';\nvar event = new customevent(type, { bubbles:true, cancelable:false });\nevent.c1generated = true;\ne.target.dispatchevent( event );\n}\nfunction removepolyfill(e){\nif(!e.c1generated){ // focus after focusin, so chrome will the first time trigger tow times focusin\nd.removeeventlistener('focus' ,addpolyfill ,true);\nd.removeeventlistener('blur' ,addpolyfill ,true);\nd.removeeventlistener('focusin' ,removepolyfill ,true);\nd.removeeventlistener('focusout' ,removepolyfill ,true);\n}\nsettimeout(function(){\nd.removeeventlistener('focusin' ,removepolyfill ,true);\nd.removeeventlistener('focusout' ,removepolyfill ,true);\n});\n}\n}();\nfunction hasclass(el, classname) {\nif (el.classlist) {\nreturn el.classlist.contains(classname);\n} else {\nreturn new regexp('(^| )' + classname + '( |$)', 'gi').test(el.classname);\n}\n}\nvar menuitems1 = document.queryselectorall('#flyoutaria li.has-submenu');\nvar timer1, timer2;\narray.prototype.foreach.call(menuitems1, function(el, i){\nel.addeventlistener(\"mouseover\", function(event){\nthis.classname = \"has-submenu open\";\ncleartimeout(timer1);\n});\nel.addeventlistener(\"mouseout\", function(event){\ntimer1 = settimeout(function(event){\ndocument.queryselector(\"#flyoutaria .has-submenu.open\").classname = \"has-submenu\";\n}, 1000);\n});\nel.queryselector('a').addeventlistener(\"click\", function(event){\nif (this.parentnode.classname == \"has-submenu\") {\nthis.parentnode.classname = \"has-submenu open\";\nthis.setattribute('aria-expanded', \"true\");\n} else {\nthis.parentnode.classname = \"has-submenu\";\nthis.setattribute('aria-expanded', \"false\");\n}\nevent.preventdefault();\nreturn false;\n});\nvar links = el.queryselectorall('a');\narray.prototype.foreach.call(links, function(el, i){\nel.addeventlistener(\"focus\", function() {\nif (timer2) {\ncleartimeout(timer2);\ntimer2 = null;\n}\n});\nel.addeventlistener(\"blur\", function(event) {\ntimer2 = settimeout(function () {\nvar opennav = document.queryselector(\"#flyoutaria .has-submenu.open\")\nif (opennav) {\nopennav.classname = \"has-submenu\";\ndocument.queryselector(\"#flyoutaria .has-submenu.open [aria-expanded]\").setattribute('aria-expanded', \"false\");\n}\n}, 10);\n});\n});\n});\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nh4: creating a logical tab order through links, form controls, and objects\nscr26: inserting dynamic content into the document object model immediately following its trigger element\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\ndraft, approved by eowg, updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/menus/multiple-ways/":{"title":"\n  Multiple Ways\n\n\n       • Menus\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["breadcrumbs","sitemap","search","multiple ways to activate functions in applications","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nmultiple ways\n• menus\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nmultiple ways\nfor many users having different ways to access the content of a website is beneficial. they are probably become confused by following a long series of navigation steps to a web page. others might arrive on a page deep in the hierarchy after clicking a link on the site or other sites and want to move up the hierarchy step by step to get a better context.\nbreadcrumbs help users to know where they are in the structure of the complete website. they are especially important on complex websites that have more than one or two levels of navigation.\nlinks in a breadcrumb navigation show a trail from the front page to the current page, with a link to every page on the way. those links are usually separated by arrows. if images or icon fonts are used for the separators, they need to be used in an accessible way. the title of the current page should be the last item of the breadcrumb navigation, but not linked.\na breadcrumb navigation is usually positioned near the top of the page. as a navigational region, the <nav> element can be used, with an landmark role of navigation and a label “you are here:”.\ncode snippet: <nav class=\"breadcrumb\" role=\"navigation\" aria-label=\"you are here:\">\n<a href=\"…\">home</a>\n&gt;\n<a href=\"…\">spacebears</a>\n&gt;\n<span class=\"current\">\n<span class=\"visuallyhidden\">current: </span>\ncpt. space 6 plus\n</span>\n</nav>\na sitemap is a list of all pages of a website. it provides a good way to get a feeling for the structure of the website and can help users to understand what the site contains and how content is organized. it also is an alternative to complex menu bars.\nsimple sitemaps just show an outline view, while more complex sitemaps might also show complex relationship data as well. if the site map is large, it can make sense to show some levels of the hierarchy only when demanded from the user. a sitemap needs to stay updated when a page is added or deleted, should link to all sections of the site, and present the organization of the website. see the w3c wai sitemap for an example.\na search option helps users to find content by entering certain keywords, which is often more efficient than going through the complete navigation and search for pages whose page title vaguely relates to the topic the user has in mind. a search functionality that spell-checks the entered terms and allows synonyms further increases its accessibility.\nin addition to a menubar, similar functions can often be found in other sections of the application as well. for example functions can be activated by clicking icons, using the mouse context menu, or activating a keyboard shortcut.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n2.4.8 location: information about the user's location within a set of web pages is available. (level aaa)\ntechniques:\ng63: providing a site map\ng65: providing a breadcrumb trail\ng127: identifying a web page’s relationship to a larger collection of web pages\ng161: providing a search function to help users find content\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\ndraft, approved by eowg, updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/menus/application/":{"title":"\n  Web Application Menus\n\n\n       • Menus\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["we welcome your ideas","document information"],"0.3,tutorial,example":["\nweb application menus\n• menus\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nweb application menus\nweb application menus have a similar basis to navigation menus. they often consist of a horizontal menu bar and use fly-out functionality. there are some wai-aria roles that are helping users with assistive technology to operate menus similar to desktop software menus. when using the menu wai-aria attributes, the keyboard interaction should be similar to desktop software as well: the tab key is used to iterate through the top-level items only, the up and down arrows are used to navigate the sub menus. this keyboard behavior doesn’t come with the wai-aria attributes, but needs to be added using scripting. a detailed explanation on the wai-aria attributes and keyboard behavior can be found in the wai-aria authoring practices document (draft).\nin addition to the aria-expanded and aria-haspopup attributes, the following roles are used in the example:\naria-menubar: represents a usually horizontal menu bar.\naria-menu: represents a set of links or commands in a menu bar, it is used for the fly-out menus.\naria-menuitem: represents an individual menu item.\nexample: file\nnew\nopen\nprint\nedit\nundo\nredo\ncut\ncopy\npaste\nformat\nfont\ntext\nview\n100%\nzoom in\nzoom out\nhelp\n.show-overflow2 {\noverflow: visible !important;\nfloat: left;\nwidth: 100%;\n}\n.show-overflow2 .box-content {\noverflow: visible !important;\nfloat: left;\nwidth: 100%;\n}\n#appmenu {\nwidth:80%;\nfloat: left;\nmargin: 0;\npadding: 0;\ncolor: #fff;\nbackground-color: #369;\npadding: .25em;\n}\n#appmenu li {\nwhite-space: nowrap;\ndisplay:block;\npadding: .25em .75em;\nborder: 1px solid #fff;\n}\n#appmenu > li {\nfloat: left;\nbackground-color: #036;\ntext-align: center;\nposition:relative;\ncursor: pointer;\n}\n#appmenu :hover,\n#appmenu :focus {\nbackground-color: #fff;\ncolor: #036;\nborder: 1px solid #036;\ntext-decoration: underline;\n}\n#appmenu :hover li,\n#appmenu :focus li {\ncolor: #fff;\nbackground-color: #036;\n}\n#appmenu > li > ul {\ndisplay: none;\nposition:absolute;\nleft:0;\nright:0;\ntop:100%;\npadding:0;\nmargin:0;\nbackground-color: #036;\nwidth: 200%;\ntext-align: left;\n}\n#appmenu > li[aria-expanded=\"true\"] > ul {\ndisplay:block;\n}\nvar appsmenuitems = document.queryselectorall('#appmenu > li');\nvar submenuitems = document.queryselectorall('#appmenu > li li');\nvar keys = {\ntab: 9,\nenter: 13,\nesc: 27,\nspace: 32,\nleft: 37,\nup: 38,\nright: 39,\ndown: 40\n};\nvar currentindex, subindex;\nvar gotoindex = function(idx) {\nif (idx == appsmenuitems.length) {\nidx = 0;\n} else if (idx < 0) {\nidx = appsmenuitems.length - 1;\n}\nappsmenuitems[idx].focus();\ncurrentindex = idx;\n};\nvar gotosubindex = function (menu, idx) {\nvar items = menu.queryselectorall('li');\nif (idx == items.length) {\nidx = 0;\n} else if (idx < 0) {\nidx = items.length - 1;\n}\nitems[idx].focus();\nsubindex = idx;\n}\narray.prototype.foreach.call(appsmenuitems, function(el, i){\nif (0 == i) {\nel.setattribute('tabindex', '0');\nel.addeventlistener(\"focus\", function() {\ncurrentindex = 0;\n});\n} else {\nel.setattribute('tabindex', '-1');\n}\nel.addeventlistener(\"focus\", function() {\nsubindex = 0;\narray.prototype.foreach.call(appsmenuitems, function(el, i){\nel.setattribute('aria-expanded', \"false\");\n});\n});\nel.addeventlistener(\"click\", function(event){\nif (this.getattribute('aria-expanded') == 'false' || this.getattribute('aria-expanded') == null) {\nthis.setattribute('aria-expanded', \"true\");\n} else {\nthis.setattribute('aria-expanded', \"false\");\n}\nevent.preventdefault();\nreturn false;\n});\nel.addeventlistener(\"keydown\", function(event) {\nswitch (event.keycode) {\ncase keys.right:\ngotoindex(currentindex + 1);\nbreak;\ncase keys.left:\ngotoindex(currentindex - 1);\nbreak;\ncase keys.tab:\nif (event.shiftkey) {\ngotoindex(currentindex - 1);\n} else {\ngotoindex(currentindex + 1);\n}\nbreak;\ncase keys.enter:\ncase keys.down:\nthis.click();\nsubindex = 0;\ngotosubindex(this.queryselector('ul'), 0);\nbreak;\ncase keys.up:\nthis.click();\nvar submenu = this.queryselector('ul');\nsubindex = submenu.queryselectorall('li').length - 1;\ngotosubindex(submenu, subindex);\nbreak;\ncase keys.esc:\ndocument.queryselector('a[href=\"#related\"]').focus();\n}\nevent.preventdefault();\n});\n});\narray.prototype.foreach.call(submenuitems, function(el, i){\nel.setattribute('tabindex', '-1');\nel.addeventlistener(\"keydown\", function(event) {\nswitch (event.keycode) {\ncase keys.tab:\nif (event.shiftkey) {\ngotoindex(currentindex - 1);\n} else {\ngotoindex(currentindex + 1);\n}\nbreak;\ncase keys.right:\ngotoindex(currentindex + 1);\nbreak;\ncase keys.left:\ngotoindex(currentindex - 1);\nbreak;\ncase keys.esc:\ngotoindex(currentindex);\nbreak;\ncase keys.down:\ngotosubindex(this.parentnode, subindex + 1);\nbreak;\ncase keys.up:\ngotosubindex(this.parentnode, subindex - 1);\nbreak;\ncase keys.enter:\ncase keys.space:\nalert(this.innertext);\nbreak;\n}\nevent.preventdefault();\nevent.stoppropagation();\nreturn false;\n});\nel.addeventlistener(\"click\", function(event) {\nalert(this.innerhtml);\nevent.preventdefault();\nevent.stoppropagation();\nreturn false;\n});\n});\nthe markup has no links, it is a bare nested list with some wai-aria roles. as we will add keyboard and mouse interaction on our own, this is enough.\ncode snippet: <div role=\"menubar\">\n<ul role=\"menu\" aria-label=\"functions\" id=\"appmenu\">\n<li role=\"menuitem\" aria-haspopup=\"true\">\nfile\n<ul role=\"menu\">\n<li role=\"menuitem\">new</li>\n<li role=\"menuitem\">open</li>\n<li role=\"menuitem\">print</li>\n</ul>\n</li>\n…\n</ul>\n</div>\nfirst, we collect all top-level menu items in a variable (appsmenuitems) as well as all submenu items (submenuitems). an object is defined with the key codes of the keys that need to be handled. this makes the code much more readable. two variables keep track of the focus in top-level items (currentindex) and in submenus (subindex).\ncode snippet: var appsmenuitems = document.queryselectorall('#appmenu > li');\nvar submenuitems = document.queryselectorall('#appmenu > li li');\nvar keys = {\ntab: 9,\nenter: 13,\nesc: 27,\nspace: 32,\nleft: 37,\nup: 38,\nright: 39,\ndown: 40\n};\nvar currentindex, subindex;\nto make the menu work for keyboard users, a tabindex attribute with the value -1 is added to the menu items. this enables scripts to set the focus on the element. the first menu item (“file” in this example) is assigned a tabindex value of 0 which adds it to the tab order and lets the user access the menu. the currentindex variable is initialized as soon as this first item gets focus.\ncode snippet: array.prototype.foreach.call(appsmenuitems, function(el, i){\nif (0 == i) {\nel.setattribute('tabindex', '0');\nel.addeventlistener(\"focus\", function() {\ncurrentindex = 0;\n});\n} else {\nel.setattribute('tabindex', '-1');\n}\n});\narray.prototype.foreach.call(submenuitems, function(el, i){\nel.setattribute('tabindex', '-1');\n});\nall top-level menu items close open submenus when they receive focus and reset the subindex variable. when individual items are clicked, the visibility of the submenu is toggled by changing the aria-expanded value. if a key is pressed, the appropriate action is carried out.\nkey mapping for top-level menu items\nkey\naction\ntab ⇥\nselect the next top-level menu item\nright →\nshift ⇧ + tab ⇥\nselect the previous top-level menu item\nleft ←\nreturn/enter ↵\nopen the submenu, select first submenu item.\nspace\ndown ↓\nup ↑\nopen the submenu, select last submenu item.\nesc\nleave the menu\ncode snippet: array.prototype.foreach.call(appsmenuitems, function(el, i){\n/* code above */\nel.addeventlistener(\"focus\", function() {\nsubindex = 0;\narray.prototype.foreach.call(appsmenuitems, function(el, i){\nel.setattribute('aria-expanded', \"false\");\n});\n});\nel.addeventlistener(\"click\", function(event){\nif (this.getattribute('aria-expanded') == 'false'\n|| this.getattribute('aria-expanded') == null) {\nthis.setattribute('aria-expanded', \"true\");\n} else {\nthis.setattribute('aria-expanded', \"false\");\n}\nevent.preventdefault();\nreturn false;\n});\nel.addeventlistener(\"keydown\", function(event) {\nswitch (event.keycode) {\ncase keys.right:\ngotoindex(currentindex + 1);\nbreak;\ncase keys.left:\ngotoindex(currentindex - 1);\nbreak;\ncase keys.tab:\nif (event.shiftkey) {\ngotoindex(currentindex - 1);\n} else {\ngotoindex(currentindex + 1);\n}\nbreak;\ncase keys.enter:\ncase keys.space:\ncase keys.down:\nthis.click();\nsubindex = 0;\ngotosubindex(this.queryselector('ul'), 0);\nbreak;\ncase keys.up:\nthis.click();\nvar submenu = this.queryselector('ul');\nsubindex = submenu.queryselectorall('li').length - 1;\ngotosubindex(submenu, subindex);\nbreak;\ncase keys.esc:\ndocument.queryselector('a[href=\"#related\"]').focus();\n}\nevent.preventdefault();\n});\n});\nsubmenu items do behave differently when interacting with them on the keyboard, see the following table for details:\nkey mapping for submenu items\nkey\naction\ntab ⇥\nclose the submenu, select the next top-level menu item\nright →\nshift ⇧ + tab ⇥\nclose the submenu, select the previous top-level menu item\nleft ←\nreturn/enter ↵\ncarry out function of this item. (in this example: bring up a dialog box with the text of the chosen menu item.)\nspace\ndown ↓\nselect next submenu item\nup ↑\nselect previous submenu item\nesc\nclose the submenu, select the current top-level menu item\ncode snippet: array.prototype.foreach.call(submenuitems, function(el, i){\nel.setattribute('tabindex', '-1');\nel.addeventlistener(\"keydown\", function(event) {\nswitch (event.keycode) {\ncase keys.tab:\nif (event.shiftkey) {\ngotoindex(currentindex - 1);\n} else {\ngotoindex(currentindex + 1);\n}\nbreak;\ncase keys.right:\ngotoindex(currentindex + 1);\nbreak;\ncase keys.left:\ngotoindex(currentindex - 1);\nbreak;\ncase keys.esc:\ngotoindex(currentindex);\nbreak;\ncase keys.down:\ngotosubindex(this.parentnode, subindex + 1);\nbreak;\ncase keys.up:\ngotosubindex(this.parentnode, subindex - 1);\nbreak;\ncase keys.space:\ncase keys.enter:\nalert(this.innertext);\nbreak;\n}\nevent.preventdefault();\nevent.stoppropagation();\nreturn false;\n});\nel.addeventlistener(\"click\", function(event) {\nalert(this.innerhtml);\nevent.preventdefault();\nevent.stoppropagation();\nreturn false;\n});\n});\nsee the complete example code.\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\ndraft, approved by eowg, updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/menus/styling/":{"title":"\n  Menu Styling\n\n\n       • Menus\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["vertical menu","horizontal menu","indicating hover and focus","indicating the current page","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nmenu styling\n• menus\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nmenu styling\nthere are no definitive rules on how a menu should look like, but a few design patterns have emerged on how and where menus appear on the page, especially for main menus.\nwhile in-text links usually need an underline to help people with low vision or color blindness distinguish them from the surrounding text, this is not needed for links in menus if the menu can be clearly identified as such. if icons or images are used in links, an appropriate alternative text should be provided. see images tutorial for more advice.\na vertical menu provides space for a lot of links as all items can be easily reached by scrolling the page. vertical menus are often in small columns on the side of the page which may lead to longer words overlapping the menu bar or get cut off, which is a potential accessibility barrier. this often happens when the user increases the font size, or when the website is translated into other languages.\nexample: #verticalnav {\ndisplay:table;\n}\n#verticalnav ul {\nmargin: 0;\npadding: 0;\nbackground-color: #036;\ncolor: #fff;\n}\n#verticalnav li {\ndisplay:table-row;\nwidth: 20%;\ntext-align: left;\n}\n#verticalnav a {\ndisplay: block;\npadding: .25em .5em;\ncolor: #fff;\nborder-bottom: 1px solid;\ntext-decoration: none;\n}\n#verticalnav a:hover,\n#verticalnav a:focus {\ncolor: #036;\nbackground-color: #fff;\ntext-decoration: underline;\n}\nif a menu has so few items that they can fit in one line on the screen, a horizontal menu bar may be used to display the links. such menu bars are usually positioned near the top of the page. while this is a compact way to display a menu, horizontal space can be limited if users use small-screen devices or increase the font size. in such cases media queries can help to transform a horizontal into a vertical menu.\nexample: #samplenav {\ndisplay:table;\nwidth:100%;\n}\n#samplenav ul {\nmargin: 0;\npadding: 0;\ndisplay: table-row;\nbackground-color: #036;\ncolor: #fff;\n}\n#samplenav li {\ndisplay:table-cell;\nwidth: 20%;\ntext-align: center;\n}\n#samplenav a {\ndisplay: block;\npadding: .25em;\nborder-bottom: .25em solid #e8e8e8;\ncolor: #fff;\ntext-decoration: none;\n}\n#samplenav a:hover,\n#samplenav a:focus {\ncolor: #036;\nbackground-color: #fff;\ntext-decoration: underline;\n}\nwhen the user focuses a menu item or hovers over one using the mouse pointer, the individual menu item should change so users know where the focus is or which menu item is hovered. in the examples in this tutorial, the menu item is inverted and the words are underlined. another possibility is to change the shape of the menu item, for example by introducing a bullet or an arrow while the menu item is hovered.\nthe current page should be marked to give users a sense of where they are in the site’s structure. this needs to be done in a way that does not rely on color alone. for example in these tutorials an inverted box is used as well as a small arrow to show the entry of the current page. in most cases, the current page item should not be linked to the current page.\nin the following example, the active menu item is not only marked using different colors but also by adding a bottom border.\nexample: #currentnav {\ndisplay:table;\nwidth:100%;\n}\n#currentnav ul {\nmargin: 0;\npadding: 0;\ndisplay: table-row;\nbackground-color: #036;\ncolor: #fff;\n}\n#currentnav li {\ndisplay:table-cell;\nwidth: 20%;\ntext-align: center;\n}\n#currentnav a,\n#currentnav .current {\ndisplay: block;\npadding: .25em;\nborder-bottom: .25em solid #e8e8e8;\n}\n#currentnav a {\ncolor: #fff;\ntext-decoration: none;\n}\n#currentnav .current {\nbackground-color: #bbb;\ncolor: #000;\nborder-color: #444;\n}\n#currentnav a:hover,\n#currentnav a:focus {\ncolor: #036;\nbackground-color: #fff;\ntext-decoration: underline;\n}\ncode snippet: html\n<li>\n<span class=\"current\">\n<span class=\"visuallyhidden\">current page: </span>\nspacebears\n</span>\n</li>\ncode snippet: css\nnav .current {\ndisplay: block;\npadding: .25em;\nbackground-color: #bbb;\ncolor: #000;\nborder-bottom: .25em solid #444;\n}\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n1.4.1 use of color: color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. (level a)\ntechniques:\ng14: ensuring that information conveyed by color differences is also available in text\ng128: indicating current location within navigation bars\ng182: ensuring that additional visual cues are available when text color differences are used to convey information\ng183: using a contrast ratio of 3:1 with surrounding text and providing additional visual cues on focus for links or controls where color alone is used to identify them\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\ndraft, approved by eowg, updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/images/informative/":{"title":"\n  Informative Images\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["images used to label other information","images used to supplement other information","images conveying succinct information","images conveying an impression or emotion","images conveying file format","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ninformative images\n• images\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ninformative images\ninformative images convey a simple concept or information that can be expressed in a short phrase or sentence. the text alternative should convey the meaning or content that is displayed visually, which typically isn’t a literal description of the image.\nin some situations a detailed literal description may be needed, but only when the content of the image is all or part of the conveyed information. whether to treat an image as informative or decorative is a judgment that authors make, based on the reason for including the image on the page.\nthis example shows two image icons – one of a telephone, one of a fax machine. each image is followed by a phone number. consistent with the visual presentation, the text alternatives “telephone:” and “fax:” are used to identify the device associated with each number.\nexample: 0123 456 7890\n0123 456 7891\ncode snippet: <p>\n<img src999=\"phone.png\" alt=\"phone:\"> 0123 456 7890\n</p>\n<p>\n<img src999=\"fax.png\" alt=\"fax:\"> 0123 456 7891\n</p>\nthe following image shows a dog wearing a bell. it supplements the adjacent text that explains the purpose of this bell. a short text alternative is sufficient to describe the information that is displayed visually but is not explained in the text; in this case the text alternative is “dog with a bell attached to its collar.”.\nexample: off-duty guide dogs often wear a bell. its ring helps the blind owner keep track of the dog’s location\ncode snippet: <p>\n<img src999=\"dog.jpg\" alt=\"dog with a bell attached to its collar.\">\noff-duty guide dogs often wear ...\n</p>\nnote: if the text included an explanation of how the dog wears a bell, the image might be considered redundant and therefore decorative. as this isn’t mentioned in the text, the image is deemed to be informative.\nthis simple diagram illustrates a counter-clockwise direction for unscrewing a bottle top or cap. the information can be described in a short sentence, so the text alternative “push the cap down and turn it counter-clockwise (from right to left)” is given in the alt attribute.\nexample: code snippet: <img src999=\"cap.png\" alt=\"push the cap down and turn it counter-clockwise (from right to left)\">\nnote 1: an alternative technique would be to provide the instructions within the main content rather than as a text alternative to the image. this makes all information available in text for everyone, while providing an illustration for people who prefer to view the information visually.\nnote 2: if more information than that of the diagram is intended to be conveyed by the image, for example if the fact that this diagram appears on the bottle or if the shape and size of the bottle were relevant pieces of information, then it may be better to follow one of the approaches described in complex images.\nthis photograph shows a smiling family group. it’s a stock image so the individuals should not be identified. it’s being used to give the impression that the website or the company it represents is family-friendly. the text alternative is “we’re family-friendly” as this best describes the intended impression.\nexample: code snippet: <img src999=\"family.jpg\" alt=\"we’re family-friendly. \">\nnote: if the purpose of this image were simply to improve the look of a page rather than convey an impression, it could be deemed to be decorative, as shown in “decorative images: image used for ambience”. the author determines the purpose for using the image.\nin this example, a document is available to download in three different\nformats identified by format icons within text links. they have the text\nalternatives “html”, “word document”, and “pdf” to distinguish the file\ntype for each link:\nexample: 2012 annual report and accounts (43kb), also available in (254kb) or (353kb) format.\ncode snippet: <p>\n<a href=\"…\">\n2012 annual report and accounts\n<img src999=\"html5logo.png\" alt=\"html\" > (43kb)\n</a>, also available in\n<a href=\"…\">\n<img src999=\"worddocument.png\" alt=\"word document\"> (254kb)\n</a>\nor\n<a href=\"…\">\n<img src999=\"pdfdocument.png\" alt=\"pdf\"> (353kb)\n</a>\nformat.\n</p>\nnote 1: if the format identification were written as part of the link text, the image might be considered decorative and have a null (empty) alt attribute (alt=\"\"). it could still remain in the same link element (<a>) as the text, to include it in the clickable area. further discussion is provided in “functional images: logo image within link text”.\nnote 2: this particular example is similar to the functional images: icon within linked text in in that the image conveys information that isn’t given in the link text.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\ng94: providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content\nh37: using alt attributes on img elements\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersonliam mcgeethe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/images/decorative/":{"title":"\n  Decorative Images\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["image used as part of page design","decorative image as part of a text link","image with adjacent text alternative","image used for ambience (eye-candy)","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ndecorative images\n• images\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ndecorative images\ndecorative images don’t add information to the content of a page. for example, the information provided by the image might already be given using adjacent text, or the image might be included to make the website more visually attractive.\nin these cases, a null (empty) alt text should be provided (alt=\"\") so that they can be ignored by assistive technologies, such as screen readers. text values for these types of images would add audible clutter to screen reader output or could distract users if the topic is different from that in adjacent text. leaving out the alt attribute is also not an option because when it is not provided, some screen readers will announce the file name of the image instead.\nwhether to treat an image as decorative or informative is a judgement that only the author can make, based on the reason for including the image on the page. images may be decorative when they are:\nvisual styling such as borders, spacers, and corners;\nsupplementary to link text to improve its appearance or increase the clickable area;\nillustrative of adjacent text but not contributing information (“eye-candy”);\nidentified and described by surrounding text.\nthe examples below show how to use the alt attribute when decorative images are provided using the <img> element. where possible, decorative images should be provided using css background images instead.\nthis image is used as a border in the page design and has a purely\ndecorative purpose.\nexample: code snippet: <img src999=\"topinfo_bg.png\" alt=\"\">\nscreen readers also allow the use of wai-aria to hide elements by using role=\"presentation\". however, currently this feature is not as widely supported as using a null alt attribute.\ncode snippet: <img src999=\"topinfo_bg.png\" role=\"presentation\">\nnote: if the image was used to indicate a thematic break, e.g. a scene change in a story, or a transition to another topic, using the <hr> element would be appropriate to notify assistive technology.\nthis illustration of a crocus bulb is used to make the link easier to identify and to increase the clickable area, but doesn’t add to the information already provided in the adjacent link text (of the same anchor). in this case a null (empty) alt value should be used for the image.\nexample: crocus bulbs\ncode snippet: <a href=\"crocuspage.html\">\n<img src999=\"crocus.jpg\" alt=\"\">\n<strong> crocus bulbs</strong>\n</a>\nthis picture of a sleeping dog is already sufficiently described by the adjacent text. there is no need to repeat this information and a null (empty) alt value can be used for this image.\nexample: the sleeping dog: let sleeping dogs lie is a proverb that means “don’t initiate trouble. if something that could be troublesome is quiet, then leave it alone”.\ncode snippet: <p>\n<img src999=\"sleepingdog.jpg\" alt=\"\">\n<strong>let sleeping dogs lie:</strong> ...\n</p>\nthis image is used only to add ambience or visual interest to the page.\nexample: don’t miss the impressive tropical house – a huge greenhouse that displays examples of exotic plant-life from every tropical environment on the planet.\ncode snippet: <img src999=\"tropical.jpg\" alt=\"\">\nnote: if the purpose of this image was to identify a plant or convey other information, rather than to just improve the look of the page, it should probably be treated as informative. the author determines the purpose for the use of the image.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nh2: combining adjacent image and text links for the same resource\nh67: using null alt text and no title attribute on img elements for images that at should ignore\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersonthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/images/textual/":{"title":"\n  Images of Text\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["styled text with decorative effect","using an image","using css3","image of text used as an unlinked logo","mathematical expressions","using images","using mathml","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nimages of text\n• images\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nimages of text\nimages of text display text that is intended to be read. with the current css capabilities in most web browsers, it is good design practice to use actual text that is styled with css rather than image-based text presentation. actual text is much more flexible than images: it can be resized without losing clarity, and background and text colors can be modified to suit the reading preferences of users. images are more likely to distort and pixelate when resized. in those uncommon situations where images of text must be used, the text alternative must contain the same text presented in the image.\nthis following image is used to convey a slogan text with decorative effects.\nexample: previously it was not possible to create such text using css styling that would be rendered consistently across browsers, which is why images of text were used. the text alternative for this image is the same as the slogan presented in the image: “your access to the city”. the decorative effects (stylized text and shadow) are not be described because they are not relevant.\ncode snippet: <img src999=\"access-city.png\" alt=\"your access to the city.\">\nthe visual effects in the above image can be produced using css3 and an embedded font. authors and developers that need to support older browsers may find the image example useful, if a less styled fallback text isn’t an option.\nbrowser support\ndisplaying these effects requires browsers that support the following web technologies:\ncss transforms\ncss fonts\nexample: your access to the city\n@font-face {\nfont-family: 'harabara hand';\nsrc: url('../examples/harabarahand-1bed3ad7.eot#');\nsrc: url(data:application/x-font-woff;charset=utf-8;base64,d09grgabaaaaabymabeaaaaah7qaaqaaaaaaaaaaaaaaaaaaaaaaaaaaaabgrlrnaaabgaaaabwaaaacdfmuwederuyaaagcaaaahqaaacaaswaet1mvmgaaabwaaaa+aaaayc3bvyljbwfwaaab/aaaajkaaagyw81jumn2dcaaaakyaaaabgaaaayfgwbeznbnbqaaaqaaaaecaaabcwzyndznyxnwaaadpaaaaagaaaaiaaaaegdsewyaaaosaaaqlgaaf2wzh4yeagvhzaaae9waaaavaaaanghaqgvoagvhaaaudaaaacaaaaakc1odlmhtdhgaabqsaaaaxaaaahhwuqafbg9jyqaafigaaaanaaaapnzyehztyxhwaaausaaaacaaaaagajub7m5hbwuaabtqaaaasaaaas35ebdbcg9zdaaafyaaaab/aaaa5c0d4a1wcmvwaaawaaaaaaqaaaaeuaaak3dlymyaabyeaaaabgaaaayacvmoaaaaaqaaaadmpalpslgfajawigaaaaaazzowihjay2bkygdga2ijbhbgymaeqlkgzghzgaafiqbqaaaaenpjygbawjibgzwbhqerygjgzqzsngb5zmqzbsbgcgdgvf3dlvivhygbxyy5acjmcjjj7ouoywaeapxvbmoaahjay2bgygaaybkgrgyqwapkmyl5lawtglqcelkazxibresgzizuhkygfizshkqgbqpccvok8ap//v9hu5ebvfeevseav8h4/+v/x/8x/1/0f+h/+f9n/z/xf+r//acc99/c33tlewo7xsdixgbxxsgejjjqfuc8qhfgywblanrdzghmctiwchhz8ajzfaxubvxk6qiarbwnwaaaaaakaeqfeqaaenpdkd1oxdaqhcc4loegsbaslssuk6/oqvi4kvcaqcg8dt/srkt2dkhpafxwlqezxs6gyjknttjgm+/n6poze4breurt+bbic5p4+0zgr38gb/nyvekgnnzv70m8sjhzbkwnd9lpmmrrpwaloup4v4261u9vw8qkufjgf/fwe3sh5/mpgcprhdsd4h1zsomtzzyitngvhp1mymavl527rpo8acndomerkj0qy3rfyxto9mog8tbqmjtrr3+1zl7gzks1n/mb0guqfqhgefdw0bcjivyorscytwwbp0a5gpwte1ewvrjdo48ga9rkwgmn50tpd1+6pgsvjzw4+qcijgviaaaaaqab//8ad3jabvhtibxxdq1x7/v7qmu/drx7dt/otpenultdkxns6u9qpevrjdrhenl3yeclhavjrmryrmbbgwykbkzgrjw1uwjjes8k2tilfwd712djzq0ldgm7smhjoiw4xgbicih/hczob8ca59zqsrpiotfmfb2puvfcc86tiaxobuh4o6uzgqxm0h9dbeeovwmu+mxodv368nibmsrh8ibkyyw+/kbr4wfh3hr8fvxjk4ftsnoqxnnvim/tp1w68+lrp9q/bafmw3zywxkr+e7ws+cdimipiwnbdsa9afvufdrtr4tb3p6ozvkkax8xg/fopov6yczxa25ch9e1kyvamuj8iqi1dcfpwlmyo6isvgmjut3fepjxud9oifzdqvojdqwxzg/y2vibnmn70wxcfh2eqcn/s77isilslt8rjvek2xq43hdhxwswy1xzit50mpsojohb1psefb1oj0eabcvjhhdmfjqzznq5m5uwc/ara+3hgqhrtydohqex5kyx2kgld4qdxlrt6kojbvypvliabtxtehutujbztw9tq2jiirxkpfeqqpckijy0dwokjesktrruokmt1xg5gylmakvdr/avxh08pnvdckuydlfoffla6yekwxprj1+91nqulxvt3p4u+5ak6xjp50vje1natg30jc8snarpwkl215i+azkqnxty5z3hfu5lfru9tro50kqvdcbakxl9x53kqajjvymoyzmoolw8gmesivbkr+v3y66wztyb86cuzcmfk59nmtigmbndvrx30xhsms7vxvkzfcnfm9owrryeutublqyax5uvbs8gn4jvb0h1acozvdmeshofshbis5dcaxgsyzjx4jikbpivaqtwzsntm/wdsprdylabmqfq0u7ugamog20y5iso6ded8+tizkhhgbz8djyhbqym8nfljrns7ag4pmnwlcf+xiyuh6e0zdhjfeiqrm7t4snzfwltuoqtpvk9fj9bzfzbf/b/4/x0kaspb+6c2d6magwziye4skk5fmgtp9i0s5wquordt34ekdojs5ot65gie9qnz9y+rsvqo8srzetfip+mvhr+0zilrjc1t3lumjksrdv+g88y2v/05xpvljzmmh0/suupycqrmgrywqse6flj2kohtdeyavcr6+nmopcof2rrd/gnx+qprjs2qgknrviwfdw4gvxt8f4qhoaehnqiqnbzi+7lqkmyjzmchz0ua7eoui2aoyipct1haonosj2ba+oicm+wjzjkftztz6n80jkgbszeq851byjxuleu6zld1z4p6tv4ivkjtie8yguv3imzu/eyjhnca4fohgjpjvu4qg84ricqea3mmy54as9axtljqbfrjtwwgyla0srs+lh5kogbuuvsrkpi4aslijdcd421ksrf91wpuu6u5hpall3hvoqttyfy4tqc6nq5qy8frnaz1dxs8mb3r7uj9ktrgrlfzvq3mqzysi6ulqws0qaykovlmkq62xlx5udwbv+95liw161p7gqmjstz8a7xizrjoloue4t9voyxbmtrrctjg9vqxlmt093f9s0ik138brhyveyb69ncphi3ymffpxzkjbfsqxluzbqidbklle8br5qqfufrefbj25pbzpmn+zkp9zczlisdo4gtkjxbejhqgkrfooffu3rfjo6imtgmodzvz3ozufcdxx/x6v8lh3da5cz5+kvsdfc8x/k4kxi8l6nap71snmvratopz3fnzqkoz8yb8ggutfiaoalmn2u5kmsygphj7ohdbfzumjp8ajanpe4701kowtosjnvgkbynpyopkxccosbdbnuddvhapid1a5hthlvbouvc4pckbzrliymsl1dns7rdt2hdg3i87fq2+ozdwhcvicczc1fjmrx7csw+zacoz3csq7pm0xgavy6wn4sgmzioiupf9vtvvrepshmkqdaa14y2sswlaglsgsy7mzcjdfo8myuugdhsdsyzgbhujn6rw2+//k2vwqtraeb/talhqtptwikuazei0dmaifhp4a/wlgvh6qznv9arycvlcupesrnmb3muiikdjycmabv9oaldhnhqriut0z1+wgf7thfekj5s0a+tu60zow2thtq7ootvotpqrcwwtevw7v+uriateiae7yi9zifbq8raskiammkhrxqc5qq1/11ei0lwu6ubxaoof2yxerpjsr3hifoqkgtdphakolf8qraiwyji+zx4cl387ds/2aaht+l05ekjf8b0qqocncayll1jug77qvblfz+fgekzmeivgacvq8a4qlxw4qpckq6bqnomo12wlfpjl1sttgr7l7z4hhaemuws1fj5/imlbnd3u9tzw75/+t/odmlny3qqvjn+iuvfy+aedf8yk/rjppn4sijxv9bhqdlcwamsbig7k/gjqge7we/bwfwywb0qpicwcwpvbd0cj0cypidfjev6+hdmdtu1jgquv8/uzugtgdsahi9r7qsbleyt6ahfztenmzqf3ftv9r3eyn6/x11oldrg+dfwc9roh65xbuorzcpcqjpdbvoyqbqbbuiwreidjxk4agkaxwpfpl/zc+fnypeyy8iy7pa/8pwnn/qiko/6e8tpff3hr25noyzfmha7jxxhmkol8c1qogfadrpighcztlrnjbpf9xcwgilsols60c7z+ftqv34j2akubk8gge8tw5gddczfjxn8xoka3fblrlloidrzu2ceqaeocastgeqf9yi8a35plrqiylaqsmrsxn8iovhz0lwocvmy6lrrmtntnhc0l3yp8s3wdau4yacusjw5ebkajpvz8bkezdfwtte1r1y9yc2fyfpusfmrtrhd0h9sqbwytv9xkaw9g8804itdsru/d/6eemv2luwv2afchitcrzfpdlc3tn+0qodn8vsvlrpmjvldhgkwzlnyq085n3qi3hxrkwufc4whhqxv4bfndpbzgz9+6t9fsbwox5q88+ob4wvdqdoypgt0cdizedu3uhb8flvgci/4y7i4m8f3g9c4ztmzyzhcqk0+bskv9ivny/duqhq3zvkqfryg2nn0lvaddbq2zo/yxrveanw+mg5gwfh8ye/gofc+cy+l4gicyyf1beoqcgbmtvk/fg662da6bquwwojedgdtwlssd82g48a9jdgrt6phhf6cwp5beg5e4af9xskea4trwpuw1i++trk1m8/ibrse6sjqd22eogkacrhrbjggvzsx7bszyjtuz4cimofqo279suvz4hmw9wdswbtps5xjuugxzl3+igitnrcybquozeqrmzfe19b3rym3qmqglqq23dsfr5pddsp+3ft/6fyrwnu89nvtcuen9mzvtrkmbeyvndynjztcbqyakav4675/czvbtnd2ehu2wdok/rvuehvwnjz9eonzjz//r7lahn87ubt8qxa5+mmgyfje9czrczouw4adexqoaulzfgsucy3xr4se5fwxztymhd89qvdqbh3haof6ksglxx9xswltqhyvs/rtbjxfbdxjrzkfdnputfsw12bh1rrurv/8wmrnnll8+bx+4nqtslcxf4yojuapzy+ffehwhdfc3nmhxfpwn+2ixyt36lbaonm01ovqp/vy9cslz+jqk69njn+xddhkgila4amsvtiwnkmbqikhwc9nufthx0wntnxm5in+djjoq10z9nrpvzotsir7zoe/+xepfgljluzfqsugbvuzfaqhse11ayp/ni5sunjiflqpilmwehdnku7c2cwqmzjfi6rarcpuzpsyv98tv8qt4inxz+lpxv+k74kfinecqpsyxgccpohjb8jtdnesnrhmr4h7cvmvzc23omp6gl+068z4adgyxc5htjfndczoudjj3rhnmm91d45i25tx0ufesbassenpdp/nafa6xuofbgowzmoucgqmk3eww+hdzgvtf9cf4z4gag+sy9otpsgartxwazjivclpubns041bohiwc4tvo2afpgw8wq9xb1ymgkcbau1csgpc0hxu/yfodcy3wmy7talvwxn29iv/rhuxvqd/cmddb98bavwdid/wj3r5gqct5bg2/zp8qibx3bacgb6cfp4dprtr0j6ngzp9bdgofu0+1uadom3ektjrogngzzisoai12l6drwid1hebp8lgv59klwkomcxjq+wu4ejgouh5w9qdbhuyr0k1ptri0yjcbojcee4kparksawrzihuwshmcewwjoaptqed8fpwc3fnnw2imfqqtkvvgae2xr0+4h4lbqgjyywyr+j1jfsr4iyytomhwceflegmmwztsjad/8geag7ufmkncubnemlmn0fr4shiz1gq4z10brtd7biqmycogyi/anbqfdnkavkwp08vxes4huj7yupwsspgpmziaswfdbh5wtclw6oika3hbrfg2jgolfhzthr5aluyusjuzjqlewq0jzvjsk76vyfyxavrrfmwawv4lm6iiqdychwh7qyelt8mb1kolk9hkfytl9gf8dokk8wfmgo1dkfyfvy+q6hmufyobawev4k1urhbucbbvrzlhzu5xlkedrx6gky5jirwnaqic8lfn6y2xqfftxtoemntxeiii4gye5lyrxfcwuagdemh7bypxfwnan+rjxr+swsjzgxqq6oi+30xzqazobgttbfjce8fmxtfsa1lk3sepwlh67+bzdi9k+jfutzmbz75mzzjj4ojww/ca50fu3dpks9qwpdou/m2zfz22qgpppszxvhjqc+xwq1ozxaumvvukarzoimkraj2di+v90agcmu033u6zf1u5utj+x5v66dfvbgbatdefdiufnfxudpa80l2czjs6bwblz3b3fy32dywcu5/olrrhgw87htmzk9wn/ibt58n+7zrkn8t8q8m6bd//nra9f7b4pw9oko0eu/7po4x2++cq84/hppb7/509njj/bcrrvjp/2x+takomtrqn3/02x8vmfit4ixgo8ffbf8c/ausys/i2rpm8g6/8p+lw/sxxafo+arqgs/9igjbgvjruc7qbhbqtdek5+8jiklb7g6615rjllf3wkscydqzqi9ss1mipqaomky4hoe5ikuri1kvhmvfwyafw522m3aak4kxmtmxzooyaxrtsqhhltmdtarcy01ba/xrpglmtzeer8hfuusiai2sqljmxww5tiwb9idffyolgjfmasaqgfpnqg7ggd9rfrybguvs5vv5vb65bj6i2yw5pr85xpst3fbiku0l998hpahsys/+cwhv+8nlq/ypgrvyj4zrlyuaovvja8/aohc6frezaortd1n8+dpcjlwtc//+3bcjr7swctfxl0+4qv5565prsmrmhkcdgsosjwkpdlgd54hz01atsbby1w2aa+t6wqgzvdspxlx9+kzig6x7usz3x6mlzj5b3xqnqedl7jv0ewxbminbqvm3hmzbg9945ub4aajbckmhimjrqaz/0ayklvq1/vtj/h8e/wpd4dkwaab42mngzacdr+9efornt/nkim8b5p833tabo/8/+vobjz41a8jlygaciqiao4yooqb42mngzgbgf/szgygbg+h/o3/pweizgcioqa4ajwif+3jay3rd4mlbwmda1s/awgwcxpkmzmxwdaxmwxjymamzgbgvavnudozmaka5tf/pmbaaadd7eug90zygbtzcbm14hoijgqy+h+k1ql4okpaf0ca5fkkgbgbj8befenpjygdqgubgfyyxzg2ww6wlbgrsxowhol9wlxgvwau3aqcj0xbpaaabaaaahgg/aawaaaaaaaeaaaaaaaoaaaiaac4aaaaaenpni80kglaqro9pqyu2bfrbfm3fwolarlevkitwmgpckjh736wnqbdq7vuw3mfmzp3db4x4yafed/b0btnw1lld5m8d2voxljmucpgz7olbgly77ej9um+cpegbja6g34w5gv7gc2vourxf0ueosnxlht3yuxumcvywdynh21dskp7klbs4eltlmd0qio/jtk3fr7rt10r+j21d1mx1dseedyfmlvz3xxlbf7qlh0142n3iyw7bqacf4xnawnxxb/am02fclo1mimelkrb2jrgxsfd2yjy1f/mlpyl8bwowyowyfty22ggpa2occcizf7byzskuhwbsssc+bxxyxdenzjpm/n5ei/t1ubljqmbpftrvkiw0cibn0smfxmqvxmsyah3qbz3ffacmvyi7algaacsaavmoaagaaa==) format('woff'),\nurl('../examples/harabarahand-2780d3c2.ttf') format('truetype');\nfont-weight: normal;\nfont-style: italic;\n}\n.background {\nbackground-color: #fff;\npadding: 2em;\n}\n.tagline {\npadding-left: 1em;\nbackground-color: #ddd9d6;\nfont-family: 'harabara hand', cursive;\ntext-transform: lowercase;\ncolor: #226c8e;\nfont-size: 1.5em;\nbox-shadow: 0 2px 4px rgba(0,0,0,.5);\nletter-spacing: -1px;\n}\n.tagline span {\ndisplay: inline-block;\n-webkit-transform: rotate(-10deg);\n-ms-transform: rotate(-10deg);\ntransform: rotate(-10deg);\n}\ncode snippet: html\n<div class=\"tagline\"><span>your access to the city</span></div>\ncode snippet: css\n@font-face {\nfont-family: 'harabara hand';\nsrc: url('harabarahand.eot#');\nsrc: url('harabarahand.woff') format('woff'),\nurl('harabarahand.ttf') format('truetype');\n}\n.background {\nbackground-color: #fff;\npadding: 2em;\n}\n.tagline {\nfont-family: 'harabara hand', cursive;\ntext-transform: lowercase;\ncolor: #226c8e;\nfont-size: 1.5em;\nletter-spacing: -1px;\npadding-left: 1em;\nbackground-color: #ddd9d6;\nbox-shadow: 0 2px 4px rgba(0,0,0,.5);\n}\n.tagline span {\ndisplay: inline-block;\ntransform: rotate(-10deg);\n}\nnote: the code snippet doesn’t show any vendor prefixes. these can be added to increase compatibility with older versions of web browsers using their experimental implementation of css3 features.\nthe following image is the logo for the web accessibility initiative. it is not part of a link, so the text alternative is “web accessibility initiative”. there’s no need to mention that it is a logo.\nexample: code snippet: <img src999=\"wai.png\" alt=\"web accessibility initiative\">\nnote 1: images used as logos are exempt from some of the accessibility requirements that apply to other images of text. for example, there are no minimum color contrast and text size requirements.\nnote 2: if this logo were linked then it would become a functional image. see functional images: image used alone as a linked logo.\nhistorically, math expressions have often been presented as images because of the difficulty of presenting equations and special math symbols with html. however, mathml is emerging as the preferred presentation of accessible math on the web.\nthe image below displays a recurring decimal number (decimal numbers that never end). the alt text for this recurring number is “0.3333 recurring. (in the image, the recurrence is indicated by a line over the ‘3’ in the fourth decimal place.)”\nin this particular example, the way that the recurrence is shown is important, so it is also described in the text alternative. as with other images, the author is in the best position to determine what information is intended to be conveyed by the image and construct the text alternative accordingly.\nexample: code snippet: <img\nsrc999=\"0dot3333recurring.png\"\nalt=\"0.3333 recurring. (the recurrence is indicated by a line over the ‘3’ in the fourth decimal place)\">\nimages of math expressions should only be used in exceptional circumstances – for example, when the expression is an exception to the normal content for the page or website. the preferred method for displaying math expressions is mathml, which can present math semantically.\nif math forms are a substantial part of the content (for example, for online maths courses), mathml should be used instead. mathml represents both presentation and content semantically, making it potentially more accessible to a wider range of users.\naccessibility support: mathml, web browsers, and assistive technologies\nmost web browsers need plugins to render mathml correctly – especially for the new mathml 3.0 features used in this example. to see the mathml example below, this firefox plugin may be needed.\nsome libraries that polyfill mathml for web browsers, like mathjax, provide support for accessibility features.\naccessibility support for mathml varies, but continues to improve as web browsers and assistive technology evolve. it is important to evaluate mathml support before deciding which techniques to use.\nfind more information about the state of mathml in webkit-based and in mozilla-based browsers.\nthe simple example of the recurring number illustrates the difficulty of describing both the content and presentation in mathematical expressions succinctly and clearly. specifically, it is cumbersome to describe the position and location of the over-line representing recurrence, though it is important for some classroom settings. for more complex expressions or equations, text alternatives for images are unlikely to provide sufficient detail succinctly. mathml helps provide such semantics within the code rather than as text.\nexample: 0.3333 code snippet: <math>\n<mstack stackalign=\"right\">\n<msline length=\"1\"/>\n<mn> 0.3333 </mn>\n</mstack>\n</math>\nnote: the above code includes semantic information that conveys both content and presentation to assistive technologies.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nc22: using css to control visual presentation of text\ng94: providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersondavid macdonaldthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/images/functional/":{"title":"\n  Functional Images\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["image used alone as a linked logo","logo image within link text","icon image conveying information within link text","stand-alone icon image that has a function","image used in a button","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nfunctional images\n• images\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nfunctional images\nfunctional images are used to initiate actions rather than to convey information. they are used in buttons, links, and other interactive elements. the text alternative for the image should convey the action that will be initiated (the purpose of the image), rather than a description of the image. for instance, as shown in examples below, the text alternative should be “print this page” rather than “(image of a) printer”, “search” rather than “magnifying lens” or “example.com home page” rather than “example.com logo”.\nmissing or empty alt values create significant problems for screen reader users because functional images are essential to the functionality of the content. screen readers will typically announce the image file name, the image url, or the url for the link destination, which is unlikely to help users understand the action that will be initated by the image.\nthe following image is the only content of a link that leads to the w3c home page. it has the text alternative “w3c home” to indicate where the link will take the user. the next example, “logo image within link text” example, discusses what to do when there is other text in the link to identify the destination:\nexample: code snippet: <a href=\"http://www.w3.org/\">\n<img src999=\"w3c.png\" alt=\"w3c home\">\n</a>\nnote 1: in this situation the logo is also an image of the text “w3c” but in this case its primary function is to link to the home page, so the word “home” was added to the text alternative.\nnote 2: images used as logos are exempt from some of the accessibility requirements that apply to other images of text, for instance there are no minimum color contrast and text size requirements.\nin this example the w3c logo is used to supplement text within a link that leads to the w3c home page. the image does not represent different functionality or convey other information than that already provided by in the link text, so a null (empty) value is applied, (alt=\"\"), to avoid redundancy and repetition. in effect the image is a decorative adjunct or visual cue to the link text:\nexample: w3c home\ncode snippet: <a href=\"http://www.w3.org/\">\n<img src999=\"w3c.png\" alt=\"\"> w3c home\n</a>\nin this example the image follows text within a link to inform users that the link will open in a new window. it has the text alternative “new window” to reflect the representation on the image:\nexample: w3c home page code snippet: <a href=\"http://www.w3.org/\" target=\"_blank\">\nw3c home page <img src999=\"new-window.png\" alt=\"new window\">\n</a>\nnote: this technique is often used with icons to indicate different file formats such as avi, odf, mp3, pdf, word, and many more. in this case the text alternative should equally convey the format represented by each icon, see informative images.\nthe following image is an icon representing a printer to denote print functionality. it has the text alternative “print this page” because its purpose is to activate the print dialog when it is selected:\nexample: code snippet: <a href=\"javascript:print()\">\n<img src999=\"print.png\" alt=\"print this page\">\n</a>\nthe following image is used to give the button a distinct style. in this case it is the button to initiate a search request and is an icon representing a magnifying lens. the text alternative for the image is “search” to convey the purpose of the button:\nexample: search:\ncode snippet: <input type=\"image\" src999=\"searchbutton.png\" alt=\"search\">\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nh36: using alt attributes on images used as submit buttons\nh37: using alt attributes on img elements\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersonthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/images/complex/":{"title":"\n  Complex Images\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["long descriptions","description containing structured information","a text link to the long description adjacent to the image","describing the location of the long description in the alt attribute","structurally associating the image and its adjacent long description (html5)","providing a link to the long description via longdesc","description containing textual information","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ncomplex images\n• images\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ncomplex images\ncomplex images contain substantial information – more than can be conveyed in a short phrase or sentence. these are typically:\ngraphs and charts, including flow charts and organizational charts;\ndiagrams and illustrations where the page text relies on the user being able to understand the image;\nmaps showing locations or other information such as weather systems.\nin these cases a two-part text alternative is required. the first part is the short description to identify the image and, where appropriate, indicate the location of the long description. the second part is the long description – a textual representation of the essential information conveyed by the image. the following examples show different approaches that can be used to provide such short and long descriptions.\nthere are situations where the composition of an image is important and needs to be provided in the long description. for example, the sequence of colors used and the relative heights of the columns in a bar chart may be relevant information about the structure of the chart, in addition to the actual values and trends that it depicts.\nremember that complex images can be difficult to understand by many people – in particular people with learning disabilities and people with low vision. long descriptions benefit many people and it is good practice to make them available to everyone, for example, as part of the main content. it may also be possible to reduce unnecessary complexity in your images, and make them easier to understand for everyone.\nit is also good practice to refer to and summarize more complex images from the accompanying text. for example, a reference such as “the following graph shows that visitors were lost in the first quarter, but the numbers recovered in the second quarter” helps to point out the relevant information that the image is intended to present.\nin this example, a bar chart of website visitor statistics has the short description “bar chart showing monthly and total visitors for the first quarter 2014 for sites 1 to 3”, provided through the alt attribute of the image. the long description provides detailed information, including scales, values, relationships and trends that are represented visually. for example, the long description can point out the declining values for site 1, consistent values for site 2, and increasing values for site 3 that are encoded in the bar chart. the longdesc approach used in the following example is described later in the section.\nexample: image description\nnote: see example long description associated with this image.\namong the approaches below, the first and fourth one make the information available to other programs, such as web browsers and search engines.\nthis approach provides a text link next to the image that refers to a separate web page or a section of the same web page that contains the long description. the link text needs to clarify the destination, and associate it with the image.\ncode snippet: <p>\n<img\nsrc999=\"chart.png\"\nalt=\"bar chart showing monthly and total visitors for the first quarter 2014 for sites 1 to 3\">\n<br>\n<a href=\"2014-first-qtr.html\">example.com site visitors jan to march 2014 text description of the bar chart</a>\n</p>\nthis approach is supported by all web browsers and assistive technologies, and makes the long descriptions available to everyone. however the link is not associated with the image in a semantic way.\nthe html5 <figure> and <figcaption> elements can be used to group image and link semantically. adding role=\"group\" to the figure maintains backwards compatibility with web browsers that don’t support the native semantics of the <figure> element.\ncode snippet: <figure role=\"group\">\n<img\nsrc999=\"chart.png\"\nalt=\"bar chart showing monthly and total visitors for the first quarter 2014 for sites 1 to 3\">\n<figcaption>\n<a href=\"2014-first-qtr.html\">example.com site visitors jan to march 2014 text description of the bar chart</a>\n</figcaption>\n</figure>\nwhen a long description is provided on the same web page as an image, its location can be described using the alt attribute of the image. the location information needs to be clear and accurate to help users locate the content.\ncode snippet: <p>\n<img\nsrc999=\"chart.png\"\nalt=\"bar chart showing monthly and total visitors for the first quarter 2014 for sites 1 to 3. described under the heading site visitors full text.\">\n</p>\n[…]\n<h4>site visitors full text</h4>\n[…]\nthe html5 <figure> element can be used to enclose both the image and its long description. the long description (presented as headings, text, and a table) is wrapped in the <figcaption> element. it is explicitly associated to the image using role=\"group\" on the containing <figure> element in web browsers that don’t convey the semantics of the <figure> element.\ncode snippet: <figure role=\"group\">\n<img src999=\"chart.png\"\nalt=\"bar chart showing monthly and total visitors for the first quarter 2014 for sites 1 to 3, described in detail below.\">\n<figcaption>\n<h2>overview</h2>\n<p>the chart shows the website hits for the first quarter of 2014 …</p>\n<h2>values</h2>\n<table>\n<caption>example.com site visitors jan to march 2014</caption>\n<tr>…</tr>\n</table>\n</figcaption>\n</figure>\naccessibility support: longdesc, web browsers, and assistive technologies\nin firefox, long descriptions linked by longdesc are available through “view description” in the image’s context menu. there is an official chrome extension that adds long description access in a similar way. safari has no support for longdesc. in other web browsers, longdesc is currently available only to screen reader users. mobile platforms currently do not support longdesc.\nno browser indicates the presence of the longdesc attribute visually, other than through the image context menus as noted above.\nthe longdesc attribute can contain the uri of a separate web page that provides the long description for an image or a fragment identifier that refers to an element on the same page that provides the long description.\nwhen the longdesc attributes contains a uri to refer to another web page with the long description, it is recommended to also apply approach 3 (a text link to the long description adjacent to the image). this is a work-around for web browsers and assistive technologies that don’t fully support the longdesc attribute.\ncode snippet: <img\nsrc999=\"chart.png\"\nalt=\"bar chart showing monthly and total visitors for the first quarter 2014 for sites 1 to 3\"\nlongdesc=\"2014-first-qtr.html\">\n<a href=\"2014-first-qtr.html\">long description</a>\nwhen the longdesc attribute contains a fragment identifier (# followed by the id of an element on the same web page - a “hash link”), it refers to an element on the same web page that provides the long description. it addresses a similar use case as example 2, approach 1, though the support by web browsers and assistive technologies may vary. an additional link (by applying approach 2) is not needed when the long description is in close proximity to the image.\ncode snippet: <img\nsrc999=\"chart.png\"\nalt=\"bar chart showing monthly and total visitors for the first quarter 2014 for sites 1 to 3\"\nlongdesc=\"#chart-longdesc\">\n[…]\n<div id=\"chart-longdesc\">\n[…]\n</div>\nthe wai-aria aria-describedby attribute can be used to link to a description of the image that is provided anywhere on the same web page, in a similar way to the longdesc approach. the value of the attribute is the id of the element that provides the long description.\nimportant: the element referenced by aria-describedby is treated like one continuous paragraph of text. screen readers and other assistive technology do not have access to structural information, such as any headings and tables. they will read out or provide the text of any contained elements without indicating their structural relationships, and without the corresponding navigation mechanisms. as a result, this approach only works for long descriptions that are text-only, without needing structural information as was needed in the previous example.\nin this example, the head of the peacock is described using a paragraph of text that is on the web page.\nexample: the male is metallic blue on the crown, the feathers of the head being short and curled. the fan-shaped crest on the head is made of feathers with bare black shafts and tipped with blush-green webbing. a white stripe above the eye and a crescent shaped white patch below the eye are formed by bare white skin. the sides of the head have iridescent greenish blue feathers. the back has scaly bronze-green feathers with black and copper markings.\ncode snippet: <img src999=\"peacock.jpg\"\nalt=\"male peacock head\"\naria-describedby=\"description\">\n[…]\n<p id=\"description\">\nthe male is metallic blue on the crown, the feathers of the head being short and curled. the fan-shaped crest on the head is made of feathers with bare black shafts and tipped with blush-green webbing. a white stripe above the eye and a crescent shaped white patch below the eye are formed by bare white skin. the sides of the head have iridescent greenish blue feathers. the back has scaly bronze-green feathers with black and copper markings.\n</p>\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\ng73: providing a long description in another location with a link to it that is immediately adjacent to the non-text content\ng74: providing a long description in text near the non-text content, with a reference to the location of the long description in the short description\ng92: providing long description for non-text content that serves the same purpose and presents the same information\ng95: providing short text alternatives that provide a brief description of the non-text content\nh45: using longdesc\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n18 december 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersonwayne dickthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/images/groups/":{"title":"\n  Groups of Images\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["multiple images conveying a single piece of information","a collection of images","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ngroups of images\n• images\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ngroups of images\nsometimes groups of images are used together to represent one piece of information. for example, a collection of star icons that together represent a rating. in this case, only one of the images needs a text alternative to describe the entire collection, while the other images have a null (empty) alt attribute so that they are ignored by assistive technology.\nin other cases, a group of images may represent a collection of related images. for example, showing a collection of art impressions that are thematically related. in this case each image needs its own text alternative that describes it individually, as well as its relationship within the group.\nthis group of five images combined show a product rating. there are five images (three filled stars, one half-filled star and one empty star) indicating the overall rating. the text alternative for the first image is “rating: 3.5 out of 5 stars”. all other images have a null (empty) alt attribute (alt=\"\").\nexample: rating: code snippet: rating:\n<img src999=\"star-full.jpg\" alt=\"3.5 out of 5 stars\">\n<img src999=\"star-full.jpg\" alt=\"\">\n<img src999=\"star-full.jpg\" alt=\"\">\n<img src999=\"star-half.jpg\" alt=\"\">\n<img src999=\"star-empty.jpg\" alt=\"\">\nin the example below, the html5 <figure> and <figcaption> elements are used to provide a caption for each individual image in a collection. the <figure> element can be nested, which is used in the example to provide a caption for the entire collection of images. the wai-aria attribute role with the value of group is used to indicate this grouping to assistive technologies, aria-labelledby makes sure that the figcaption elements are used as labels for the individual groups.\nnote: the web browser and assistive technology support varies for this particular wai-aria attribute and value.\nexample: the castle through the ages: 1423, 1756, and 1936 respectively.\ncharcoal on wood. anonymous, circa 1423.\noil-based paint on canvas. eloisa faulkner, 1756.\nfilm photograph. séraphin médéric mieusement, 1936.\ncode snippet: <figure role=\"group\" aria-labelledby=\"fig1\">\n<figcaption id=\"fig1\">\nthe castle through the ages: 1423, 1756, and 1966 respectively.\n</figcaption>\n<figure role=\"group\" aria-labelledby=\"fig11\">\n<img src999=\"castle-etching.jpg\"\nalt=\"the castle has one tower, and a tall wall around it.\">\n<figcaption id=\"fig11\">charcoal on wood. anonymous, circa 1423.</figcaption>\n</figure>\n<figure role=\"group\" aria-labelledby=\"fig12\">\n<img src999=\"castle-painting.jpg\"\nalt=\"the castle now has two towers and two walls.\">\n<figcaption id=\"fig12\">oil-based paint on canvas. eloisa faulkner, 1756.</figcaption>\n</figure>\n<figure role=\"group\" aria-labelledby=\"fig13\">\n<img src999=\"castle-fluro.jpg\"\nalt=\"the castle lies in ruins, the original tower all that remains in one piece.\">\n<figcaption id=\"fig13\">film photograph. <span lang=\"fr\">séraphin médéric mieusement</span>, 1936.</figcaption>\n</figure>\n</figure>\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\naria13: using aria-labelledby to name regions and landmarks\ng196: using a text alternative on one item within a group of images that describes all items in the group\nh67: using null alt text and no title attribute on img elements for images that at should ignore\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersonthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/images/decision-tree/":{"title":"\n  An alt Decision Tree\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["we welcome your ideas","document information"],"0.3,tutorial,example":["\nan alt decision tree\n• images\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nan alt decision tree\nthis decision tree describes how to use the alt attribute of the <img> element in various situations. for some types of images there are alternative approaches, such as using css background images for decorative images or webfonts instead of images of text.\ndoes the image contain text?\nyes:\n… and the text in the image is also present as real text nearby.\nuse an empty alt attribute. see decorative images.\n… and the text is only shown for visual effects.\nuse an empty alt attribute. see decorative images.\n… and the text in the image is not present otherwise. use the alt attribute to include the text of the image. see images of text.\nno:\ncontinue.\nis the image used in a link or a button, and would it be hard or impossible to understand what the link or the button does, if the image wasn’t there?\nyes:\nuse the alt attribute to communicate the destination of the link or action taken. see functional images.\nno:\ncontinue.\ndoes the image contribute meaning to the current page or context?\nyes:\n… and it’s a simple graphic or photograph.\nuse a brief description of the image in a way that conveys that meaning in the alt attribute. see informative images.\n… and it’s a graph or complex piece of information.\ninclude the information contained in the image elsewhere on the page. see complex images.\n… and it shows content that is redundant to real text nearby.\nuse an empty alt attribute. see functional images.\nno:\ncontinue.\nis the image purely decorative or not intended for the user?\nyes:\nuse an empty alt attribute. see decorative images.\nno:\ncontinue.\nis the image’s use not listed above or it’s unclear what alt text to provide?\nthis decision tree does not cover all cases. for detailed information on the provision of text alternatives refer to the image concepts page.\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nsteve faulkneranna belle leisersonthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/images/imagemap/":{"title":"\n  Image Maps\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["an organizational chart with links to individual pages","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nimage maps\n• images\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nimage maps\na client-side image map is an image divided into selectable regions defined by <area> elements (“hotspots”) that allow user interaction. usually the selectable regions are links to other pages. for image maps, text alternatives are needed on both the <img> element itself (to convey the informative context) and on each of the <area> elements (to convey the link destination or the action that will be initiated if the link is followed).\nthe following organizational chart is used to provide links to each director's home page. the text alternative for the image is “board of directors and related staff:”. each linked <area> has a text alternative to identify the individual – for example, “davy jones: chairman”. the text alternative for individuals also state their relation in the graph.\nexample: code snippet: <img src999=\"orgchart.png\"\nalt=\"board of directors and related staff: \"\nusemap=\"#map\">\n<map id=\"map\" name=\"map\">\n<area shape=\"rect\"\ncoords=\"176,14,323,58\"\nhref=\"[…]\"\nalt=\"davy jones: chairman\">\n[…]\n<area shape=\"rect\"\ncoords=\"6,138,155,182\"\nhref=\"[…]\"\nalt=\"harry h brown: marketing director (reports to chairman)\">\n[…]\n</map>\nfull code for image map example\nbrowser implementation for image maps varies at the time of writing; see this html bug. to accommodate for the different implementations, keep in mind to:\nuse every image map only once. that means if multiple images with the same map are to be used, the map should be duplicated and have a different ids;\nplace the <map> element as a direct sibling to the image.\nnote: image maps may not function correctly on some mobile devices if the coordinates for the areas are not scaled using the same proportions as the image. to compensate for this you could provide redundant text links on the same page.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nh24: providing text alternatives for the area elements of image maps\nh37: using alt attributes on img elements\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersonthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/images/tips/":{"title":"\n  Tips and Tricks\n\n\n       • Images\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["tips","other w3c resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ntips and tricks\n• images\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ntips and tricks\nchoosing appropriate text alternatives: imagine that you’re reading the web page aloud over the phone to someone who needs to understand the page. this should help you decide what (if any) information or function the images have. if they appear to have no informative value and aren’t links or buttons, it’s probably safe to treat them as decorative.\nprioritize information in text alternative: aim to put the most important information at the beginning.\nlength of the text alternative: the alt text should be the most concise description possible of the image’s purpose. if anything more than a short phrase or sentence is needed, it would be better to use one of the long description methods discussed in complex images.\npunctuation within alt attributes:\nas for any text, using punctuation in the text alternative makes the information easier to understand. in particular, remember to add space characters in the alt text when there’s no space character between the image and adjacent text, to avoid having words running together when they are read by a screen reader.\nif you use a null (empty) text alternative (alt=\"\") to hide decorative images, make sure that there is no space character in between the quotes. if a space character is present, the image may not be effectively hidden from assistive technologies. for instance, some screen readers will still announce the presence of an image if a space is put between the quotes.\nsuperfluous information in the text alternative: usually there’s no need to include words like “image”, “icon”, or “picture” in the alt text. people who can see will know this already, and screen readers announce the presence of an image. in some situations it may be important to distinguish between a painting, photograph, or illustration etc., but it’s best to avoid the more generic use of the terms.\nsvg graphics:\nsvg graphics can be referenced in the src attribute of an <img> element like other image formats (png, jpeg, gif). in this case the examples of this tutorial can be used with svg as well.\nas svg images consist of tags like html, their code can also be used in html5 directly. in this case you can provide a text alternative in a <title> element within the svg image. to improve accessibility support, that title should be referenced from an aria-labelledby attribute of the <svg> element, for example:\n<svg aria-labelledby=\"svgtitle1\"> <title id=\"svgtitle1\">settings</title> [other svg code] </svg>\nlogos: logo images with text are exempt from some of the accessibility requirements. for instance, there is no minimum contrast requirement.\nbackground information on providing text alternatives for non-text content in how people with disabilities use the web.\ntest the accessibility of images on your site: quick checks image text alternatives.\nexamples of good and bad practice in selecting text alternatives can be found in the before and after demonstration (bad).\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersonsharron rushthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/carousels/structure/":{"title":"\n  Structure\n\n\n       • Carousels\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["carousel framework","list of items","set of articles","label carousels","item structure","brief content","complex content","carousel styling","styled carousel","featured articles:","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nstructure\n• carousels\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nstructure\nprovide structural markup for the carousel and its items, and later enhance these structures with styling and scripting. this ensures that the content of the carousel has meaning on its own, without styling and scripting, and can be rendered and used in more situations.\na carousel is a collection of items that are displayed one at a time. provide a corresponding structure in the code to represent this collection of items.\nin many situations, the carousel items are fairly brief so that a simple a list (<ul>) with individual list items (<li>) is sufficient to represent the carousel. see the example below for a demo of this robust approach:\ncode snippet: <div class=\"carousel\">\n<ul>\n<li class=\"slide\">…</li>\n<li class=\"slide\">…</li>\n<li class=\"slide\">…</li>\n</ul>\n</div>\nif carousel items have a lot of complex content, other elements can be used for the carousel framework. for example, html5 provides the <article> element, which is useful for carousels with items that are independent pieces of content. make sure to provide headings for each article. the example below shows the use of <article> elements to represent a carousel.\ncode snippet: <div class=\"carousel\">\n<article class=\"slide\">\n<h4>…</h4>\n…\n</article>\n<article class=\"slide\">\n<h4>…</h4>\n…\n</article>\n<article class=\"slide\">\n<h4>…</h4>\n…\n</article>\n</div>\nfor assistive technology users, it is important to add information to the carousel container that informs the user where the carousel starts and ends, as a carousel is typically a distinct part of a web page. a heading (<h1> to <h6>) or wai-aria attributes can be used to label them.\nusing headings\nin the example below, a heading shows the start of the carousel, the end of the carousel would be marked by the next heading of the same level.\ncode snippet: <div class=\"carousel\">\n<h3>recent news</h3>\n<article class=\"slide\">\n<h4>…</h4>\n…\n</article>\n…\n</div>\nusing wai-aria roles and labels\nto group the carousel in a way that is perceivable for assistive technologies, the role attribute with a value of region can be used. to identify the region, the aria-label attribute can be used, as show in the example below:\ncode snippet: <div class=\"carousel\" role=\"region\" aria-label=\"recent news\">\n…\n</div>\nif there is already some text identifying the carousel in html, it is usually more appropriate to use the aria-labelledby attribute to assign that text to the carousel.\ncode snippet: <div class=\"carousel\" role=\"region\" aria-labelledby=\"carouselheading\">\n<h3 id=\"carouselheading\">recent news</h3>\n…\n</div>\nprovide proper structure for content within individual carousel items. this makes them independent pieces of content that can be rendered and used in different ways.\nin the following example, each carousel item only consists of an image, so that a simple list is used to represent the carousel. the carousel itself is identified using a heading, and the text alternatives are provided for the images within the carousel items. the code provides structure and meaning, even without any styling and scripting added.\ncode snippet: <h3>photos of our trip to paris:</h3>\n<div class=\"carousel\">\n<ul>\n<li class=\"slide\">\n<img src999=\"path/to/image1.jpg\" alt=\"alternative text 1\">\n</li>\n<li class=\"slide\">\n<img src999=\"path/to/image2.jpg\" alt=\"alternative text 2\">\n</li>\n<li class=\"slide\">\n<img src999=\"path/to/image3.jpg\" alt=\"alternative text 3\">\n</li>\n</ul>\n</div>\nthis example also uses a list, even though the carousel items consist of more substantial content than in the previous example. this approach was selected as the individual carousel items are not independent pieces of content and thus not suitable for the <article> element. each individual list item includes a heading, text, and links.\ncode snippet: <h3>featured articles:</h3>\n<div class=\"carousel\">\n<ul>\n<li class=\"slide\" style=\"background-image: url('teddy1.jpg');\">\n<h4>space teddy production reaches all-time high</h4>\n<p>\nteddies in space inc. has released outstanding numbers for the last solar year.\n<a href=\"…\">full annual report</a>\n</p>\n</li>\n<li class=\"slide\" style=\"background-image: url('teddy2.jpg');\">\n<h4>new space teddy announced!</h4>\n<p>\nspace teddy 6 wears an aluminum space suit. sapphire glass eyes are first used universe-wide.\n<a href=\"…\">everything about the new model</a>\n</p>\n</li>\n<li class=\"slide\" style=\"background-image: url('teddy3.jpg');\">\n<h4>adventures of the space teddy</h4>\n<p>\nusing modern html5 technologies, the latest installment of our game performs great on your computer, tablet, or mobile.\n<a href=\"…\">play the game here!</a>\n</p>\n</li>\n</ul>\n</div>\nat this stage the carousel does not have any functionality. this is added later using scripting, based on the class names of the elements. this ensures that if scripting is not enabled for various reasons, including bad network connection or user choice, the content will still be meaningful.\nthis does not prevent you from providing the basic styling for the carousel so that it looks appropriate even when scripting is not enabled. in many cases carousels are styled with background images and overlaid text, so contrast ratio (“color contrast”) requirements need to be met.\nthe example below shows how the carousel structure from the previous example is styled. as the background images can be distracting, using a background color for the overlaying text is a good way to ensure a good ratio even if images change. in this example, a semi-transparent background is used behind the overlaid text. note that the opacity is high (80%) to make sure that the contrast ratio is met. testing for contrast ratio conformance needs to be done using the resulting, visible color on the element, not the semi-transparent base color.\nnote: the carousel demo in this tutorial has a fixed-width implementation to keep the tutorial simple.\nexample: space teddy production reaches all-time high\nteddies in space inc. has released outstanding numbers for the last solar year.\nfull annual report\nnew space teddy announced!\nspace teddy 6 wears an aluminum space suit. sapphire glass eyes are first used universe-wide.\neverything about the new model\nadventures of the space teddy\nusing modern html5 technologies, the latest installment of our game performs great on your computer, tablet, or mobile.\nplay the game here!\n.carousel, .slide {\nwidth: 480px;\npadding:0;\nmargin: 0;\n/* overflow: hidden; */\n}\n.carousel {\nposition: relative;\n}\n.carousel ul {\nmargin:0;\npadding: 0;\n}\n.slide {\n/*position: absolute;*/\nheight: 360px;\nbackground-size: cover;\nposition: relative;\nmargin-bottom:1em;\nborder:1px solid #333;\n}\n.slide h4 {\ndisplay:inline-block;\nfloat:righ;\nfont-size: 1.25em;\nmargin:0;\npadding: .25em;\ntext-align: right;\nbackground-color: rgba(255,255,255,.8);\nfloat:right;\nborder-radius: 0 0 0 .5em;\n}\n.slide p {\nposition: absolute;\nbottom: 0;\nleft: 0;\nright: 0;\nmargin:0;\nclear:both;\npadding: 1em 5em 1em 3em;\nbackground-color: rgba(255,255,255,.8);\n}\n.slide a {\ndisplay:block;\ntext-align: right;\n}\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n1.3.1 info and relationships: information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (level a)\n2.4.6 headings and labels: headings and labels describe topic or purpose. (level aa)\ntechniques:\ng130: providing descriptive headings\nh42: using h1-h6 to identify headings\nh48: using ol, ul and dl for lists or groups of links\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\ndraft, approved by eowg, updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/carousels/functionality/":{"title":"\n  Functionality\n\n\n       • Carousels\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["displaying carousel items","scripted styling","featured articles:","switching carousel items","previous and next buttons","featured articles:","indicating carousel items","carousel item indicator","focusing carousel items","focus change","putting it all together","featured articles:","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nfunctionality\n• carousels\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nfunctionality\nprovide functionality using scripting to display the carousel items one at a time, and to allow users to browse through them.\ncarousel items that are visually hidden should also be hidden from assistive technology, to avoid a mismatch between what is visually on the screen and what the user is interacting with. all carousel items that are not displayed visually are hidden by using the css display: none declaration.\nin the example below, javascript is used to add the class name .active to the carousel container. the styling hides all the slides in a stack with only the slide with the class name .current being visible on top.\ncode snippet: css\n.active .slide {\ndisplay: none;\nposition: absolute;\ntop: 0;\nleft: 0;\nborder: none;\n}\n.slide.current {\ndisplay: block;\nz-index: 500;\n}\nthe outcome looks like this:\nexample: space teddy production reaches all-time high\nteddies in space inc. has released outstanding numbers for the last solar year.\nfull annual report\nnew space teddy announced!\nspace teddy 6 wears an aluminum space suit. sapphire glass eyes are first used universe-wide.\neverything about the new model\nadventures of the space teddy\nusing modern html5 technologies, the latest installment of our game performs great on your computer, tablet, or mobile.\nplay the game here!\n.carousel, .slide {\nwidth: 480px;\npadding:0;\nmargin: 0;\n}\n.carousel {\nposition: relative;\n}\n.carousel ul {\nmargin:0;\npadding: 0;\n}\n.slide {\n/*position: absolute;*/\nheight: 360px;\nbackground-size: cover;\nposition: relative;\nmargin-bottom:1em;\nborder:1px solid #333;\n}\n.slide h4 {\ndisplay:inline-block;\nfloat:righ;\nfont-size: 1.25em;\nmargin:0;\npadding: .25em;\ntext-align: right;\nbackground-color: rgba(255,255,255,.8);\nfloat:right;\nborder-radius: 0 0 0 .5em;\n}\n.slide p {\nposition: absolute;\nbottom: 0;\nleft: 0;\nright: 0;\nmargin:0;\nclear:both;\npadding: 1em 5em 1em 3em;\nbackground-color: rgba(255,255,255,.8);\n}\n.slide a {\ndisplay:block;\ntext-align: right;\n}\n.carousel.active {\nheight: 360px;\noverflow: hidden;\nborder: 1px solid #333;\nposition:relative;\n}\n.active .slide {\nborder: none;\ndisplay: none;\nposition:absolute;\ntop:0;\nleft:0;\nz-index:200;\n}\n.slide.current {\ndisplay:block;\nz-index: 500;\n}\nvar carousel = document.getelementbyid('c1');\ncarousel.queryselectorall('.slide')[0].classname = 'current slide';\ncarousel.classname = 'active carousel';\nscripting is further used to add buttons that allow users to switch back and forth between carousel items. while these buttons have various visual styles, it is useful to code them using <button> elements. this gives them semantic meaning and also makes them more compatible with assistive technology and keyboard use. if the carousel uses <a> elements instead, a href attribute needs to be present to enable keyboard access. additionally role=\"button\" should be applied to the link so assistive technology users know that they expect an interaction on the page rather than a link to another page.\nin the example below, javascript is used to generate code for the buttons and insert them onto the carousel. these particular buttons are visually displayed as arrows that overlay the carousel items. the images use the alternative text that reads \"previous slide\" and \"next slide\".\na semi-transparent white background with black arrows was selected to ensure sufficient color contrast between the text and any background images in the carousel items. this is especially important for noisy background images. also, the buttons increase in size when users hover over them with the mouse to provide more click area for people with reduced dexterity. they also increase in size when they are focused by keyboard to better highlight where the current focus is.\ncode snippet: javascript\nvar ctrls = document.createelement('ul');\nctrls.classname = 'controls';\nctrls.innerhtml = '<li>' +\n'<button type=\"button\" class=\"btn-prev\">' +\n'<img src999=\"img/chevron-left.png\" alt=\"previous slide\">' +\n'</button>' +\n'</li>' +\n'<li>' +\n'<button type=\"button\" class=\"btn-next\">' +\n'<img src999=\"img/chevron-right.png\" alt=\"next slide\">' +\n'</button>' +\n'</li>';\nctrls.queryselector('.prev').addeventlistener('click', function(){\nprevslide();\n});\nctrls.queryselector('.next').addeventlistener('click', function(){\nnextslide();\n});\ncarousel.appendchild(ctrls);\ncode snippet: css\n.btn-prev,\n.btn-next {\nposition: absolute;\nz-index: 700;\ntop: 50%;\nmargin-top: -2.5em;\nborder:0;\nbackground: rgba(255,255,255,.6);\nline-height: 1;\npadding:2em .5em;\ntransition: padding .4s ease-out;\n}\n.btn-next:hover, .btn-next:focus,\n.btn-prev:hover, .btn-prev:focus {\npadding-left: 2em;\npadding-right: 2em;\n}\n.btn-prev {\nleft:0;\nborder-radius: 0 .25em .25em 0;\n}\n.btn-next {\nright:0;\nborder-radius: .25em 0 0 .25em;\n}\nadditionally, a wai-aria live region should be used to inform screen reader users which slide is now visible. note that the slide does not receive focus as a user might want to skip several slides without navigating to the controls after every slide change.\ncode snippet: extend event listeners\nctrls.queryselector('.prev').addeventlistener('click', function(){\nannounceslide = true;\nprevslide();\n});\nctrls.queryselector('.next').addeventlistener('click', function(){\nannounceslide = true;\nnextslide();\n});\n…\nfunction setslides(new_current, focus, transition) {\n…\nslides[index].removeattribute('aria-live');\nif (announceslide) {\nslides[new_current].setattribute('aria-live', 'polite');\nannounceslide = false;\n}\n…\n}\nthe outcome looks like this:\nexample: space teddy production reaches all-time high\nteddies in space inc. has released outstanding numbers for the last solar year.\nfull annual report\nnew space teddy announced!\nspace teddy 6 wears an aluminum space suit. sapphire glass eyes are first used universe-wide.\neverything about the new model\nadventures of the space teddy\nusing modern html5 technologies, the latest installment of our game performs great on your computer, tablet, or mobile.\nplay the game here!\n.btn-prev,\n.btn-next {\nposition:absolute;\nz-index: 700;\ntop: 50%;\nmargin-top: -2.5em;\nborder:0;\nbackground: rgba(255,255,255,.6);\nline-height: 1;\npadding:2em .5em;\ntransition: padding .4s ease-out;\n}\n.btn-next:hover,\n.btn-next:focus,\n.btn-prev:hover,\n.btn-prev:focus {\npadding-left: 2em;\npadding-right:2em;\n}\n.btn-prev {\nleft:0;\nborder-radius: 0 .25em .25em 0;\n}\n.btn-next {\nright:0;\nborder-radius: .25em 0 0 .25em;\n}\nfunction setslides(new_current, setfocus) {\nsetfocus = typeof setfocushere !== 'undefined' ? setfocushere : false;\nslides[index].removeattribute('aria-live');\nnew_current = parsefloat(new_current);\nvar length = slides.length;\nvar new_next = new_current+1;\nvar new_prev = new_current-1;\nif(new_next === length) {\nnew_next = 0;\n} else if(new_prev < 0) {\nnew_prev = length-1;\n}\nfor (var i = slides.length - 1; i >= 0; i--) {\nslides[i].classname = \"slide\";\n};\nslides[new_next].classname = 'next slide';\nslides[new_prev].classname = 'prev slide';\nslides[new_current].classname = 'current slide';\nif (announceslide) {\nslides[new_current].setattribute('aria-live', 'polite');\nannounceslide = false;\n}\nif (setfocus) {\nslides[new_current].setattribute('tabindex', '-1');\nslides[new_current].focus();\n}\nindex = new_current;\n}\nfunction nextslide() {\nvar length = slides.length,\nnew_current = index + 1;\nif(new_current === length) {\nnew_current = 0;\n}\nsetslides(new_current);\n}\nfunction prevslide() {\nvar length = slides.length,\nnew_current = index - 1;\nif(new_current < 0) {\nnew_current = length-1;\n}\nsetslides(new_current);\n}\nvar carousel = document.getelementbyid('c2');\nvar slides = carousel.queryselectorall('.slide');\nvar index;\ncarousel.classname = 'active carousel';\nfunction foreachelement(elements, fn) {\nfor (var i = 0; i < elements.length; i++)\nfn(elements[i], i);\n}\nvar parsehtml = function(str) {\nvar el =\nel.innerhtml = str;\nreturn el;\n};\nvar ctrls = document.createelement('ul');\nctrls.classname = 'controls';\nctrls.innerhtml = '<li>' +\n'<button type=\"button\" class=\"btn-prev\"><img src999=\"/img/chevron-left-75c7dd0b.png\" alt=\"previous slide\"></button>' +\n'</li>' +\n'<li>' +\n'<button type=\"button\" class=\"btn-next\"><img src999=\"/img/chevron-right-2f19bc8b.png\" alt=\"next slide\"></button>' +\n'</li>';\nctrls.queryselector('.btn-prev').addeventlistener('click', function(){\nannounceslide = true;\nprevslide();\n});\nctrls.queryselector('.btn-next').addeventlistener('click', function(){\nannounceslide = true;\nnextslide();\n});\ncarousel.appendchild(ctrls);\nindex = 0;\nsetslides(index);\n.carousel.with-slidenav {\npadding-bottom: 4em;\nbackground-color: #fff;\n}\n.carousel.with-slidenav .slide {\nborder-bottom: 1px solid #333;\n}\n.slidenav {\nposition: absolute;\nbottom:1em;\nleft: 0;\nright: 0;\ntext-align: center;\n}\n.slidenav li {\ndisplay:inline-block;\nmargin: 0 .5em;\n}\n.slidenav button {\nborder: 2px solid #036;\nbackground-color: #036;\nline-height: 1em;\nheight: 2em;\nwidth:2em;\nfont-weight: bold;\ncolor: #fff;\n}\n.slidenav button.current {\nborder-radius: .5em;\nbackground-color: #fff;\ncolor: #333;\n}\n.slidenav button:hover,\n.slidenav button:focus {\nborder: 2px dashed #fff;\n}\n.slidenav button.current:hover,\n.slidenav button.current:focus {\nborder: 2px dashed #036;\n}\nindicating the total number of carousel items and which one of them is currently being displayed helps users to orient themselves. ideally this is done by a set of styled buttons that each represent a carousel item in the sequence. providing these buttons within a list, adds meaning and semantics to the content, such as the number and order of the carousel items.\nin the following example, a list with buttons is added using javascript and then styled to look visually like a progress indicator. the buttons are numbered matching the corresponding carousel items. the button corresponding to the currently displayed carousel item is highlighted both visually and using visually hidden text. also the button that currently has the keyboard or mouse focus is highlighted.\ncode snippet: <ul class=\"slidenav\">\n<li>\n<button class=\"current\" data-slide=\"0\">\n<span class=\"visuallyhidden\">news</span> 1\n<span class=\"visuallyhidden\">(current slide)</span>\n</button>\n</li>\n<li>\n<button data-slide=\"1\">\n<span class=\"visuallyhidden\">news</span> 2\n</button>\n</li>\n<li>\n<button data-slide=\"2\">\n<span class=\"visuallyhidden\">news</span> 3\n</button>\n</li>\n</ul>\ncode snippet: css\n.slidenav button {\nborder: 2px solid #036;\nbackground-color: #036;\nline-height: 1em;\nheight: 2em;\nwidth: 2em;\nfont-weight: bold;\ncolor: #fff;\n}\n.slidenav button.current {\nborder-radius: .5em;\nbackground-color: #fff;\ncolor: #333;\n}\n.slidenav button:hover,\n.slidenav button:focus {\nborder: 2px dashed #fff;\n}\n.slidenav button.current:hover,\n.slidenav button.current:focus {\nborder: 2px dashed #036;\n}\nexample: news 1\n(current slide)\nnews 2\nnews 3\n.slidenav.as-sample {\nposition:static;\n}\nwhen users select a carousel item directly through the buttons then the focus needs to be set to the corresponding carousel item. the focus should not be set to the carousel item if the previous or next buttons are used, as the user may want to skip over several carousel items quickly and would use the position otherwise.\ncarousel items will often be coded using elements that, by default, are not focusable, such as <li> or <article> elements. use the tabindex attribute with its value set to -1, to make such elements capable of receiving focus using javascript, then set the focus on them.\nthe code snippet below shows the javascript code used in the demo for this tutorial. it illustrates how the tabindex attribute and the focus are set when a carousel item is selected, and how the carousel item indicator is updated accordingly.\ncode snippet: javascript\nfunction setslides(new_current, setfocus) {\nsetfocus = typeof setfocushere !== 'undefined' ? setfocushere : false;\nnew_current = parsefloat(new_current);\nvar length = slides.length;\nslide[index].classname = 'slide';\nslides[new_current].classname = 'current slide';\nbuttons[index].classname = \"\";\nbuttons[new_current].classname = \"current\";\nif (setfocus) {\n// only if the slide was directly\n// picked from the list of slides\nslides[new_current].setattribute('tabindex', '-1');\nslides[new_current].focus();\n}\nindex = new_current;\n}\nslidenav.addeventlistener('click', function(event) {\nif (event.target.localname == 'button') {\nsetslides(event.target.getattribute('data-slide'), true);\n}\n}, true);\nthe sample below is a demo of the carousel that we've built by putting together the previous examples. it is a working example of a carousel where one carousel item at a time is displayed. it includes buttons for users to advance back and forth between the carousel items, and a carousel item indicator that allows users to view which carousel item they are currently viewing and to jump to other carousel items. animating this carousel will be explained on the next page.\nexample: space teddy production reaches all-time high\nteddies in space inc. has released outstanding numbers for the last solar year.\nfull annual report\nnew space teddy announced!\nspace teddy 6 wears an aluminum space suit. sapphire glass eyes are first used universe-wide.\neverything about the new model\nadventures of the space teddy\nusing modern html5 technologies, the latest installment of our game performs great on your computer, tablet, or mobile.\nplay the game here!\n.btn-prev,\n.btn-next {\nposition:absolute;\nz-index: 700;\ntop: 50%;\nmargin-top: -2.5em;\nborder:0;\nbackground: rgba(255,255,255,.6);\nline-height: 1;\npadding:2em .5em;\ntransition: padding .4s ease-out;\n}\n.btn-next:hover,\n.btn-next:focus,\n.btn-prev:hover,\n.btn-prev:focus {\npadding-left: 2em;\npadding-right:2em;\n}\n.btn-prev {\nleft:0;\nborder-radius: 0 .25em .25em 0;\n}\n.btn-next {\nright:0;\nborder-radius: .25em 0 0 .25em;\n}\nvar mycarousel = (function() {\nvar carousel, slides, index, slidenav, settings;\nfunction foreachelement(elements, fn) {\nfor (var i = 0; i < elements.length; i++)\nfn(elements[i], i);\n}\nvar parsehtml = function(str) {\nvar el =\nel.innerhtml = str;\nreturn el;\n};\nfunction init(set) {\nsettings = set;\ncarousel = document.getelementbyid(settings.id);\nslides = carousel.queryselectorall('.slide');\ncarousel.classname = 'active carousel';\nvar ctrls = document.createelement('ul');\nctrls.classname = 'controls';\nctrls.innerhtml = '<li>' +\n'<button type=\"button\" class=\"btn-prev\"><img alt=\"previous slide\" src999=\"../../img/chevron-left-75c7dd0b.png\" /></button>' +\n'</li>' +\n'<li>' +\n'<button type=\"button\" class=\"btn-next\"><img alt=\"next slide\" src999=\"../../img/chevron-right-2f19bc8b.png\" />' +\n'</li>';\nctrls.queryselector('.btn-prev').addeventlistener('click', function(){\nprevslide();\n});\nctrls.queryselector('.btn-next').addeventlistener('click', function(){\nnextslide();\n});\ncarousel.appendchild(ctrls);\nif (settings.slidenav) {\nslidenav = document.createelement('ul');\nslidenav.classname = 'slidenav';\nforeachelement(slides, function(el, i){\nvar li = document.createelement('li');\nvar klass = (i===0) ? 'class=\"current\" ' : '';\nvar kurrent = (i===0) ? ' <span class=\"visuallyhidden\">(current slide)</span>' : '';\nli.innerhtml = '<button '+ klass +'data-slide=\"' + i + '\"><span class=\"visuallyhidden\">news</span> ' + (i+1) + kurrent + '</button>';\nslidenav.appendchild(li);\n});\nslidenav.addeventlistener('click', function(event) {\nif (event.target.localname == 'button') {\nsetslides(event.target.getattribute('data-slide'), true);\n}\n}, true);\ncarousel.classname = 'active carousel with-slidenav';\ncarousel.appendchild(slidenav);\n}\nindex = 0;\nsetslides(index);\n}\nfunction setslides(new_current, setfocus) {\nsetfocus = typeof setfocushere !== 'undefined' ? setfocushere : false;\nnew_current = parsefloat(new_current);\nvar length = slides.length;\nvar new_next = new_current+1;\nvar new_prev = new_current-1;\nif(new_next === length) {\nnew_next = 0;\n} else if(new_prev < 0) {\nnew_prev = length-1;\n}\nfor (var i = slides.length - 1; i >= 0; i--) {\nslides[i].classname = \"slide\";\n};\nslides[new_next].classname = 'next slide';\nslides[new_prev].classname = 'prev slide';\nslides[new_current].classname = 'current slide';\nif(settings.slidenav) {\nvar buttons = carousel.queryselectorall('.slidenav button');\nfor (var i = buttons.length - 1; i >= 0; i--) {\nbuttons[i].classname = \"\";\n};\nbuttons[new_current].classname = \"current\";\n}\nif (setfocus) {\nslides[new_current].setattribute('tabindex', '-1');\nslides[new_current].focus();\n}\nindex = new_current;\n}\nfunction nextslide() {\nvar length = slides.length,\nnew_current = index + 1;\nif(new_current === length) {\nnew_current = 0;\n}\nsetslides(new_current);\n}\nfunction prevslide() {\nvar length = slides.length,\nnew_current = index - 1;\nif(new_current < 0) {\nnew_current = length-1;\n}\nsetslides(new_current);\n}\nreturn {\ninit:init,\nnext:nextslide,\nprev:prevslide,\ngoto:setslides\n}\n});\nvar c3 = new mycarousel;\nc3.init({\nid: 'c3',\nslidenav: true\n});\n.carousel.with-slidenav {\npadding-bottom: 4em;\nbackground-color: #fff;\n}\n.carousel.with-slidenav .slide {\nborder-bottom: 1px solid #333;\n}\n.slidenav {\nposition: absolute;\nbottom:1em;\nleft: 0;\nright: 0;\ntext-align: center;\n}\n.slidenav li {\ndisplay:inline-block;\nmargin: 0 .5em;\n}\n.slidenav button {\nborder: 2px solid #036;\nbackground-color: #036;\nline-height: 1em;\nheight: 2em;\nwidth:2em;\nfont-weight: bold;\ncolor: #fff;\n}\n.slidenav button.current {\nborder-radius: .5em;\nbackground-color: #fff;\ncolor: #333;\n}\n.slidenav button:hover,\n.slidenav button:focus {\nborder: 2px dashed #fff;\n}\n.slidenav button.current:hover,\n.slidenav button.current:focus {\nborder: 2px dashed #036;\n}\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n1.3.1 info and relationships: information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (level a)\n2.1.1 keyboard: all functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user’s movement and not just the endpoints. (level a)\n2.4.7 focus visible: any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. (level aa)\n4.1.2 name, role, value: for all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (level a)\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\ndraft, approved by eowg, updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/carousels/animations/":{"title":"\n  Animations\n\n\n       • Carousels\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["stop button","pause when focused","hiding in-transition elements from assistive technologies","finalized carousel","featured articles:","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nanimations\n• carousels\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nanimations\ncarousels typically periodically rotate the displayed items. provide users with control over any animations in your carousel. providing different ways for users to stop this animation is essential for people who might find the changes distracting, and for people who need more time to read carousel items.\none common approach to control carousel animations is to provide a button to allow users to stop and resume the animations. the example below, illustrates how such a button might be marked-up. the button label and its function alternate, depending on whether the animation is currently on or off:\ncode snippet: <button data-action=\"stop\"><span class=\"visuallyhidden\">stop animation </span>￭</button>\ncode snippet: <button data-action=\"start\"><span class=\"visuallyhidden\">start animation </span>▶</button>\nnote: the script only replaces the value of the button rather than to replace the button entirely. if the button is removed, then the focus would be lost for keyboard users.\nanother useful approach is to pause the carousel animation when the carousel receives focus by keyboard or is hovered over by mouse. pausing the animation ensures that keyboard users do not lose focus when the carousel item is changed. it is also useful for people who need more time to read the content and to maneuver the mouse to a link or control inside the carousel item.\ncode snippet: carousel.addeventlistener('mouseenter', suspendanimation);\ncarousel.addeventlistener('mouseleave', startanimation);\ncarousel.addeventlistener('focusin',\nfunction(event) {\nif (!hasclass(event.target, 'slide')) {\nsuspendanimation();\n}\n}\n);\ncarousel.addeventlistener('focusout',\nfunction(event) {\nif (!hasclass(event.target, 'slide')) {\nstartanimation();\n}\n}\n);\nnote: the focusin and focusout events are defined in the w3c document object model (dom) level 3 events specification (working draft) and implemented in many browsers. firefox needs a short polyfill at the time of publication of this tutorial.\nwhile the slides that leave the viewport are visible during transition, they should not be available to assistive technologies as this can lead to confusion. to ensure that the slides are ignored by assistive technologies, the aria-hidden attribute should be set. the following example shows that after determining what the new order of slides is, either the next or the previous slide gets an in-transition class, which makes the item visible. it also is set to aria-hidden. the aria-hidden attribute is then removed from the new current menu item.\ncode snippet: javascript: in initialization\nslides[new_next].classname = 'next slide'\n+ ((transition == 'next') ? ' in-transition' : '');\nslides[new_next].setattribute('aria-hidden', 'true');\nslides[new_prev].classname = 'prev slide'\n+ ((transition == 'prev') ? ' in-transition' : '');\nslides[new_prev].setattribute('aria-hidden', 'true');\nslides[new_current].classname = 'current slide';\nslides[new_current].removeattribute('aria-hidden');\nthe sample below is a demo of the final carousel that is built by putting together all examples of this tutorial:\nexample: space teddy production reaches all-time high\nteddies in space inc. has released outstanding numbers for the last solar year.\nfull annual report\nnew space teddy announced!\nspace teddy 6 wears an aluminum space suit. sapphire glass eyes are first used universe-wide.\neverything about the new model\nadventures of the space teddy\nusing modern html5 technologies, the latest installment of our game performs great on your computer, tablet, or mobile.\nplay the game here!\n.active .slide {\ndisplay: block !important;\nvisibility: hidden;\ntransition: left .6s ease-out;\n}\n.active .slide.current {\nvisibility: visible;\nleft: 0;\n}\n.active .slide.next {\nleft: 100%;\n}\n.active .slide.prev {\nleft: -100%;\n}\n.active .slide.next.in-transition,\n.active .slide.prev.in-transition {\nvisibility:visible;\n}\n.carousel, .slide {\nwidth: 480px;\npadding:0;\nmargin: 0;\noverflow: hidden;\n}\n.carousel {\nposition: relative;\n}\n.carousel ul {\nmargin:0;\npadding: 0;\n}\n.slide {\n/*position: absolute;*/\nheight: 360px;\nbackground-size: cover;\nposition: relative;\nmargin-bottom:1em;\nborder:1px solid #333;\n}\n.slide h4 {\ndisplay:inline-block;\nfloat:righ;\nfont-size: 1.25em;\nmargin:0;\npadding: .25em;\ntext-align: right;\nbackground-color: rgba(255,255,255,.8);\nfloat:right;\nborder-radius: 0 0 0 .5em;\n}\n.slide p {\nposition: absolute;\nbottom: 0;\nleft: 0;\nright: 0;\nmargin:0;\nclear:both;\npadding: 1em 5em 1em 3em;\nbackground-color: rgba(255,255,255,.8);\n}\n.slide a {\ndisplay:block;\ntext-align: right;\n}\n.carousel.active {\nheight: 360px;\n/* overflow:hidden; */\nborder: 1px solid #333;\nposition:relative;\n}\n.active .slide {\nborder: none;\ndisplay: none;\nposition:absolute;\ntop:0;\nleft:0;\nz-index:200;\n}\n.slide.current {\ndisplay:block;\nz-index: 500;\n}\n.btn-prev,\n.btn-next {\nposition:absolute;\nz-index: 700;\ntop: 50%;\nmargin-top: -2.5em;\nborder:0;\nbackground: rgba(255,255,255,.6);\nline-height: 1;\npadding:2em .5em;\ntransition: padding .4s ease-out;\n}\n.btn-next:hover,\n.btn-next:focus,\n.btn-prev:hover,\n.btn-prev:focus {\npadding-left: 2em;\npadding-right:2em;\n}\n.btn-prev {\nleft:0;\nborder-radius: 0 .25em .25em 0;\n}\n.btn-next {\nright:0;\nborder-radius: .25em 0 0 .25em;\n}\n.carousel.with-slidenav {\npadding-bottom: 4em;\nbackground-color: #fff;\n}\n.carousel.with-slidenav .slide {\nborder-bottom: 1px solid #333;\n}\n.slidenav {\nposition: absolute;\nbottom:1em;\nleft: 0;\nright: 0;\ntext-align: center;\n}\n.slidenav li {\ndisplay:inline-block;\nmargin: 0 .5em;\n}\n.slidenav button {\nborder: 2px solid #036;\nbackground-color: #036;\nline-height: 1em;\nheight: 2em;\nwidth:2em;\nfont-weight: bold;\ncolor: #fff;\n}\n.slidenav button.current {\nborder-radius: .5em;\nbackground-color: #fff;\ncolor: #333;\n}\n.slidenav button:hover,\n.slidenav button:focus {\nborder: 2px dashed #fff;\n}\n.slidenav button.current:hover,\n.slidenav button.current:focus {\nborder: 2px dashed #036;\n}\n/* focusin/out event polyfill (firefox) */\n!function(){\nvar w = window,\nd = w.document;\nif( w.onfocusin === undefined ){\nd.addeventlistener('focus' ,addpolyfill ,true);\nd.addeventlistener('blur' ,addpolyfill ,true);\nd.addeventlistener('focusin' ,removepolyfill ,true);\nd.addeventlistener('focusout' ,removepolyfill ,true);\n}\nfunction addpolyfill(e){\nvar type = e.type === 'focus' ? 'focusin' : 'focusout';\nvar event = new customevent(type, { bubbles:true, cancelable:false });\nevent.c1generated = true;\ne.target.dispatchevent( event );\n}\nfunction removepolyfill(e){\nif(!e.c1generated){ // focus after focusin, so chrome will the first time trigger tow times focusin\nd.removeeventlistener('focus' ,addpolyfill ,true);\nd.removeeventlistener('blur' ,addpolyfill ,true);\nd.removeeventlistener('focusin' ,removepolyfill ,true);\nd.removeeventlistener('focusout' ,removepolyfill ,true);\n}\nsettimeout(function(){\nd.removeeventlistener('focusin' ,removepolyfill ,true);\nd.removeeventlistener('focusout' ,removepolyfill ,true);\n});\n}\n}();\nvar mycarousel = (function() {\nvar carousel, slides, index, slidenav, settings, timer, setfocus, animationsuspended, announceslide = false;\nfunction foreachelement(elements, fn) {\nfor (var i = 0; i < elements.length; i++)\nfn(elements[i], i);\n}\nfunction removeclass(el, classname) {\nif (el.classlist) {\nel.classlist.remove(classname);\n} else {\nel.classname = el.classname.replace(new regexp('(^|\\\\b)' + classname.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n}\n}\nfunction hasclass(el, classname) {\nif (el.classlist) {\nreturn el.classlist.contains(classname);\n} else {\nreturn new regexp('(^| )' + classname + '( |$)', 'gi').test(el.classname);\n}\n}\nfunction init(set) {\nsettings = set;\ncarousel = document.getelementbyid(settings.id);\nslides = carousel.queryselectorall('.slide');\ncarousel.classname = 'active carousel';\nvar ctrls = document.createelement('ul');\nctrls.classname = 'controls';\nctrls.innerhtml = '<li>' +\n'<button type=\"button\" class=\"btn-prev\"><img alt=\"previous slide\" src999=\"../../img/chevron-left-75c7dd0b.png\" /></button>' +\n'</li>' +\n'<li>' +\n'<button type=\"button\" class=\"btn-next\"><img alt=\"next slide\" src999=\"../../img/chevron-right-2f19bc8b.png\" />' +\n'</li>';\nctrls.queryselector('.btn-prev')\n.addeventlistener('click', function () {\nannounceslide = true;\nprevslide();\n});\nctrls.queryselector('.btn-next')\n.addeventlistener('click', function () {\nannounceslide = true;\nnextslide();\n});\ncarousel.appendchild(ctrls);\nif (settings.slidenav || settings.animate) {\nslidenav = document.createelement('ul');\nslidenav.classname = 'slidenav';\nif (settings.animate) {\nvar li = document.createelement('li');\nif (settings.startanimated) {\nli.innerhtml = '<button data-action=\"stop\"><span class=\"visuallyhidden\">stop animation </span>￭</button>';\n} else {\nli.innerhtml = '<button data-action=\"start\"><span class=\"visuallyhidden\">start animation </span>▶</button>';\n}\nslidenav.appendchild(li);\n}\nif (settings.slidenav) {\nforeachelement(slides, function(el, i){\nvar li = document.createelement('li');\nvar klass = (i===0) ? 'class=\"current\" ' : '';\nvar kurrent = (i===0) ? ' <span class=\"visuallyhidden\">(current slide)</span>' : '';\nli.innerhtml = '<button '+ klass +'data-slide=\"' + i + '\"><span class=\"visuallyhidden\">news</span> ' + (i+1) + kurrent + '</button>';\nslidenav.appendchild(li);\n});\n}\nslidenav.addeventlistener('click', function(event) {\nvar button = event.target;\nif (button.localname == 'button') {\nif (button.getattribute('data-slide')) {\nstopanimation();\nsetslides(button.getattribute('data-slide'), true);\n} else if (button.getattribute('data-action') == \"stop\") {\nstopanimation();\n} else if (button.getattribute('data-action') == \"start\") {\nstartanimation();\n}\n}\n}, true);\ncarousel.classname = 'active carousel with-slidenav';\ncarousel.appendchild(slidenav);\n}\nslides[0].parentnode.addeventlistener('transitionend', function (event) {\nvar slide = event.target;\nremoveclass(slide, 'in-transition');\nif (hasclass(slide, 'current')) {\nslide.removeattribute('aria-live');\nannounceslide = false;\nif(setfocus) {\nslide.setattribute('tabindex', '-1');\nslide.focus();\nsetfocus = false;\n}\n}\n});\ncarousel.addeventlistener('mouseenter', suspendanimation);\ncarousel.addeventlistener('mouseleave', function(event) {\nif (animationsuspended) {\nstartanimation();\n}\n});\ncarousel.addeventlistener('focusin', function(event) {\nif (!hasclass(event.target, 'slide')) {\nsuspendanimation();\n}\n});\ncarousel.addeventlistener('focusout', function(event) {\nif (!hasclass(event.target, 'slide') && animationsuspended) {\nstartanimation();\n}\n});\nindex = 0;\nsetslides(index);\nif (settings.startanimated) {\ntimer = settimeout(nextslide, 5000);\n}\n}\nfunction setslides(new_current, setfocushere, transition) {\nsetfocus = typeof setfocushere !== 'undefined' ? setfocushere : false;\ntransition = typeof transition !== 'undefined' ? transition : 'none';\nnew_current = parsefloat(new_current);\nvar length = slides.length;\nvar new_next = new_current+1;\nvar new_prev = new_current-1;\nif(new_next === length) {\nnew_next = 0;\n} else if(new_prev < 0) {\nnew_prev = length-1;\n}\nfor (var i = slides.length - 1; i >= 0; i--) {\nslides[i].classname = \"slide\";\n}\nslides[new_next].classname = 'next slide' + ((transition == 'next') ? ' in-transition' : '');\nslides[new_next].setattribute('aria-hidden', 'true');\nslides[new_prev].classname = 'prev slide' + ((transition == 'prev') ? ' in-transition' : '');\nslides[new_prev].setattribute('aria-hidden', 'true');\nslides[new_current].classname = 'current slide';\nslides[new_current].removeattribute('aria-hidden');\nif (announceslide) {\nslides[new_current].setattribute('aria-live', 'polite');\n}\nif(settings.slidenav) {\nvar buttons = carousel.queryselectorall('.slidenav button[data-slide]');\nfor (var j = buttons.length - 1; j >= 0; j--) {\nbuttons[j].classname = '';\nbuttons[j].innerhtml = '<span class=\"visuallyhidden\">news</span> ' + (j+1);\n}\nbuttons[new_current].classname = \"current\";\nbuttons[new_current].innerhtml = '<span class=\"visuallyhidden\">news</span> ' + (new_current+1) + ' <span class=\"visuallyhidden\">(current slide)</span>';\n}\nindex = new_current;\n}\nfunction nextslide() {\nvar length = slides.length,\nnew_current = index + 1;\nif(new_current === length) {\nnew_current = 0;\n}\nsetslides(new_current, false, 'prev');\nif (settings.animate) {\ntimer = settimeout(nextslide, 5000);\n}\n}\nfunction prevslide() {\nvar length = slides.length,\nnew_current = index - 1;\nif(new_current < 0) {\nnew_current = length-1;\n}\nsetslides(new_current, false, 'next');\n}\nfunction stopanimation() {\ncleartimeout(timer);\nsettings.animate = false;\nanimationsuspended = false;\n_this = carousel.queryselector('[data-action]');\n_this.innerhtml = '<span class=\"visuallyhidden\">start animation </span>▶';\n_this.setattribute('data-action', 'start');\n}\nfunction startanimation() {\nsettings.animate = true;\nanimationsuspended = false;\ntimer = settimeout(nextslide, 5000);\n_this = carousel.queryselector('[data-action]');\n_this.innerhtml = '<span class=\"visuallyhidden\">stop animation </span>￭';\n_this.setattribute('data-action', 'stop');\n}\nfunction suspendanimation() {\nif(settings.animate) {\ncleartimeout(timer);\nsettings.animate = false;\nanimationsuspended = true;\n}\n}\nreturn {\ninit:init,\nnext:nextslide,\nprev:prevslide,\ngoto:setslides,\nstop:stopanimation,\nstart:startanimation\n};\n});\nvar c = new mycarousel();\nc.init({\nid: 'c',\nslidenav: true,\nanimate: true,\nstartanimated: true\n});\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n2.2.2 pause, stop, hide: for moving, blinking, scrolling, or auto-updating information, all of the following are true:moving, blinking, scrolling: for any moving, blinking or scrolling information that (1) starts automatically, (2) lasts more than five seconds, and (3) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential; andauto-updating: for any auto-updating information that (1) starts automatically and (2) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it or to control the frequency of the update unless the auto-updating is part of an activity where it is essential. (level a)\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\ndraft, approved by eowg, updated\n27 february 2015\neditors:\neric eggertshadi abou-zahra\ncontributors: the education and outreach working group (eowg).\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/forms/labels/":{"title":"\n  Labeling Controls\n\n\n       • Forms\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["associating labels explicitly","hiding label text","associating labels implicitly","labelling buttons","visual position of label text","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nlabeling controls\n• forms\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nlabeling controls\nprovide labels to identify all form controls, including text fields, checkboxes, radio buttons, and drop-down menus. in most cases this is done by using the <label> element.\nlabels need to describe the purpose of the form control. this section of the tutorial describes how to provide labels that are properly associated with form controls. later sections explain how to provide instructions, validate user input, and provide feedback to help users complete your form.\na label and a form control need to be associated with each other either implicitly or explicitly. web browsers provide the label as a larger clickable area, for example, to select or activate the control. it also ensures that assistive technology is able to refer to the correct label when presenting a form control.\nwhenever possible, use the label element to explicitly associate text with form elements. the for attribute of the label must exactly match the id of the form control.\nexample: first name: subscribe to newsletter\ncode snippet: html\n<label for=\"firstname\">first name:</label>\n<input type=\"text\" name=\"firstname\" id=\"firstname\"><br>\n<input type=\"checkbox\" name=\"subscribe\" id=\"subscribe\">\n<label for=\"subscribe\">subscribe to newsletter</label>\na label for a form control helps everyone better understand its purpose. in some cases the purpose may be clear enough from the context when the content is rendered visually. in such cases a label can be hidden visually, though it still needs to be provided within the code to support other forms of presentation and interaction, such as for screen reader and speech input users. the method used in this tutorial to hide an element visually but make it available for assistive technologies is explained in note on hiding element.\nin the example below, the search field is positioned directly beside the search button. the purpose of the text input field is evident from the context in most situations.\nexample: search: search\nhiding the label element\nin this approach, the <label> element is provided to identify a form control within the code, but it is visually hidden to avoid redundancy for users who can derive the purpose from the visual cues.\ncode snippet: <label for=\"search\" class=\"visuallyhidden\">search: </label>\n<input type=\"text\" name=\"search\" id=\"search\">\n<button type=\"submit\">search</button>\nusing aria-label\nthe aria-label attribute can also be used to identify form controls. this approach is generally well supported by screen readers and other assistive technology, but, unlike the title attribute (see next section), the information is not conveyed to visual users.\ncode snippet: <input type=\"text\" name=\"search\" aria-label=\"search\">\n<button type=\"submit\">search</button>\nusing the title attribute\nthe title attribute can also be used to identify form controls. this approach is generally less reliable and not recommended because some screen readers and assistive technologies do not interpret the title attribute as a replacement for the label element, possibly because the title attribute is often used to provide non-essential information. the information of the title attribute is shown to visual users as a tool tip when hovering over the form field with the mouse.\nexample: search\ncode snippet: <input title=\"search\" type=\"text\" name=\"search\">\n<button type=\"submit\">search</button>\nnote on hiding elements\nscreen readers and other assistive technology, just as web browsers, hide elements from their users when they are styled using display: none; and visibility: hidden;.\nthe common approach used to hide information visually but keep them available to screen reader and other assistive technology users, is to use css that will keep the information technically visible but practically hidden. for example, presenting the label in a 1-by-1 pixel area with a 1-pixel margin, as demonstrated with the css class visuallyhidden (do not confuse with css visibility: hidden) below:\ncode snippet: .visuallyhidden {\nborder: 0;\nclip: rect(0 0 0 0);\nheight: 1px;\nmargin: -1px;\noverflow: hidden;\npadding: 0;\nposition: absolute;\nwidth: 1px;\n}\nin some situations, form controls cannot be labelled explicitly. for example, a content author might not know the id of a form field generated by a script, or that script might not add an id at all. in this case the label element is used as a container for both the form control and the label text, so that the two are associated implicitly.\ncode snippet: html\n<label>\nfirst name:\n<input type=\"text\" name=\"firstname\">\n</label>\n<br>\n<label>\n<input type=\"checkbox\" name=\"subscribe\">\nsubscribe to newsletter\n</label>\nthe label of a <button> element is set inside the element and can include markup. this allows more advanced accessibility hints to be included, like marking up language change. when using the <input> element to create buttons, the label is set in the value attribute of the element.\ncode snippet: html\n<button type=\"submit\">submit</button>\n<button type=\"button\">cancel</button>\n<input type=\"submit\" value=\"submit\">\n<input type=\"button\" value=\"cancel\">\nnote: if the image button (<input type=\"image\">) is used, the label is set in the alt attribute, for example:\n<input type=\"image\" src999=\"searchbutton.png\" alt=\"search\">. see functional images for more information on how to describe images in buttons.\nin left-to-right languages it is customary to visually position labels to the right of radio buttons and checkboxes, and to the left or directly above other form fields. maintaining this practice increases predictability and understandability of your form for all users.\nin general, placing labels above the form fields helps reduce horizontal scrolling for people with low vision and for mobile device users. however, the usefulness of this approach depends on other design aspects, such as the proximity of other nearby form fields and content, and needs to be assessed individually. the aim should be to maintain a close and distinct visual relationship between the label and the form control.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n1.3.1 info and relationships: information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (level a)\n2.4.6 headings and labels: headings and labels describe topic or purpose. (level aa)\n3.3.2 labels or instructions: labels or instructions are provided when content requires user input. (level a)\n4.1.2 name, role, value: for all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (level a)\ntechniques:\ng17: ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text\ng18: ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text\ng131: providing descriptive labels\ng162: positioning labels to maximize predictability of relationships\ng167: using an adjacent button to label the purpose of a field\nh44: using label elements to associate text labels with form controls\nh65: using the title attribute to identify form controls when the label element cannot be used\nh93: ensuring that id attributes are unique on a web page\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/forms/grouping/":{"title":"\n  Grouping Controls\n\n\n       • Forms\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["associating related controls with fieldset","radio buttons","checkboxes","related fields","associating related controls with wai-aria","grouping items in select elements","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ngrouping controls\n• forms\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ngrouping controls\ngrouping related form controls makes forms more understandable for all users, as related controls are easier to identify. it also makes it easier for people to focus on smaller and more manageable groups rather than try to grasp the entire form at once.\ngrouping needs to be carried out visually and in the code, for example, by using the <fieldset> and <legend> elements to associate related form controls. also, related entries of a <select> element can be grouped using <optgroup>.\nthe <fieldset> element provides a container for related form controls, and the <legend> element acts like a heading to identify the group.\nthe legend for a group of controls can also highlight common attributes of all controls, for example to advise that all fields in the group are required.\nin the example below, there are three radio buttons that allow the user to choose an output format. radio button groups should always be grouped using <fieldset>.\nexample: output format\ntext file\ncsv file\nhtml file\ncode snippet: <fieldset>\n<legend>output format</legend>\n<div>\n<input type=\"radio\" name=\"format\" id=\"txt\" value=\"txt\" checked>\n<label for=\"txt\">text file</label>\n</div>\n<div>\n<input type=\"radio\" name=\"format\" id=\"csv\" value=\"csv\">\n<label for=\"csv\">csv file</label>\n</div>\n[…]\n</fieldset>\nin the example below, there are three checkboxes that are all part of an opt-in function for receiving different types of information.\nexample: i want to receive\nthe weekly newsletter\noffers from the company\noffers from associated companies\ncode snippet: <fieldset>\n<legend>i want to receive</legend>\n<div>\n<input type=\"checkbox\" name=\"newsletter\" id=\"check_1\">\n<label for=\"check_1\">the weekly newsletter</label>\n</div>\n[…]\n</fieldset>\nthis example shows form fields to enter shipping and billing addresses. as the labels in both groups have the same text, the fieldset element also helps to distinguish the form fields by their groups. in case the <legend> is not read by screen readers (see note below), labels for the first form control in each group should include the group’s name. this name can be hidden visually.\nexample: shipping address:\nshipping name:\nstreet:\nnumber:\ncity:\nzip code:\nbilling address:\nbilling name:\nstreet:\nnumber:\ncity:\nzip code:\ncode snippet: <fieldset>\n<legend>shipping address:</legend>\n<div>\n<label for=\"shipping_name\">\n<span class=\"visuallyhidden\">shipping </span>name:\n</label><br>\n<input type=\"text\" name=\"shipping_name\" id=\"shipping_name\">\n</div>\n<div>\n<label for=\"shipping_street\">street:</label><br>\n<input type=\"text\" name=\"shipping_street\" id=\"shipping_street\">\n</div>\n[…]\n</fieldset>\n<fieldset>\n<legend>billing address:</legend>\n<div>\n<label for=\"billing_name\">\n<span class=\"visuallyhidden\">billing </span>name:\n</label><br>\n<input type=\"text\" name=\"billing_name\" id=\"billing_name\">\n</div>\n<div>\n<label for=\"billing_street\">street:</label><br>\n<input type=\"text\" name=\"billing_street\" id=\"billing_street\">\n</div>\n[…]\n</fieldset>\nnote: depending on the configuration, some screen readers read out the legend either with every form element, once, or, rarely, not at all. to accommodate this consider the following:\nmake the legend as short as possible for situations in which it is read together with the label each time.\nmake the individual labels sufficiently self-explanatory for situations in which legends are not read aloud, without repeating the legend in every label.\nwai-aria provides a grouping role that functions similarly to fieldset and legend. in this example the div element has role=group to indicate that the contained elements are members of a group and the aria-labelledby attribute references the id for text that will serve as the label for the group.\nthis technique provides additional styling possibilities.\nexample: shipping address:\nshipping name:\nstreet:\nnumber:\ncity:\nzip code:\nbilling address:\nbilling name:\nstreet:\nnumber:\ncity:\nzip code:\nbecause wai-aria not fully supported in all web browser and screen reader combinations, a group identifier should be added to the first form control in the group.\ncode snippet: <div role=\"group\" aria-labelledby=\"shipping_head\">\n<div id=\"shipping_head\">shipping address:</div>\n<div>\n<label for=\"shipping_name\">\n<span class=\"visuallyhidden\">shipping </span>name:\n</label><br>\n<input type=\"text\" name=\"shipping_name\" id=\"shipping_name\">\n</div>\n[…]\n</div>\n<div role=\"group\" aria-labelledby=\"billing_head\">\n<div id=\"billing_head\">billing address:</div>\n<div>\n<label for=\"billing_name\">\n<span class=\"visuallyhidden\">billing </span>name:\n</label><br>\n<input type=\"text\" name=\"billing_name\" id=\"billing_name\">\n</div>\n[…]\n</div>\nfor select elements with groups of options, the optgroup element can be used to indicate such groups. the label attribute of the optgroup element is used to provide a label for the group. this is especially useful for lists with many related options. in the example below, users can chose from lectures in one of three courses.\nexample: which course would you like to watch today?\ncourse:\nlecture 01: powers of ten\nlecture 02: 1d kinematics\nlecture 03: vectors\nlecture 01: what holds our world together?\nlecture 02: electric field\nlecture 03: electric flux\nlecture 01: periodic phenomenon\nlecture 02: beats\nlecture 03: forced oscillations with damping\ncode snippet: <select>\n<optgroup label=\"8.01 physics i: classical mechanics\">\n<option value=\"8.01.1\">lecture 01: powers of ten</option>\n<option value=\"8.01.2\">lecture 02: 1d kinematics</option>\n<option value=\"8.01.3\">lecture 03: vectors</option>\n</optgroup>\n<optgroup label=\"8.02 physics ii: electricity and magnestism\">\n<option value=\"8.02.1\">lecture 01: what holds our world together?</option>\n[…]\n</optgroup>\n[…]\n</select>\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n1.3.1 info and relationships: information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (level a)\n3.3.2 labels or instructions: labels or instructions are provided when content requires user input. (level a)\ntechniques:\naria17: using grouping roles to identify related form controls\nh71: providing a description for groups of form controls using fieldset and legend elements\nh85: using optgroup to group option elements inside a select\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/forms/multi-page/":{"title":"\n  Multi-page Forms\n\n\n       • Forms\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["indicating progress","using the page title","using the main heading","using the html5 progress element","using step-by-step indicator","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nmulti-page forms\n• forms\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nmulti-page forms\nwhere possible, divide long forms into multiple smaller forms that constitute a series of logical steps or stages. this helps make long forms less daunting and easier to understand, particularly for people who are less experienced using computers or who have various cognitive disabilities. the following basic principles should apply for multi-step forms:\nrepeat overall instructions on every page.\nsplit the form up according to its logical groups of controls. for example, in an online shop, shipping and payment information are typically separated.\nmake it easy to recognize and to skip optional stages. for example, highlight optional steps in the main heading of the web page and provide an option to skip.\nif possible, don’t set a time limit to fill out the form. if a time limit is required, provide a feature that allows the user to adjust or extend the time limit.\nif possible, the first step of a form should explain how many steps will follow. each step should inform the user about the progress they are making.\nthe <title> element is the first item read by many people, such as screen reader users. changing the title of the page to include the progress gives immediate feedback. this information should precede other information provided in the title, such as the name of the step or any error notifications.\nexample: step 2 of 4: shipping address – complete purchase – galactic teddy bears shop\ncode snippet: <title>step 2 of 4: shipping address – complete purchase – galactic teddy bears shop</title>\nusing the main heading to inform users is a good way to provide the same information for people scanning the page visually, as the main heading usually is prominent in the document.\nexample: shipping address (step 2 of 4)\ncode snippet: <h1>shipping address (step 2 of 4)</h1>\nhtml5 provides a progress element that can be used to inform users about the progress. this can be particularly useful in situations where the number of steps depends on user input, such as in a survey where steps are skipped depending on how questions were answered.\nexample: survey (step 2 of circa 7)\nsurvey (step 3 of circa 7)\nsurvey (step 6 of circa 7)\nsurvey (finished)\nprogress {\ncolor: #036;\nfont-size: .6em;\nline-height: 1.5em;\ntext-indent: .5em;\nwidth: 15em;\nheight: 1em;\nborder: 1px solid #036;\nborder-radius: 1em;\nbackground: #fff;\noverflow:hidden;\n}\nprogress::-webkit-progress-bar {\nbackground-color:#036;\n}\nprogress::-moz-progress-bar {\nbackground-color:#036;\n}\ncode snippet: survey <progress max=\"7\" value=\"1\">(step 2 of circa 7)</progress><br>\nsurvey <progress max=\"7\" value=\"3\">(step 3 of circa 7)</progress><br>\nsurvey <progress max=\"7\" value=\"6\">(step 6 of circa 7)</progress><br>\nsurvey <progress max=\"7\" value=\"7\">(finished)</progress>\nthe progress element, like other form elements, is a component from the operating system rendered directly on the website. those components are animated in some operating systems which would violate wcag 2.0’s 2.2.2 pause, stop, hide success criterion that requires that users are able to disable an animation that starts automatically, lasts more than 5 seconds and is presented in parallel with other content.\nthe animation can be stopped by using custom styling with browser-specific css as shown below.\ncode snippet: /* microsoft ie */\nprogress {\ncolor: #036;\n}\n/* apple safari and google chrome */\nprogress::-webkit-progress-bar {\nbackground-color: #036;\n}\n/* mozilla firefox */\nprogress::-moz-progress-bar {\nbackground-color: #036;\n}\nif a form has a known number of steps to be completed, a step-by-step indicator can help users orient themselves. in the example below, we use an ordered list with a list item for every step. visually hidden text is used to indicate the current and completed steps. if possible, provide a link to steps already completed, so the user can review them. in this case, any data already entered in the current step should be saved.\nexample: completed: billing address\ncurrent: shipping address\nreview order\npayment\nfinish purchase\n.tlwrapper {\ndisplay:table;\nwidth: 100%;\n}\n.timeline {\ndisplay: table-row;\ncounter-reset: timeline;\n}\n.timeline li {\ndisplay: table-cell;\nwidth: 20%;\ncounter-increment: timeline;\nlist-style: none;\ntext-align: center;\npadding: .25em .5em;\noverflow:hidden;\nposition: relative;\nbackground-color: #fff;\npadding-left: 25px;\nwhite-space: nowrap;\n}\n.timeline li:first-child {\npadding-left: 0;\n}\n.timeline li:after {\nleft: 0;\ntop: 50%;\nborder: solid transparent;\ncontent: \" \";\nheight: 0;\nwidth: 0;\nposition: absolute;\npointer-events: none;\nborder-color: rgba(151, 204, 237, 0);\nborder-left-color: #ccc;\nborder-width: 20px;\nmargin-top: -20px;\n}\n.timeline li:first-child:after {\ndisplay: none;\n}\n.timeline li a, .timeline li > span {\nz-index: 100;\nposition: relative;\ndisplay: block;\ncolor: #555;\n}\n.timeline li a:before, .timeline li > span:before {\ndisplay: inline-block;\ncolor: #555;\ncontent: counter(timeline);\nbackground-color: none;\nborder: 3px solid #555;\nmargin-right:.25em;\nborder-radius: 5px;\npadding: 0 .25em;\n}\n.timeline li.timeline-current > span, .timeline li.timeline-current a {\ncolor: #036;\nfont-weight: bold;\n}\n.timeline li.timeline-current > span:before {\ncolor: #fff;\nbackground-color: #036;\nborder-color: #036;\n}\n.timeline li.timeline-past {\nbackground-color: #ccc;\n}\n.timeline li.timeline-past a:before {\ncolor: green;\ncontent: \"\\2713\";\nbackground-color: #fff;\nborder-color: green;\n}\n.timeline li.timeline-past a:hover:before,\n.timeline li.timeline-past a:focus:before {\nbackground-color: green;\ncolor: #fff;\n}\ncode snippet: html\n<div class=\"tlwrapper\">\n<ol class=\"timeline\">\n<li class=\"timeline-past\">\n<span class=\"visuallyhidden\">completed: </span>\n<a href=\"billing.html\">billing address</a>\n</li>\n<li class=\"timeline-current\">\n<span class=\"visuallyhidden\">current: </span>\n<span>shipping address</span>\n</li>\n<li><span>review order</span></li>\n<li><span>payment</span></li>\n<li><span>finish purchase</span></li>\n</ol>\n</div>\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n1.3.1 info and relationships: information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (level a)\n2.2.1 timing adjustable: for each time limit that is set by the content, at least one of the following is true:turn off: the user is allowed to turn off the time limit before encountering it; oradjust: the user is allowed to adjust the time limit before encountering it over a wide range that is at least ten times the length of the default setting; orextend: the user is warned before time expires and given at least 20 seconds to extend the time limit with a simple action (for example, \"press the space bar\"), and the user is allowed to extend the time limit at least ten times; orreal-time exception: the time limit is a required part of a real-time event (for example, an auction), and no alternative to the time limit is possible; oressential exception: the time limit is essential and extending it would invalidate the activity; or20 hour exception: the time limit is longer than 20 hours. (level a)\n3.3.2 labels or instructions: labels or instructions are provided when content requires user input. (level a)\ntechniques:\ng133: providing a checkbox on the first page of a multipart form that allows users to ask for longer session time limit or no session time limit\ng180: providing the user with a means to set the time limit to 10 times the default time limit\ng198: providing a way for the user to turn the time limit off\nh71: providing a description for groups of form controls using fieldset and legend elements\nscr1: allowing the user to extend the default time limit\nscr16: providing a script that warns the user a time limit is about to expire\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/forms/validation/":{"title":"\n  Validating Input\n\n\n       • Forms\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["validating required input","validating common input","validating patterned input","car license plate numbers","be forgiving of different input formats","client-side validation benefits","validation by the user","require user confirmation","provide undo functionality","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nvalidating input\n• forms\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nvalidating input\nin addition to providing instructions, validate user input to help users avoid mistakes. html5 defines a range of built-in functionality to validate common types of input, such as email addresses and dates. in some situations, such as validating custom controls or supporting legacy browsers, additional scripting may be necessary to validate user input.\ncustom validation needs to notify users in an accessible way as described in the user notifications part of this tutorial. client-side validation alone does not ensure security; therefore data needs to be validated on the server-side as well.\nforms frequently include required input that needs to be clearly identified using labels. in addition, the required attribute can be added to form controls, to programmatically indicate that they are required. most current web browsers support this attribute and will communicate missing required input to the user, using standard web browser dialog mechanisms. these dialogs are expected to respect the settings and preferences of the user in the web browser (and operating system), such as default font-size, colors, and language.\nin the example below, the required attribute is added to the input field. if your web browser supports html5 it will not allow you to submit the form without entering text into the input field. instead, it will display a message that is generated by the web browser itself.\nnote that the label also displays “(required)”, to inform users that don’t use assistive technology or use older web browsers that do not support the html5 required attribute.\nexample: name (required): code snippet: <label for=\"name\">name (required): </label>\n<input type=\"text\" name=\"name\" id=\"name\" required aria-required=\"true\">\nnote: the aria-required attribute informs assistive technologies about required controls so that they are appropriately announced to the users (as opposed to validating the input). most current web browsers automatically set its value to true when the html5 required attribute is present. in this example it is provided redundantly to support web browsers that don’t communicate the required attribute to assistive technology.\nhtml5 also provides input types for other data, including email, url, number, range, date, or time. most current web browsers support these features and handle input validation. in addition, html5 validation helps users inputting data by providing specific controls, such as date pickers and custom on-screen keyboards. html5 input types are displayed as simple text input fields in older web browsers that do not support these html5 features.\nthe example below shows these html5 input types in action. depending on your web browser, the “range” input field will be displayed as a slider control to help users provide input more easily. similarly the “number” input field may be displayed with buttons to increase or decrease the number incrementally. input errors, such as an incorrect email address, will be indicated using the web browser dialogs as in the previous example.\nexample: email: website: number: range: date: time: #valform {display:table}\n#valform>div {display:table-row}\n#valform>div>div {display:table-cell; padding: .1em;}\ncode snippet: <div>\n<label for=\"email\">email: </label>\n<input type=\"email\" name=\"email\" id=\"email\">\n</div>\n<div>\n<label for=\"url\">website: </label>\n<input type=\"url\" name=\"url\" id=\"url\">\n</div>\n<div>\n<label for=\"number\">number: </label>\n<input type=\"number\" name=\"number\" id=\"number\" min=\"0\" max=\"100\" step=\"10\" value=\"0\">\n</div>\n<div>\n<label for=\"range\">range: </label>\n<input type=\"range\" name=\"range\" id=\"range\" min=\"0\" max=\"100\" step=\"10\" value=\"0\">\n</div>\n<div>\n<label for=\"date\">date: </label>\n<input type=\"date\" name=\"date\" id=\"date\">\n</div>\n<div>\n<label for=\"time\">time: </label>\n<input type=\"time\" name=\"time\" id=\"time\">\n</div>\nnote: several of these html5 input types have additional parameters to help limit and validate the input. they include:\nmaxlength defines the maximum length of a text field.\nmin and max define the minimum and maximum of number and range fields.\nsteps defines in what steps number and range fields can be incremented and decremented.\nthe html5 pattern attribute allows the use of regular expressions to specify custom formats for the input. this is useful for specific types of data patterns such as telephone numbers, postal codes, and serial numbers.\nin the example below, the pattern attribute of the input element specifies a particular format that matches car license plate (registration) numbers in germany. the required pattern consists of one to three letters (for the city where the car is registered), followed by a space, two to four random letters, another space, then one to four random numbers.\nexample: german license plate (ccc xxxx 9999): code snippet: <div>\n<input type=\"text\" id=\"license\"\npattern=\"[a-zöäü]{1,3}( )[a-z]{2,4}( )[0-9]{1,4}\"\n>\n</div>\nvalidation should aim to be as accommodating as possible of different forms of input for particular data types. for example, telephone numbers are written with different separators and digit groupings. your form will be easier to use if it can interpret multiple notations. also, it is helpful to be liberal with input. for example, postal codes aren't confined to just numbers in some countries, so using an input of the type number can easily become a problem for many of your website users.\nin general, client-side validation results in a better user experience and makes resolving validation errors more understandable. it can also reduce network and server load. however, not all web browsers support html5, or they may not support your custom validation scripts. client-side validation can also be easily bypassed, or the data is changed before reaching the server. this means that validation needs to be carried out server-side as well.\nwhere possible, users should be able to check their own input and correct it if necessary. this is particularly important for actions that are permanent or otherwise critical, but also when data cannot be automatically checked. for example, providing users with the option to check the postal address that they provided can be useful before a purchase is completed.\nwhere possible, require user confirmation for irreversible actions, such as permanent deletion of data. examples include:\na cms allows users to permanently delete comments from the trash folder. when this action is initiated, a dialog box is displayed to the user to confirm the action.\na banking application requires users to confirm transfer transactions by selecting a checkbox labeled “i have checked that the amount i wish to transfer is correct”.\na shopping website displays a summary of the order, shipping address, and billing information that the user must confirm before the purchasing transaction is completed and the order is placed.\nwhere possible, provide undo mechanisms for reversible actions. examples include:\na content management system (cms) has the ability to delete unwanted comments. instead of deleting them right away, they are stored in a “trash” folder so that they can be restored.\na webmail application allows users to “undo” sending an email for a few seconds. this is useful if the user forgot to attach a file or sent the email to the wrong recipient.\na shopping website lets users cancel purchases up to 24 hours after the order is submitted. the website explains the policy, and includes a summary of the policy on the purchase receipt emailed to the user. after 24 hours, the purchase will be shipped to the user and can no longer be canceled.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n3.3.1 error identifications: if an input error is automatically detected, the item that is in error is identified and the error is described to the user in text. (level a)\n3.3.4 error prevention (legal, financial, data): for web pages that cause legal commitments or financial transactions for the user to occur, that modify or delete user-controllable data in data storage systems, or that submit user test responses, at least one of the following is true: reversible, checked, confirmed (level aa)\ntechniques:\ng83: providing text descriptions to identify required fields that were not completed\ng85: providing a text description when user input falls outside the required format or values\ng98: providing the ability for the user to review and correct answers before submitting\ng155: providing a checkbox in addition to a submit button\ng164: providing a stated time within which an online request (or transaction) may be amended or canceled by the user after making the request\ng168: requesting confirmation to continue with selected action\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/forms/custom-controls/":{"title":"\n  Custom Controls\n\n\n       • Forms\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["a share button","a star rating","we welcome your ideas","document information"],"0.3,tutorial,example":["\ncustom controls\n• forms\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ncustom controls\nsometimes form designs require something beyond what is achievable with standard form controls. in such cases it is possible to build additional functionality and styling to standard controls. to ensure robustness, try to reuse html elements that do a subset of the functionality that the final control is intended to cover, and build from there. the following examples provide some general guidance on what to consider to ensure the additions are made accessible.\nfor components where there is no adequate html element to build on, wai-aria attributes can be useful to convey the functionality for people using assistive technologies.\nthe example below shows a social media \"share button\" that has two functions: it shows how many people have already activated the button (\"shared\"), and allows users to press the button to activate the share function.\nthe custom button relies on css to style a regular <button> element, so that the basic functionality remains intact when it is rendered without css. for example, most screen readers will announce the button and its contents.\nin addition, the action attribute of the <form> element references a server-side script that carries out the same functionality for cases when javascript is not supported.\nexample: 3\nshares\n#share-btn {\nline-height: 1;\nfloat:none;\n}\n#share-btn[disabled] {\nbackground: #063;\nborder: 1px solid #063;\n}\n#share-btn[disabled]:hover,\n#share-btn[disabled]:focus {\ntext-decoration: none;\n}\n#share-btn[disabled] .count {\ncolor: #063;\n}\n#share-btn .count {\nbackground-color: #fff;\ncolor: #036;\nmin-width: 1em;\nline-height: 1;\ndisplay: inline-block;\nborder-radius: 50px;\nborder: 4px solid #fff;\ntext-align: center;\n}\ndocument.getelementbyid('share-btn').removeattribute('disabled');\ndocument.getelementbyid('share-btn').addeventlistener('click', function(event){\nevent.preventdefault();\nevent.stopimmediatepropagation();\nvar count = this.queryselector('.count');\nvar text = this.queryselector('.text');\ncount.textcontent = parseint(count.textcontent) + 1;\ntext.textcontent = \"shared ✓\";\nthis.setattribute(\"disabled\", \"true\");\n});\ncode snippet: html\n<form action=\"path/to/submit\">\n<button type=\"submit\" id=\"share-btn\" class=\"btn-primary\">\n<span class=\"count\">3</span>\n<span class=\"text\">shares</span>\n</button>\n</form>\ncode snippet: javascript\ndocument.getelementbyid('share-btn').addeventlistener('click', function(event){\nevent.preventdefault();\nevent.stopimmediatepropagation();\nvar count = this.queryselector('.count');\nvar text = this.queryselector('.text');\ncount.textcontent = parseint(count.textcontent) + 1;\ntext.textcontent = \"shared ✓\";\nthis.setattribute(\"disabled\", \"true\");\n});\na star rating usually consists of images of five stars that can be used to rate a particular item. a mouse user hovers over the stars and clicks one to select it. for example, if the user clicks on the third star from the left, the rating of the item is 3 of 5 stars.\nto make this as accessible as possible, a form is used with its fields visually hidden. it contains 6 radio buttons, one for each star and another for 0 stars, which is checked by default. the labels for the radio buttons contain actual text (“1 star”, “2 stars”, …), and are also hidden visually. the form also contains a visually hidden submit button so that the form is not automatically submitted when keyboard users browse through the radio buttons.\nthe images of the stars are generated using svg. the coloring animation of these stars is initiated through the css :focus and :hover pseudo classes, so that they can be activated using a mouse, keyboard, and other input methods. the :checked pseudo class and the general sibling selector ~ are used to indicate the selected, active, and inactive stars.\nexample: 0 stars\n1 star\n2 stars\n3 stars 4 stars 5 stars submit rating\n#star_rating svg {\nwidth: 1em;\nheight: 1em;\nfill: currentcolor;\nstroke: currentcolor;\n}\n#star_rating label, #star_rating output {\ndisplay:block;\nfloat:left;\nfont-size: 2em;\nheight: 1.2em;\ncolor: #036;\ncursor: pointer;\nborder-bottom: 2px solid transparent;\n}\n#star_rating output {\nfont-size: 1.5em;\npadding: 0 1em;\n}\n#star_rating input:checked ~ label {\ncolor: #858585;\n}\n#star_rating input:checked + label {\ncolor: #036;\nborder-bottom-color: #036;\n}\n#star_rating input:focus + label {\nborder-bottom-style: dotted;\n}\n#star_rating:hover input + label {\ncolor: #036;\n}\n#star_rating input:hover ~ label,\n#star_rating input:focus ~ label,\n#star_rating input[id=\"star0\"] + label {\ncolor: #999;\n}\n#star_rating input:hover + label,\n#star_rating input:focus + label {\ncolor: #036;\n}\n#star_rating input[id=\"star0\"]:checked + label {\ncolor: #ff2d21;\n}\n#star_rating [type=\"submit\"] {\nfloat: none;\n}\nvar radios = document.queryselectorall('#star_rating input[type=radio]');\nvar btn = document.queryselector('#star_rating button');\nvar output = document.queryselector('#star_rating output');\nvar do_something = function(stars) {\n// an ajax request could send the data to the server\noutput.textcontent = stars;\n};\narray.prototype.foreach.call(radios, function(el, i){\nvar label = el.nextsibling.nextsibling;\nlabel.addeventlistener(\"click\", function(event){\ndo_something(label.queryselector('span').textcontent);\n});\n});\ndocument.queryselector('#star_rating').addeventlistener('submit', function(event){\ndo_something(document.queryselector('#star_rating :checked ~ label span').textcontent);\nevent.preventdefault();\nevent.stopimmediatepropagation();\n});\ncode snippet: html\n<form action=\"#\" id=\"star_rating\">\n<input value=\"0\" id=\"star0\" checked\ntype=\"radio\" name=\"rating\" class=\"visuallyhidden\">\n<label for=\"star0\">\n<span class=\"visuallyhidden\">0 stars</span>\n<svg viewbox=\"0 0 512 512\">\n<g stroke-width=\"70\" stroke-linecap=\"square\">\n<path d=\"m91.5,442.5 l409.366489,124.633512\"></path>\n<path d=\"m90.9861965,124.986197 l409.184248,443.184248\"></path>\n</g>\n</svg>\n</label>\n<input value=\"1\" id=\"star1\"\ntype=\"radio\" name=\"rating\" class=\"visuallyhidden\">\n<label for=\"star1\">\n<span class=\"visuallyhidden\">1 star</span>\n<svg viewbox=\"0 0 512 512\"><path d=\"m512 198.525l-176.89-25.704-79.11-160.291-79.108 160.291-176.892 25.704 128 124.769-30.216 176.176 158.216-83.179 158.216 83.179-30.217-176.176 128.001-124.769z\"></path></svg>\n</label>\n<input value=\"2\" id=\"star2\"\ntype=\"radio\" name=\"rating\" class=\"visuallyhidden\">\n<label for=\"star2\">\n<span class=\"visuallyhidden\">2 stars</span>\n<svg viewbox=\"0 0 512 512\">…</svg>\n</label>\n<input value=\"3\" id=\"star3\"\ntype=\"radio\" name=\"rating\" class=\"visuallyhidden\">\n<label for=\"star3\">\n<span class=\"visuallyhidden\">3 stars</span>\n<svg viewbox=\"0 0 512 512\">…</svg>\n</label>\n<input value=\"4\" id=\"star4\"\ntype=\"radio\" name=\"rating\" class=\"visuallyhidden\">\n<label for=\"star4\">\n<span class=\"visuallyhidden\">4 stars</span>\n<svg viewbox=\"0 0 512 512\">…</svg>\n</label>\n<input value=\"5\" id=\"star5\"\ntype=\"radio\" name=\"rating\" class=\"visuallyhidden\">\n<label for=\"star5\">\n<span class=\"visuallyhidden\">5 stars</span>\n<svg viewbox=\"0 0 512 512\">…</svg>\n</label>\n<button type=\"submit\" class=\"btn-small visuallyhidden focusable\">submit rating</button>\n<output></output>\n</form>\ncode snippet: css\n#star_rating svg {\nwidth: 1em;\nheight: 1em;\nfill: currentcolor;\nstroke: currentcolor;\n}\n#star_rating label, #star_rating output {\ndisplay: block;\nfloat: left;\nfont-size: 2em;\nheight: 1.2em;\ncolor: #036;\ncursor: pointer;\n/* transparent border-bottom avoids jumping\nwhen a colored border is applied\non :hover/:focus */\nborder-bottom: 2px solid transparent;\n}\n#star_rating output {\nfont-size: 1.5em;\npadding: 0 1em;\n}\n#star_rating input:checked ~ label {\ncolor: #999;\n}\n#star_rating input:checked + label {\ncolor: #036;\nborder-bottom-color: #036;\n}\n#star_rating input:focus + label {\nborder-bottom-style: dotted;\n}\n#star_rating:hover input + label {\ncolor: #036;\n}\n#star_rating input:hover ~ label,\n#star_rating input:focus ~ label,\n#star_rating input[id=\"star0\"] + label {\ncolor: #999;\n}\n#star_rating input:hover + label,\n#star_rating input:focus + label {\ncolor: #036;\n}\n#star_rating input[id=\"star0\"]:checked + label {\ncolor: #ff2d21;\n}\n#star_rating [type=\"submit\"] {\nfloat: none;\n}\ncode snippet: javascript\nvar radios = document.queryselectorall('#star_rating input[type=radio]');\nvar output = document.queryselector('#star_rating output');\nvar do_something = function(stars) {\n// an ajax request could send the data to the server\noutput.textcontent = stars;\n};\n// iterate through all radio buttons and add a click\n// event listener to the labels\narray.prototype.foreach.call(radios, function(el, i){\nvar label = el.nextsibling.nextsibling;\nlabel.addeventlistener(\"click\", function(event){\ndo_something(label.queryselector('span').textcontent);\n});\n});\n// if the form gets submitted, do_something\ndocument.queryselector('#star_rating').addeventlistener('submit', function(event){\ndo_something(document.queryselector('#star_rating :checked ~ label span').textcontent);\nevent.preventdefault();\nevent.stopimmediatepropagation();\n});\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/forms/notifications/":{"title":"\n  User Notifications\n\n\n       • Forms\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["overall feedback","using the main heading","using the page title","using dialogs","listing errors","in-line feedback","after submit","during typing","on focus change","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nuser notifications\n• forms\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nuser notifications\nprovide feedback to users about the results of their form submission, whether successful or not. this includes in-line feedback at or near the form controls, and overall feedback that is typically provided after form submission.\nnotifications need to be concise and clear. in particular, error messages should be easy to understand and should provide simple instructions on how they can be resolved. success messages are also important to confirm task completion.\nwhen a form is submitted, it is important that the user is notified whether the submission was successful or if errors occurred. several of the following techniques can be combined.\na common way to provide feedback is by using the main heading of the web page, usually the most prominently displayed <h1> or <h2> element. this technique is particularly useful when forms are processed by the server, but can also be useful for client-side scripting.\ncode snippet: error<h1>3 errors – billing address</h1>\ncode snippet: success<h1>thank you for submitting your order.</h1>\nnote: the main purpose of the main heading is still to identify the web page that the user is currently on. when the user is sent back to the same web page because of an error, then a simple indication using the word “error” and possibly the number of errors is helpful.\nit is often useful to also use the <title> element of the web page to indicate successes and errors. in particular screen reader users will receive this feedback immediately when the web page is loaded. this can be helpful when the main heading is located deeper within the content, for example, after the navigation menus.\ncode snippet: error<title>3 errors – billing address</title>\ncode snippet: success<title>thank you for submitting your order.</title>\na dialog is a common way to inform users of changes. it can be used if other means of informing the user prove to be easily missed. dialogs are more obtrusive and distracting, which may be the desired effect.\njavascript provides a very basic alert dialog box that provides proper keyboard navigation and respects the user’s default settings, including font size, colors, and language. a custom dialog implementation would need to match that functionality.\nthe basic example below shows a pop-up that is displayed when the user activates the “save” button. a message is displayed in the dialog box, and the web page is disabled until the user selects “ok”.\nexample: save\ndocument.getelementbyid('alertconfirm').addeventlistener('click', function(){ alert('thanks for submitting the form!'); });\ncode snippet: html<button type=\"button\" id=\"alertconfirm\">save</button>\ncode snippet: javascriptdocument.getelementbyid('alertconfirm')\n.addeventlistener('click', function() {\n/* [… code saving data …] */\nalert('thanks for submitting the form!');\n});\nwhen errors occur, it is helpful to list them at the top of the page, before the form. the list should have a distinctive heading, so that it is easy to identify. each error listed should:\nreference the label of the corresponding form control, to help the user recognize the control;\nprovide a concise description of the error in a way that is easy to understand by everyone;\nprovide an indication of how to correct mistakes, and remind users of any format requirements;\ninclude an in-page link to the corresponding form control to make access easier for the users.\nsometimes, for example, when using ajax techniques, the browser is not loading a new page but shows changes, such as form errors, dynamically on the page. to inform the user in such a case, the list of errors should be inserted into a prominent container on the top. in addition to the advice above, this container should have the role attribute set to alert to make assistive technology users aware of this change.\nexample: there are 2 errors in this form\nthe first name field is empty, it is a required field and must be filled in.\nthe date field is in the wrong format, it should be similar to 17/09/2013 (use a / to separate day, month, and year).\ncode snippet: <div role=\"alert\">\n<h4>there are 2 errors in this form</h4>\n<ul>\n<li>\n<a href=\"#firstname\" id=\"firstname_error\">\nthe first name field is empty; it is a required field and must be filled in.\n</a>\n</li>\n<li>\n<a href=\"#birthdate\" id=\"birthdate_error\">\nthe date field is in the wrong format; it should be similar to 17/09/2013 (use a / to separate day, month, and year).\n</a>\n</li>\n</ul>\n</div>\nin addition, form fields can be associated with the corresponding error message using aria-describedby.\ncode snippet: <label for=\"firstname\">first name:</label>\n<input type=\"text\" id=\"firstname\" aria-describedby=\"firstname_error\">\nin addition to overall feedback, more specific feedback at or near the form controls can better help users to use your form. this includes feedback to indicate correctly entered input as well as errors in the input.\ntypically a combination of messages and visual cues are used to provide in-line feedback. for example, valid input can be indicated by a checkmark (✓) and green border, while errors can be indicated by an error icon (like a red ✗ or an exclamation mark) and red border. error messages should also provide guidance on how to correct mistakes. the concepts for such error messages are essentially the same as for providing instructions.\nthe example below shows a form with two input fields. the first input field, “username”, is used to register a username. the second input field, “expiry date”, is used to provide a date for when the registration expires.\nwhen the form is submitted, the entries are checked and feedback is provided to the user. appropriate success and error messages are displayed for each input field to help the user complete the form.\nexample: #ex3 div {margin-bottom:.75em;}\n.error {\ncolor: #900;\n}\n.error input {\nborder: 3px solid #900;\n}\n.success {\ncolor: #007a00;\n}\n.success input {\nborder: 3px solid #007a00;\n}\nok: username:\n✓\nerror: expiry date:\nuse the format mm/yyyy.\nsubmit\nvar taken_usernames = ['timbl', 'shadi', 'yatil', 'bim', 'shawn', 'slh', 'spacebear13', 'obelisks', 'phoenix', 'imari', 'henry', 'zeki', 'rome', 'min', ' kelly', 'brynn'];\ndocument.getelementbyid('ex3').addeventlistener('submit', function(event){\nfunction seterror(el, msg) {\nel.parentnode.queryselector('strong').innerhtml = \"error:\";\nel.parentnode.classname='error';\nel.parentnode.queryselector('span').innerhtml = msg;\n}\nfunction setsuccess(el) {\nel.parentnode.queryselector('strong').innerhtml = \"ok:\";\nel.parentnode.classname='success';\nel.parentnode.queryselector('span').innerhtml = \"&check;\";\n}\nvar exp = document.getelementbyid('expire4');\nif (exp.value.match(new regexp('[0-9]{2}\\/[0-9]{4}'))) {\nsetsuccess(exp);\n} else {\nseterror(exp, 'use the format mm/yyyy.');\n}\nvar usr = document.getelementbyid('username4');\nif (taken_usernames.indexof(usr.value.trim())+1 == false) {\nsetsuccess(usr);\n} else {\nseterror(usr, 'username already taken');\n}\nevent.preventdefault();\nreturn false;\n});\ncode snippet: html\n<div class=\"success\">\n<label for=\"username\">\n<strong>ok:</strong> username:\n</label>\n<input type=\"text\" name=\"username\"\nid=\"username\" value=\"spaceteddy13\"\naria-describedby=\"userdesc\">\n<span id=\"userdesc\">✓</span>\n</div>\n<div class=\"error\">\n<label for=\"expire\">\n<strong>error:</strong>\nexpiry date:\n</label>\n<input type=\"text\" name=\"expire\"\nid=\"expire\" value=\"03.2015\"\naria-describedby=\"expdesc\">\n<span id=\"expdesc\">use the format mm/yyyy.</span>\n</div>\n<div>\n<button type=\"submit\">submit</button>\n</div>\ncode snippet: css\n.error { color: #900; }\n.success { color: #007a00; }\n.error input { border: 3px solid #900; }\n.success input { border: 3px solid #007a00; }\ninstant feedback during typing can be extremely helpful. for example, checking the availability of a username in the previous example required the user to resubmit the form – possibly multiple times. providing feedback while users are typing allows them to experiment more easily until they find a suitable username. however, client-side scripting is required for such functionality, and not all situations may be suitable for such feedback.\nbinary messages\nin the following example, the availability of a username is checked instantly while the user is typing text in the input field. corresponding success and error messages are displayed without the user needing to submit the form.\nexample: username:\ndocument.getelementbyid('ex1_username').addeventlistener('keyup', function(){\nfunction seterror(el, msg) {\nel.parentnode.queryselector('strong').innerhtml = \"error:\";\nel.parentnode.classname='error';\nel.parentnode.queryselector('span').innerhtml = msg;\n}\nfunction setsuccess(el) {\nel.parentnode.queryselector('strong').innerhtml = \"ok:\";\nel.parentnode.classname='success';\nel.parentnode.queryselector('span').innerhtml = \"&check;\";\n}\nvar val = this.value;\nif (val !== \"\") {\nif (taken_usernames.indexof(val.trim())+1) {\nseterror(this, '&cross; sorry, this username is taken.');\n} else {\nsetsuccess(this, '&check; you can use this username.');\n}\n} else {\ndocument.getelementbyid('username_feedback').innerhtml = '';\ndocument.getelementbyid('username_feedback').parentnode.classname = '';\ndocument.queryselector('[for=\"ex1_username\"] strong').innerhtml = '';\n}\n});\ncode snippet: html\n<div>\n<label for=\"username\">username:</label>\n<input type=\"text\" name=\"username\" id=\"username\">\n<span id=\"username_feedback\" aria-live=\"polite\"></span>\n</div>\ncode snippet: javascript\ndocument.getelementbyid('username').addeventlistener('keyup', function(){\nfunction seterror(el, msg) {\nel.parentnode.queryselector('strong').innerhtml = \"error:\";\nel.parentnode.classname='error';\nel.parentnode.queryselector('span').innerhtml = msg;\n}\nfunction setsuccess(el) {\nel.parentnode.queryselector('strong').innerhtml = \"ok:\";\nel.parentnode.classname='success';\nel.parentnode.queryselector('span').innerhtml = \"&check;\";\n}\nvar val = this.value;\nif (val !== \"\") {\nif (taken_usernames.indexof(val.trim())+1) {\nseterror(this, '&cross; sorry, this username is taken.');\n} else {\nsetsuccess(this, '&check; you can use this username.');\n}\n} else {\ndocument.getelementbyid('username_feedback').innerhtml = '';\ndocument.getelementbyid('username_feedback')\n.parentnode.classname = '';\ndocument.queryselector('[for=\"username\"] strong').innerhtml = '';\n}\n});\nnote: the displayed message in this example is coded using a <span> element that has an aria-live attribute with the value polite. the contents of this so called “live region” are conveyed to screen readers and other assistive technology. the value “polite” de-emphasizes the importance of the message and does not cause screen readers to interrupt their current tasks to read aloud this message. thus the message is only read once when the user stops typing rather than on every keystroke that the user makes.\nscaled feedback\nthe example below illustrates a range of possible types of feedback in addition to success and error messages. in the example, the strength of the password is checked as it is typed by the user. the feedback indicates a scale of how strong the password is. the feedback is indicated using several cues, including color coding, a barometer, and label “weak”, “okay”, and “strong”, as well as the time that would be needed to crack the password.\nthe password is shown in plain text for demonstration purposes.\nexample: password:\n#passwordmeter {\ndisplay:inline-block;\nwidth:125px;\nheight: 20px;\nborder: 1px solid #666;\nvertical-align:middle;\n}\n#passwordmeter span {\ndisplay:inline-block;\nheight:1em;\nbackground-color: gray;\nwidth:25px;\nheight: 20px;\n}\n(function(){var a;a=function(){var a,b;b=document.createelement(\"script\");b.src999=\"../../javascripts/zxcvbn-2111e2d5.js\";b.type=\"text/javascript\";b.async=!0;a=document.getelementsbytagname(\"script\")[0];return a.parentnode.insertbefore(b,a)};null!=window.attachevent?window.attachevent(\"onload\",a):window.addeventlistener(\"load\",a,!1)}).call(this);\ndocument.getelementbyid('ex2_password').addeventlistener('keyup',\nfunction(){\nvar meter = document.queryselector('#passwordmeter span');\nvar msg = document.getelementbyid('passwordmessage');\nvar pw = zxcvbn(this.value);\nmeter.style.width = (pw.score+1) * 25 + 'px';\nif (pw.score == 0) {\nmeter.style.backgroundcolor = 'red';\nmsg.innerhtml = '<strong>really weak</strong> password';\n} else if (pw.score < 3) {\nmeter.style.backgroundcolor = 'red';\nmsg.innerhtml = '<strong>weak</strong> password (cracked in ' + pw.crack_time_display + ')';\n} else if (pw.score == 3) {\nmeter.style.backgroundcolor = 'yellow';\nmsg.innerhtml = '<strong>good</strong> password (cracked in ' + pw.crack_time_display + ')';\n} else {\nmeter.style.backgroundcolor = 'green';\nmsg.innerhtml = '<strong>strong</strong> password (cracked in ' + pw.crack_time_display + ')';\n}\nif (this.value == \"\") {\nmeter.style.backgroundcolor = 'gray';\nmsg.innerhtml = ' ';\n}\n});\nsee commented example code in full.\nin some cases it does not make sense to check input as it is being typed by the user, because it would display error messages most of the time. this is often the case when data needs to be entered in a particular format, such as a date.\nin the example below, the user is expected to provide an expiry date. the input is checked when the user leaves the form field. that is, when the focus is removed from the form field and the “blur” event is triggered for the element, for example, when the tab key is used to move to the focus to the submit button.\nexample: #ex4 div {margin-bottom:.75em;}\nexpiry date:\nsubmit\ninputs = document.queryselectorall('#ex4 input');\nfor (var i = inputs.length - 1; i >= 0; i--) {\ninputs[i].addeventlistener('blur', function(event){\nfunction seterror(el, msg) {\nel.parentnode.queryselector('strong').innerhtml = \"error:\";\nel.parentnode.classname='error';\nel.parentnode.queryselector('span').innerhtml = msg;\n}\nfunction setsuccess(el) {\nel.parentnode.queryselector('strong').innerhtml = \"ok:\";\nel.parentnode.classname='success';\nel.parentnode.queryselector('span').innerhtml = \"&check;\";\n}\nif (this.id == 'expire5') {\nif (this.value.match(new regexp('[0-9]{2}\\/[0-9]{4}'))) {\nsetsuccess(this);\n} else {\nseterror(this, 'use the format mm/yyyy.');\n}\n} else if (this.id == 'username5') {\nif (taken_usernames.indexof(this.value.trim())+1 == false) {\nsetsuccess(this);\n} else {\nseterror(this, 'username already taken.');\n}\n}\nevent.preventdefault();\nreturn false;\n});\n};\ncode snippet: <div>\n<label for=\"expire\"><strong></strong> expiry date:</label>\n<input type=\"text\" name=\"expire\" id=\"expire\" value=\"03.2015\" aria-describedby=\"expdesc3\">\n<span id=\"expdesc3\" aria-live=\"assertive\"></span>\n</div>\nnote: the displayed message in this example is coded using a <span> element that has an aria-live attribute with the value assertive. the contents of this so called “live region” is conveyed to screen readers and other assistive technology. the value “assertive” emphasizes the importance of the message and causes screen readers to interrupt their current tasks to read aloud this message. thus the message is read aloud before the next element that received the focus is announced to the user.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n3.3.1 error identifications: if an input error is automatically detected, the item that is in error is identified and the error is described to the user in text. (level a)\n3.3.3 error suggestion: if an input error is automatically detected and suggestions for correction are known, then the suggestions are provided to the user, unless it would jeopardize the security or purpose of the content. (level aa)\ntechniques:\naria18: using aria-alertdialog to identify errors\naria19: using aria role=alert or live regions to identify errors\naria21: using aria-invalid to indicate an error field\ng83: providing text descriptions to identify required fields that were not completed\ng85: providing a text description when user input falls outside the required format or values\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/tables/one-header/":{"title":"\n  Tables with one header\n\n\n       • Tables\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["table with header cells in the top row only","table with header cells in the first column only","table with ambiguous data","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ntables with one header\n• tables\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ntables with one header\nthis page covers tables that have one simple header for rows or one simple header for columns. data in such tables is descriptive on its own and unambiguous.\nif the table content is ambiguous or has both column and row headings, the scope attribute should be used to avoid confusion. for more guidance on such tables, see tables with two headers.\nthe following table of concerts has the cells in the first row marked up using the <th> element. this is only acceptable because it is such a small table and the data itself is distinctly different in each column, so that the relationship between the header and data cells is evident.\nnote: some screen readers will read “date – event – venue” on the “venue” cell because the direction of the <th> elements is ambiguous.\nexample: concerts:\ndate\nevent\nvenue\n12 february\nwaltz with strauss\nmain hall\n24 march\nthe obelisks\nwest wing\n14 april\nthe what\nmain hall\ncode snippet: <table>\n<tr>\n<th>date</th>\n<th>event</th>\n<th>venue</th>\n</tr>\n<tr>\n<td>12 february</td>\n<td>waltz with strauss</td>\n<td>main hall</td>\n</tr>\n[…]\n</table>\nin the following table, the data from the previous example is laid out with the header column on the left. also in this situation it is only acceptable to use this codeing because it is such a small and simple table. the next pages in this tutorial explain how to code more complex tables.\nexample: concerts:\ndate\n12 february\n24 march\n14 april\nevent\nwaltz with strauss\nthe obelisks\nthe what\nvenue\nmain hall\nwest wing\nmain hall\ncode snippet: <table>\n<tr>\n<th>date</th>\n<td>12 february</td>\n<td>24 march</td>\n<td>14 april</td>\n</tr>\n<tr>\n<th>event</th>\n<td>waltz with strauss</td>\n<td>the obelisks</td>\n<td>the what</td>\n</tr>\n<tr>\n<th>venue</th>\n<td>main hall</td>\n<td>west wing</td>\n<td>main hall</td>\n</tr>\n</table>\nin this example, the data (first name, last name, and city) can’t be distinguished from one another without knowing which header each corresponds to. the scope attribute with the value col defines the direction of the header cells, and associates them with the corresponding data cells. the scope attribute is also needed for larger tables with one header row or column.\nexample: teddy bear collectors:\nlast name\nfirst name\ncity\nphoenix\nimari\nhenry\nzeki\nrome\nmin\napirka\nkelly\nbrynn\ncode snippet: <table>\n<caption>teddy bear collectors:</caption>\n<tr>\n<th scope=\"col\">last name</th>\n<th scope=\"col\">first name</th>\n<th scope=\"col\">city</th>\n</tr>\n<tr>\n<td>phoenix</td>\n<td>imari</td>\n<td>henry</td>\n</tr>\n<tr>\n<td>zeki</td>\n<td>rome</td>\n<td>min</td>\n</tr>\n<tr>\n<td>apirka</td>\n<td>kelly</td>\n<td>brynn</td>\n</tr>\n</table>\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nh51: using table markup to present tabular data\nh63: using the scope attribute to associate header cells and data cells in data tables\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/tables/multi-level/":{"title":"\n  Tables with multi-level headers\n\n\n       • Tables\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["table with multiple column headers in each column","table with three headers related to each data cell","split up multi-level tables","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ntables with multi-level headers\n• tables\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ntables with multi-level headers\nthis page covers tables that have multi-level header cells associated per data cell. such tables are too complex to identify a strict horizontal or vertical association between header and data cells. in such tables, each table header is identified with a (document-wide) unique id. data cells refer to those ids by listing one or more in their headers attribute, separated by spaces.\ntables that should be marked up this way include:\ntables with column headers that repeat or change part-way through the table.\ntables with three or more header cells associated to each data cell.\ntables with multiple headers may also need to have a caption to identify it and a summary to describe the layout of the table, see caption & summary.\nin many cases it is worth considering to restructure the information in such tables to make them less complex for all readers, for example by splitting the information in smaller, more manageable tables as shown in example 3.\nin the table below, the headers for the top half of the tables are different to the headers of the bottom half. the header changes halfway through the table which makes the headers in columns ambiguous. to ensure each data cell is associated with the correct header, each <th> element has an unique id and each <td> cell has a headers attribute that lists the id values of the associated header cells.\nexample: supplier contacts\nexample 1 ltd\nexample 2 co\ncontact\njames phillips\nmarie beauchamp\nposition\nsales director\nsales manager\nemail\njp@1ltd.example.com\nmarie@2co.example.com\nexample 3 ltd\nexample 4 inc\ncontact\nsuzette jones\nalex howe\nposition\nsales officer\nsales director\nemail\nsuz@ltd3.example.com\nhowe@4inc.example.com\ncode snippet: assigning id attributes to <th> cells\n[…]\n<th id=\"co1\">example 1 ltd</th>\n<th id=\"co2\">example 2 co</th>\n[…]\n<th id=\"c1\">contact</th>\n[…]\ncode snippet: assigning header attributes to <td> cells\n[…]\n<td headers=\"co1 c1\">james phillips</td>\n<td headers=\"co2 c1\">marie beauchamp</td>\n[…]\nfull code for example “table with multiple column headers in each column”\nin this example table headers are used as subheadings to describe what the next section of the table is about. without these headers, the information would be unclear. using the headers attribute, all three headers can be properly associated with the data cell.\nexample: availability of holiday accommodation\nstudio\napt\nchalet\nvilla\nparis\n1 bedroom\n11\n20\n25\n23\n2 bedroom\n-\n43\n52\n32\n3 bedroom\n-\n13\n15\n40\nrome\n1 bedroom\n13\n21\n22\n3\n2 bedroom\n-\n23\n43\n30\n3 bedroom\n-\n16\n32\n40\ncode snippet: assigning id attributes to <th> cells\n[…]\n<th id=\"par\" colspan=\"5\" scope=\"colgroup\">paris</th>\n</tr>\n<tr>\n<th id=\"pbed1\">1 bedroom</th>\n[…]\ncode snippet: assigning header attributes to <td> cells\n[…]\n<td headers=\"par pbed1 stud\">11</td>\n<td headers=\"par pbed1 apt\"> 20</td>\n[…]\nfull code for example “table with three headers related to each data cell”\nthe two tables below provide the same information as the mutli-level table in the example above. this makes the information easier to understand by everyone and easier to code. also, simple tables are much better supported by tools to create web content, including wysiwyg (“what you see is what you get”) editors.\nexample: availability of holiday accommodation\nparis\nstudio\napt\nchalet\nvilla\n1 bedroom\n11\n20\n25\n23\n2 bedroom\n-\n43\n52\n32\n3 bedroom\n-\n13\n15\n40\nrome\nstudio\napt\nchalet\nvilla\n1 bedroom\n13\n21\n22\n3\n2 bedroom\n-\n23\n43\n30\n3 bedroom\n-\n16\n32\n40\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nh43: using id and headers attributes to associate data cells with header cells in data tables\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersonthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/forms/instructions/":{"title":"\n  Form Instructions\n\n\n       • Forms\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["overall instructions","in-line instructions","providing instructions within labels","providing instructions outside labels","placeholder text","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\nform instructions\n• forms\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\nform instructions\nprovide instructions to help users understand how to complete the form and use individual form controls. this includes indicating any required and optional input, data formats, and other important information.\nimportant: screen readers often switch to “forms mode” when they are processing content within a <form> element. in this mode they usually only read aloud form elements such as <input>, <select>, <textarea>, <legend>, and <label>. it is critical to include form instructions in ways that can be read aloud. this will be explained further below.\nwhere relevant, provide overall instructions that apply to the entire form. for example, indicate any required and optional input, allowable data formats, and timing limitations. provide such instructions before the <form> element to ensure that it is read aloud by screen readers before they switch to “forms mode”.\nin the example below, form instructions indicate how required fields are marked, the expected format for key data fields, and where to find additional help for each input.\nexample: all fields marked “required” must be completed.\ndates should all be typed in the format dd/mm/yyyy, (as in 21/07/2013).\npasswords must contain at least 8 letters and/or numbers.\nextra help can be found immediately after each field.\nin addition to overall instructions, it is also important to provide relevant instructions within the labels of the form controls. for example, to indicate required input fields and data formats in the text of the labels.\nfor simple use cases, providing instructions within labels may be sufficient. this approach is reliable across different web browsers and assistive technologies, although it may require some additional thought to support some styling needs.\nin the example below, the required format for the “expiration date” is indicated by “mm/yyyy” within the same label:\nexample: expiration date (mm/yyyy): code snippet: <label for=\"expire\">expiration date (mm/yyyy): </label> <input type=\"text\" name=\"expire\" id=\"expire\">\nproviding instructions outside labels allows more flexible positioning and design but sometimes it can be missed. it is also not supported by some web browsers (typically older versions) and assistive technologies that don’t implement wai-aria.\nusing aria-labelledby\none approach is to use the wai-aria aria-labelledby attribute to associate instructions with form controls. at the time of writing this tutorial, this approach is not fully supported by all web browsers and assistive technologies, for example, braille displays. to ensure backward compatibility, the for and id attributes are also used in this example.\nexample: #ex3 span {\ndisplay: inline-block;\nvertical-align: top;\n}\n#ex3 span span {\ndisplay: block;\nfont-size: 0.8em;\n}\nexpiration date:\nmm/yyyy\ncode snippet: <label id=\"explabel\" for=\"expire\" tabindex=\"-1\">expiration date:</label>\n<span>\n<input type=\"text\" name=\"expire\" id=\"expire\" aria-labelledby=\"explabel expdesc\">\n<span id=\"expdesc\" tabindex=\"-1\">mm/yyyy</span>\n</span>\nnote: at the time of writing those tutorials, it is necessary to add tabindex=\"-1\" to elements that are referenced by aria-labelledby or aria-describedby if those attributes point to two or more elements to make this technique work in internet explorer.\nusing aria-describedby\nby using aria-describedby to reference the format of the field, this information is made available to the users on request. that is, it is not automatically displayed or read aloud. this makes sense if the user has been informed of the format before, or when there are lots of input fields with the same format, for example.\ncode snippet: <label id=\"explabel\" for=\"expire\">expiration date:</label>\n<span>\n<input type=\"text\" name=\"expire\" id=\"expire\" aria-labelledby=\"explabel\" aria-describedby=\"expdesc\">\n<span id=\"expdesc\">mm/yyyy</span>\n</span>\nplaceholder text provides instructions or an example of the required data format inside form fields that have not yet been edited by the user. placeholder text is usually displayed with lower color contrast than text provided by users, and it disappears from form fields when users start entering text. if the placeholder text contains instructional information or examples, having it disappear can make it more difficult for users to check their responses prior to submitting the form.\nwhile placeholder text provides important guidance for many users, placeholder text is not a replacement for labels. assistive technologies, such as screen readers, do not treat placeholder text as labels. moreover, at the time of writing this tutorial, placeholder text is not broadly supported across assistive technologies and not displayed in older web browsers.\nnote: section hidden labels of this tutorial describes how to hide information visually but keep it available to assistive technology. this same approach can be used to avoid visual redundancy of displaying both labels and placeholder text. be aware that this makes it very hard for users to review the form. to avoid this problem, javascript can be used to make labels appear visually (in the associated label element) above or beside the input that has focus.\nexample: search: email: ::-webkit-input-placeholder {\ncolor: #777;\nopacity: 1;\n}\n:-moz-placeholder { /* firefox 18- */\ncolor: #777;\nopacity: 1;\n}\n::-moz-placeholder { /* firefox 19+ */\ncolor: #777;\nopacity: 1;\n}\n:-ms-input-placeholder {\ncolor: #777;\nopacity: 1;\n}\ncode snippet: <div>\n<label for=\"search\">search:</label> <input type=\"text\" name=\"search\" id=\"search\" placeholder=\"e.g. apple pie\">\n</div>\n<div>\n<label for=\"email\">email: </label> <input type=\"text\" name=\"email\" id=\"email\" placeholder=\"joe@example.com\">\n</div>\nstyling\nat the time of writing this tutorial, web browsers usually display the placeholder text in a color that does not meet the minimum contrast requirement of wcag 2.0. this means they are hard to see for many people. web browsers use a combination of color and opacity to achieve this effect. in most web browsers the color of the placeholder can be styled using proprietary css selectors. the following code snippet sets the color to a light gray, which has just enough contrast to meet the contrast requirement, assuming the background of the element is white.\ncode snippet: ::-webkit-input-placeholder {\ncolor: #777;\nopacity: 1;\n}\n:-moz-placeholder { /* firefox 18- */\ncolor: #777;\nopacity: 1;\n}\n::-moz-placeholder { /* firefox 19+ */\ncolor: #777;\nopacity: 1;\n}\n:-ms-input-placeholder {\ncolor: #777;\nopacity: 1;\n}\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\nsuccess criteria:\n1.3.1 info and relationships: information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. (level a)\n2.4.6 headings and labels: headings and labels describe topic or purpose. (level aa)\n3.3.2 labels or instructions: labels or instructions are provided when content requires user input. (level a)\n4.1.2 name, role, value: for all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies. (level a)\ntechniques:\ng17: ensuring that a contrast ratio of at least 7:1 exists between text (and images of text) and background behind the text\ng18: ensuring that a contrast ratio of at least 4.5:1 exists between text (and images of text) and background behind the text\ng131: providing descriptive labels\ng162: positioning labels to maximize predictability of relationships\nh44: using label elements to associate text labels with form controls\nh93: ensuring that id attributes are unique on a web page\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/tables/two-headers/":{"title":"\n  Tables with two headers\n\n\n       • Tables\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["table with header cells in the top row and first column","table with an offset column of header cells","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ntables with two headers\n• tables\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ntables with two headers\nthis page covers tables that have a simple row header and a simple column header. in such tables, the relationship between the headers and data cells becomes quickly ambiguous. for such tables, use the <th> element to identify the header cells and the scope attribute to declare the direction of each header. the scope attribute can be set to row or col to denote that a header applies to the entire row or column, respectively.\nadditionally, you can use the <caption> element to identify the table in a document. this is particularly useful for screen-reader users browsing the web page in “tables mode” where they can navigate from table to table. more background and guidance on the using <caption> element is provied on the caption & summary page.\nthe following table of opening times has header information in both the top row and the first column. all header cells are marked up as <th> cells with scope attributes added.\nin the header row, the col value for scope associates each header cell with the data cells in the column. in the header column, the row value associates the individual headers with their rows. without this information some users would not easily understand the relationship between header and data cells. in the example below, the “open” and “closed” labels are only useful if they can be assigned to a specific day and time.\nexample: delivery slots:\nmonday\ntuesday\nwednesday\nthursday\nfriday\n09:00 - 11:00\nclosed\nopen\nopen\nclosed\nclosed\n11:00 - 13:00\nopen\nopen\nclosed\nclosed\nclosed\n13:00 - 15:00\nopen\nopen\nopen\nclosed\nclosed\n15:00 - 17:00\nclosed\nclosed\nclosed\nopen\nopen\ncode snippet: <table>\n<caption>delivery slots:</caption>\n<tr>\n<td></td>\n<th scope=\"col\">monday</th>\n<th scope=\"col\">tuesday</th>\n<th scope=\"col\">wednesday</th>\n<th scope=\"col\">thursday</th>\n<th scope=\"col\">friday</th>\n</tr>\n<tr>\n<th scope=\"row\">09:00 - 11:00</th>\n<td>closed</td>\n<td>open</td>\n<td>open</td>\n<td>closed</td>\n<td>closed</td>\n</tr>\n<tr>\n<th scope=\"row\">11:00 - 13:00</th>\n<td>open</td>\n<td>open</td>\n<td>closed</td>\n<td>closed</td>\n<td>closed</td>\n</tr>\n[…]\n</table>\nfull code for “table with header cells in the top row and first column”\nin this table, the row header cells are in the second rather than in the first column. the approach is similar to the examples above: the scope of the header cells in the top row is set to col. by using the row value for scope assigns the header cells in the second column to data cells on the left and the right of the individual header cell.\nexample: holidays taken in the last six months\nid\nname\njuly\naugust\nseptember\noctober\nnovember\ndecember\n215\nabel\n5\n2\n0\n0\n0\n3\n231\nannette 0\n5\n3\n0\n0\n6\n173\nbernard\n2\n0\n0\n5\n0\n0\n141\ngerald\n0\n10\n0\n0\n0\n8\n99\nmichael\n8\n8\n8\n8\n0\n4\ncode snippet: […]\n<tr>\n<td>215</td>\n<th scope=\"row\">abel</th>\n<td>5</td>\n<td>2</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>3</td>\n</tr>\n[…]\nfull code for “table with an offset column of header cells”\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nh51: using table markup to present tabular data\nh63: using the scope attribute to associate header cells and data cells in data tables\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nandrew kirkpatrickthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/tables/irregular/":{"title":"\n  Tables with irregular headers\n\n\n       • Tables\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["table with two tier headers","table with headers spanning multiple rows or columns","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ntables with irregular headers\n• tables\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ntables with irregular headers\nthis page covers tables with header cells that span multiple columns and/or rows. several elements and attributes can be used to define the structure and relationships of the header and data cells.\nfor example, a header cell that spans three columns should be associated to corresponding data cells in the column group. this can be done by setting the scope attribute of the header cell to the value colgroup. the same principle applies to header cells spanning multiple rows. in this case they are associated with by using the value rowgroup in the scope attribute.\nhowever, before making these associations, the structure of such groups of columns and rows needs to be defined in the table markup:\na column group is defined using the <colgroup> element.\na row group is defined by the <thead>, <tfoot> and <tbody> elements.\n<thead> and <tfoot> elements can be used once in a table.\na table can have any number of <tbody> elements that each defines a row group.\nin the table below, there are two pairs of column headers. each pair of column headers, “produced” and “sold” is associated with a first-level header that identifies the pair: “mars” and “venus”. these first-level headers are made to span two columns by using the colspan attribute with the value of 2.\nto associate the first-level headers properly with all cells of both columns, the column structure needs to be defined at the beginning of the table. a <col> element identifies each column, beginning on the left. if a header spans two or more columns, use a <colgroup> element instead of that number of <col> elements, and the number of columns spanned is noted in the span attribute.\nin addition, the value of the scope attribute in the first-level headers is set to colgroup so that it is associated with the entire group of columns. the second-level headers only apply to the corresponding column so the scope attribute is set to col as shown in previous examples.\nexample: mars\nvenus\nproduced\nsold\nproduced\nsold\nteddy bears\n50,000\n30,000\n100,000\n80,000\nboard games\n10,000\n5,000\n12,000\n9,000\ncode snippet: <table>\n<col>\n<colgroup span=\"2\"></colgroup>\n<colgroup span=\"2\"></colgroup>\n<tr>\n<td rowspan=\"2\"></td>\n<th colspan=\"2\" scope=\"colgroup\">mars</th>\n<th colspan=\"2\" scope=\"colgroup\">venus</th>\n</tr>\n<tr>\n<th scope=\"col\">produced</th>\n<th scope=\"col\">sold</th>\n<th scope=\"col\">produced</th>\n<th scope=\"col\">sold</th>\n</tr>\n<tr>\n<th scope=\"row\">teddy bears</th>\n<td>50,000</td>\n<td>30,000</td>\n<td>100,000</td>\n<td>80,000</td>\n</tr>\n<tr>\n<th scope=\"row\">board games</th>\n<td>10,000</td>\n<td>5,000</td>\n<td>12,000</td>\n<td>9,000</td>\n</tr>\n</table>\nnote: a <colgroup> element can contain a <col> element to identify individual columns in the group. the combined sum of <col> elements (not contained in <colgroup> elements) and column elements indicated by the span attributes of the <colgroup> elements should be equal to the total number of columns in the table.\nin the example below, the table consists of two individual columns and one column group spanning three columns. it has six rows. there are two headers that span multiple rows. to make sure that such header cells that span multiple rows are correctly associated with all the cells in those rows, the rows need to be grouped. to define row groups wrap the corresponding rows in <tbody> elements (table body). additionally the scope attribute of header cells spanning rows has to be set to rowgroup.\nif a header spans a multiple header rows, wrap the rows in a <thead> element instead of a <tbody> element. use a <tfoot> element if a header spans multiple rows in the footer area of a table.\ndue to the complexity of the table a summary technique could be used to describe the layout of the table in detail.\nexample: poster availability\nposter name\ncolor\nsizes available\nzodiac\nfull color\na2\na3\na4\nblack and white\na1\na2\na3\nsepia\na3\na4\na5\nangels\nblack and white\na1\na3\na4\nsepia\na2\na3\na5\ncode snippet: <table>\n<caption>\nposter availability\n</caption>\n<col>\n<col>\n<colgroup span=\"3\"></colgroup>\n<thead>\n<tr>\n<th scope=\"col\">poster name</th>\n<th scope=\"col\">color</th>\n<th colspan=\"3\" scope=\"colgroup\">sizes available</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th rowspan=\"3\" scope=\"rowgroup\">zodiac</th>\n<th scope=\"row\">full color</th>\n<td>a2</td>\n<td>a3</td>\n<td>a4</td>\n</tr>\n<tr>\n<th scope=\"row\">black and white</th>\n<td>a1</td>\n<td>a2</td>\n<td>a3</td>\n</tr>\n<tr>\n<th scope=\"row\">sepia</th>\n<td>a3</td>\n<td>a4</td>\n<td>a5</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<th rowspan=\"2\" scope=\"rowgroup\">angels</th>\n<th scope=\"row\">black and white</th>\n<td>a1</td>\n<td>a3</td>\n<td>a4</td>\n</tr>\n<tr>\n<th scope=\"row\">sepia</th>\n<td>a2</td>\n<td>a3</td>\n<td>a5</td>\n</tr>\n</tbody>\n</table>\nnote: using <thead>, <tbody> and <tfoot> in every table, even if there are no headers spanning columns may avoid confusion on when to use them.\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nh63: using the scope attribute to associate header cells and data cells in data tables\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/tables/caption-summary/":{"title":"\n  Caption & Summary\n\n\n       • Tables\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["identifying a table using a caption","summaries for more complex tables","nesting summary inside the <caption> element","using aria-describedby to provide a table summary","using the <figure> element to mark up a table summary","using the summary attribute","related wcag 2.0 resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ncaption & summary\n• tables\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ncaption & summary\ncaptions and summaries provide information that can help users find, navigate, and understand tables. while they are not required in every case to meet wcag 2.0, captions and summaries are relatively simple ways to provide such information that is often needed.\na caption is like a heading for a table. most screen readers announce the content of captions. this helps users to find a table and understand what it’s about, and decide if they want to read it. if the user uses “tables mode”, captions are the primary mechanism to identify tables. the caption is provided by the <caption> element.\na summary conveys information about the organization of the data in a table and helps users navigate it. for example, if a table has an unconventional structure (as in the examples below), information about what content can be found in which row or column can be provided to the user. a summary is usually only needed for complex tables.\nif both caption and summary are provided for one table, the summary should not duplicate information present in the caption.\nsee wcag 2.0 technique h39: using caption elements to associate data table captions with data tables for more advice on captions.\nthe caption should be a succinct heading for the table content. in this example “concerts” tells users what information is in the table (as the table could, for example, also contain art exhibition information).\nthe <caption> element is placed directly as a child of the <table> element.\nexample: concerts\ndate\nevent\nvenue\n12 feb\nwaltz with strauss\nmain hall\n24 mar\nthe obelisks\nwest wing\n14 apr\nthe what\nmain hall\ncode snippet: <table>\n<caption>concerts</caption>\n<tr>\n<th>date</th>\n<th>event</th>\n<th>venue</th>\n</tr>\n<tr>\n<td>12 feb</td>\n<td>waltz with strauss</td>\n<td>main hall</td>\n</tr>\n[…]\n</table>\nin the examples below, different techniques are used to provide summaries to users.\nthis complex table shows availability of different types and sizes of accommodation in two different locations. the <caption> element acts as a heading of the table and provides the summary that describes the composition of the table as well.\nif implemented this way, the summary is available to visual users as well.\nexample: availability of holiday accommodation\ncolumn one has the location and size of accommodation, other columns show the type and number of properties available\nstudio apt chalet villa paris 1 bedroom 11 20 25 23 2 bedroom - 43 52 32 3 bedroom - 13 15 40 rome 1 bedroom 13 21 22 3 2 bedroom - 23 43 30 3 bedroom - 16 32 40 code snippet: <caption>availability of holiday accommodation <br>\n<span>column one has the location and size of accommodation, other columns show the type and number of properties available</span>\n</caption>\nnote: a span element was added to style the summary differently from the caption. this is not required.\nin this approach an element with an id attribute is associated as a summary by using the aria-describedby attribute of the table. any element with a unique id attribute can be used as a summary for a table in this way.\nthe element containing the summary doesn’t need to be in front of the table in the document, but it helps users to discover the summary more easily if the summary is in close proximity of the table, especially if they are not using a screen reader.\nnote: this wai-aria feature may not be as widely supported by assistive technology than other approaches for summaries on this page.\nexample: column one has the location and size of accommodation, other columns show the type and number of properties available.\nparis: availability of holiday accommodation\nstudio apt chalet villa 1 bedroom 11 20 25 23 2 bedroom - 43 52 32 3 bedroom - 13 15 40 code snippet: <p id=\"tbldesc\">column one has the location and size of accommodation, other columns show the type and number of properties available.</p>\n<table aria-describedby=\"tbldesc\">\n[…]\nin this approach the table is wrapped in a <figure> element. the <figcaption> element contains the caption and summary text.\nscreen reader users navigating in “tables mode” are usually unable to identify a table by a caption applied like this. the caption part of the <figcaption> element can be explicitly associated to the table by using the aria-labelledby attribute and the summary part by using the aria-describedby attributes. note that this could lead to the caption and summary being read out multiple times.\nnote: this html5 feature may not be as widely supported by assistive technology than other approaches for summaries on this page.\nexample: paris: availability of holiday accommodationcolumn one has the location and size of accommodation, other columns show the type and number of properties available.\nstudio apt chalet villa 1 bedroom 11 20 25 23 2 bedroom - 43 52 32 3 bedroom - 13 15 40 code snippet: not using wai-aria\n<figure>\n<figcaption>\n<strong>paris: availability of holiday accommodation</strong><br>\n<span>column one has the location and size of accommodation, other columns show the type and number of properties available.</span>\n</figcaption>\n<table>\n[…]\n</table>\n</figure>\ncode snippet: using wai-aria\n<figure>\n<figcaption>\n<strong id=\"paris-caption\">paris: availability of holiday accommodation</strong><br>\n<span id=\"paris-summary\">column one has the location and size of accommodation, other columns show the type and number of properties available.</span>\n</figcaption>\n<table aria-labelledby=\"paris-caption\" aria-describedby=\"paris-summary\">\n[…]\n</table>\n</figure>\nnote: the summary attribute is deprecated in html5.\nin this approach, the summary text is in the summary attribute of the table. such summaries are not displayed visually. they are generally only available to screen reader users.\nsee wcag 2.0 technique h73: using the summary attribute of the table element to give an overview of data tables for advice on the summary attribute.\nexample: paris: availability of holiday accommodation\nstudio apt chalet villa 1 bedroom 11 20 25 23 2 bedroom - 43 52 32 3 bedroom - 13 15 40 code snippet: <table\nsummary=\"column one has the location and size of accommodation, other columns show the type and number of properties available.\">\nthe following wcag 2.0 resources are directly related to this page. relationship to wcag 2.0 provides more background information.\ntechniques:\nh39: using caption elements to associate data table captions with data tables\nh73: using the summary attribute of the table element\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nsharron rushthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}},"http://www.w3.org/WAI/tutorials/tables/tips/":{"title":"\n  Tips and Tricks\n\n\n       • Tables\n\n\n  • WAI Web Accessibility Tutorials\n  ","flavors":{"1,tutorial":["other w3c resources","we welcome your ideas","document information"],"0.3,tutorial,example":["\ntips and tricks\n• tables\n• wai web accessibility tutorials\n","\nweb accessibility tutorials guidance on how to create websites that meet wcag\n","\ntips and tricks\nkeep it simple: complex tables are more work for content creators as well as being harder to interpret for users. it’s usually better to break up complex tables into simple individual tables, each containing the data for one sub-topic.\ntable separation: if several tables follow one another, don’t use a single table and put in an additional row of <th> cells. screen readers may read aloud all <th> cells in a column, resulting in confusion. start a new <table> when the topic changes.\ndata separation:\nmake sure that each separate piece of data has its own cell. don’t use headers in one column and all data in a second column, as this will make it almost impossible for screen readers to work out the relationships between data across columns.\ndon't use line breaks (<br> elements) to create table rows as the data in the pseudo-rows may no longer align correctly when text is resized.\nalignment: align text to the left and numeric data to the right (in left-to-right languages), so that people using larger text sizes or smaller screens will be able to find it. this is especially useful if a cell spans more than one column. it’s helpful to give column headers the same alignment as the data in the cells below.\nstyling header cells: <th> elements are used for header cells, using <td> elements with different styling will make tables less accessible if not inaccessible. it is also helpful to differentiate <th> and <td> cells visually. for example, on these tutorial pages header cells have a dark gray background.\nzebra tables: styling even and odd rows in a different way can be helpful to people who have reading difficulties or who enlarge text. it acts as a visual guide. highlighting the cell (and row/column) on mouseover and keyboard focus to help people to see where they are also helps. make sure that the contrast ratio between the text and background is good for both headers and data cells. here is how to check the contrast ratio.\nflexibility: due to the layout model of tables, they sometimes don’t fit on small screens small or are too wide if the user is using zoom. in such circumstances it’s important that the table isn’t cut off (for example by using overflow: hidden in css). in these tutorials overflow: scroll is applied to an element wrapping the table so users can scroll through the table horizontally but there are many more options to display table in such circumstances.\ntables for layout: tables should not be used for layout purposes. use cascading style sheets (css) for layout. if there are already layout tables present, don’t use structural elements (like <th> or <caption>) and attributes discussed in this tutorial, and do add role=\"presentation\" to the <table> element.\ncontent can be presented in different ways secton of accessibility principles in how people with disabilities use the web.\nplease send any ideas, suggestions, or comments to the (publicly-archived) mailing list wai-eo-editors@w3.org. you can also contribute to the code directly on github.\nfork & edit this page on github\n","\nfeedback: we welcome ideas for improvements, bug reports, and comments via github or e-mail to wai-eo-editors@w3.org (a publicly archived list) or wai@w3.org (a wai staff-only list).\nstatus:\nupdated\n02 march 2015\n(first published september 2014)\neditors:\neric eggertshadi abou-zahra\ncontributors:\nanna belle leisersonthe web content accessibility guidelines working group (wcag wg)the education and outreach working group (eowg)\ndeveloped with support from the wai-act project, co-funded by the european commission ist programme.\n[attributions] [changelog]\n[wai site map]\n[help with wai website]\n[search]\n[contacting wai]\ncopyright © 2014 w3c ® (mit, ercim, keio, beihang) usage policies apply.\n","\nvar _paq = _paq || [];\n_paq.push([\"setdomains\", [\"*.www.w3.org/wai\"]]);\n_paq.push(['trackpageview']);\n_paq.push(['enablelinktracking']);\n(function() {\nvar u=\"//www.w3.org/analytics/piwik/\";\n_paq.push(['settrackerurl', u+'piwik.php']);\n_paq.push(['setsiteid', 328]);\nvar d=document, g=d.createelement('script'),\ns=d.getelementsbytagname('script')[0];\ng.type='text/javascript'; g.async=true; g.defer=true; g.src999=u+'piwik.js';\ns.parentnode.insertbefore(g,s);\n})();\n","<p><img src999=\"//www.w3.org/analytics/piwik/piwik.php?idsite=328\"\nstyle=\"border:0;\" alt=\"\" /></p>"]}}};
